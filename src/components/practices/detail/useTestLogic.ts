import { useState } from 'react';
import { useToast } from '@/hooks/use-toast';

export interface TestResult {
  score: number;
  interpretation: string;
  recommendations?: string;
  maxScore?: number;
}

export const useTestLogic = () => {
  const [answers, setAnswers] = useState<{[key: number]: string}>({});
  const [testResult, setTestResult] = useState<string>('');
  const [showResult, setShowResult] = useState(false);
  const { toast } = useToast();

  const handleAnswerChange = (questionIndex: number, answer: string) => {
    setAnswers(prev => ({
      ...prev,
      [questionIndex]: answer
    }));
  };

  const calculateBeckDepressionResult = (score: number): TestResult => {
    let interpretation = '';
    if (score <= 13) {
      interpretation = '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è - –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã';
    } else if (score <= 19) {
      interpretation = '–õ–µ–≥–∫–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞';
    } else if (score <= 28) {
      interpretation = '–£–º–µ—Ä–µ–Ω–Ω–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞';
    } else {
      interpretation = '–¢—è–∂–µ–ª–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è - –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É';
    }

    return {
      score,
      interpretation,
      maxScore: 63
    };
  };

  const calculateCognitiveDistortionsResult = (score: number): TestResult => {
    let interpretation = '';
    let recommendations = '';
    
    if (score <= 20) {
      interpretation = '–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω—ã —Å–ª–∞–±–æ';
      recommendations = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–µ –º—ã—à–ª–µ–Ω–∏–µ –≤ —Ü–µ–ª–æ–º –≥–∏–±–∫–æ–µ –∏ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ.';
    } else if (score <= 40) {
      interpretation = '–ò—Å–∫–∞–∂–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –∏–Ω–æ–≥–¥–∞';
      recommendations = '–£ –≤–∞—Å –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.';
    } else if (score <= 60) {
      interpretation = '–ò—Å–∫–∞–∂–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω—ã —É–º–µ—Ä–µ–Ω–Ω–æ';
      recommendations = '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã –º—ã—à–ª–µ–Ω–∏—è –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å –≤–∞–º –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏.';
    } else {
      interpretation = '–ò—Å–∫–∞–∂–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω—ã —Å–∏–ª—å–Ω–æ';
      recommendations = '–£ –≤–∞—Å –≤—ã—Ä–∞–∂–µ–Ω—ã —Å—Ç–æ–π–∫–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è.';
    }

    return {
      score,
      interpretation,
      recommendations,
      maxScore: 80
    };
  };

  const calculateWursAdhdResult = (score: number): TestResult => {
    let interpretation = '';
    let recommendations = '';
    
    if (score <= 30) {
      interpretation = '–°–∏–º–ø—Ç–æ–º—ã –°–î–í–ì –≤—ã—Ä–∞–∂–µ–Ω—ã —Å–ª–∞–±–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç';
      recommendations = '–ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –°–î–í–ì –ø–æ —à–∫–∞–ª–µ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ.';
    } else if (score <= 49) {
      interpretation = '–í–æ–∑–º–æ–∂–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –°–î–í–ì';
      recommendations = '–£ –≤–∞—Å –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã, —Å—Ö–æ–∂–∏–µ —Å –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è–º–∏ –°–î–í–ì.';
    } else {
      interpretation = '–í—ã—Å–æ–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–ª–∏—á–∏—è –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ –°–î–í–ì';
      recommendations = '–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –≥–æ–≤–æ—Ä—è—Ç –æ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö –°–î–í–ì.';
    }

    return {
      score,
      interpretation,
      recommendations,
      maxScore: 100
    };
  };

  const calculateYbocsResult = (score: number): TestResult => {
    let interpretation = '';
    let recommendations = '';
    
    if (score <= 7) {
      interpretation = '–û–ö–† –≤—ã—Ä–∞–∂–µ–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–Ω–æ—Ä–º–∞)';
      recommendations = '–°–∏–º–ø—Ç–æ–º—ã –û–ö–† –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω—ã –º–∏–Ω–∏–º–∞–ª—å–Ω–æ.';
    } else if (score <= 15) {
      interpretation = '–õ—ë–≥–∫–∞—è —Å—Ç–µ–ø–µ–Ω—å –û–ö–†';
      recommendations = '–õ—ë–≥–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –û–ö–†, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏.';
    } else if (score <= 23) {
      interpretation = '–£–º–µ—Ä–µ–Ω–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å –û–ö–†';
      recommendations = '–°–∏–º–ø—Ç–æ–º—ã –û–ö–† —Å—Ä–µ–¥–Ω–µ–π —Å—Ç–µ–ø–µ–Ω–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è.';
    } else if (score <= 31) {
      interpretation = '–í—ã—Ä–∞–∂–µ–Ω–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å –û–ö–†';
      recommendations = '–Ø—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.';
    } else {
      interpretation = '–ö—Ä–∞–π–Ω–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–µ –û–ö–†';
      recommendations = '–ö—Ä–∞–π–Ω–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã ‚Äî –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å.';
    }

    return {
      score,
      interpretation,
      recommendations,
      maxScore: 40
    };
  };

  const calculatePhq4Result = (score: number, answers: {[key: number]: string}): TestResult => {
    let interpretation = '';
    let recommendations = '';

    // Calculate PHQ-2 (depression) subscale - questions 0 and 1
    const phq2Score = (parseInt(answers[0]?.charAt(0)) || 0) + (parseInt(answers[1]?.charAt(0)) || 0);
    
    // Calculate GAD-2 (anxiety) subscale - questions 2 and 3
    const gad2Score = (parseInt(answers[2]?.charAt(0)) || 0) + (parseInt(answers[3]?.charAt(0)) || 0);

    // Overall PHQ-4 interpretation
    if (score <= 2) {
      interpretation = '–ù–æ—Ä–º–∞';
      recommendations = `**–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç PHQ-4: ${score}/12 - –ù–æ—Ä–º–∞**

üåü –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –í–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –∏ —Ç—Ä–µ–≤–æ–≥–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã.

**–ü–æ–¥—à–∫–∞–ª—ã:**
‚Ä¢ –î–µ–ø—Ä–µ—Å—Å–∏—è (PHQ-2): ${phq2Score}/6
‚Ä¢ –¢—Ä–µ–≤–æ–≥–∞ (GAD-2): ${gad2Score}/6

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚úì –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ
‚úì –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∑–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω –∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å  
‚úì –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 2-4 –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏

**–ê—Ç—Ä–∏–±—É—Ü–∏—è:** PHQ-4: Kroenke, Spitzer, Williams, L√∂we (2009). Free to use.`;
    } else if (score <= 5) {
      interpretation = '–õ—ë–≥–∫–∞—è –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç—å –¥–∏—Å—Ç—Ä–µ—Å—Å–∞';
      recommendations = `**–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç PHQ-4: ${score}/12 - –õ—ë–≥–∫–∞—è –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç—å**

‚ö†Ô∏è –õ—ë–≥–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –∏–ª–∏ —Ç—Ä–µ–≤–æ–≥–∏.

**–ü–æ–¥—à–∫–∞–ª—ã:**
‚Ä¢ –î–µ–ø—Ä–µ—Å—Å–∏—è (PHQ-2): ${phq2Score}/6 ${phq2Score >= 3 ? '(–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω–∏–Ω–≥)' : ''}
‚Ä¢ –¢—Ä–µ–≤–æ–≥–∞ (GAD-2): ${gad2Score}/6 ${gad2Score >= 3 ? '(–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω–∏–Ω–≥)' : ''}

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
${phq2Score >= 3 ? '‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π —Ç–µ—Å—Ç PHQ-9 –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏\n' : ''}${gad2Score >= 3 ? '‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π —Ç–µ—Å—Ç GAD-7 –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–≤–æ–≥–∏\n' : ''}‚Ä¢ –ò–∑—É—á–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏: –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∂–∏–º —Å–Ω–∞ –∏ –æ—Ç–¥—ã—Ö–∞

**–ê—Ç—Ä–∏–±—É—Ü–∏—è:** PHQ-4: Kroenke, Spitzer, Williams, L√∂we (2009). Free to use.`;
    } else if (score <= 8) {
      interpretation = '–£–º–µ—Ä–µ–Ω–Ω–∞—è –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç—å –¥–∏—Å—Ç—Ä–µ—Å—Å–∞';
      recommendations = `**–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç PHQ-4: ${score}/12 - –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç—å**

üî∂ –£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –∏/–∏–ª–∏ —Ç—Ä–µ–≤–æ–≥–∏.

**–ü–æ–¥—à–∫–∞–ª—ã:**
‚Ä¢ –î–µ–ø—Ä–µ—Å—Å–∏—è (PHQ-2): ${phq2Score}/6 ${phq2Score >= 3 ? '(–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω–∏–Ω–≥)' : ''}
‚Ä¢ –¢—Ä–µ–≤–æ–≥–∞ (GAD-2): ${gad2Score}/6 ${gad2Score >= 3 ? '(–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω–∏–Ω–≥)' : ''}

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ —Ç–µ—Å—Ç—ã PHQ-9 –∏ GAD-7 –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏: –¥—ã—Ö–∞–Ω–∏–µ, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ä–µ–∂–∏–º —Å–Ω–∞
‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º, –µ—Å–ª–∏ —Å–∏–º–ø—Ç–æ–º—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è >2 –Ω–µ–¥–µ–ª—å
‚Ä¢ –ï—Å–ª–∏ —Å–∏–º–ø—Ç–æ–º—ã –º–µ—à–∞—é—Ç –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É

**–ê—Ç—Ä–∏–±—É—Ü–∏—è:** PHQ-4: Kroenke, Spitzer, Williams, L√∂we (2009). Free to use.`;
    } else {
      interpretation = '–¢—è–∂—ë–ª–∞—è –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç—å –¥–∏—Å—Ç—Ä–µ—Å—Å–∞';
      recommendations = `**–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç PHQ-4: ${score}/12 - –¢—è–∂—ë–ª–∞—è –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç—å**

üö® **–í–Ω–∏–º–∞–Ω–∏–µ!** –í—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –∏/–∏–ª–∏ —Ç—Ä–µ–≤–æ–≥–∏.

**–ü–æ–¥—à–∫–∞–ª—ã:**
‚Ä¢ –î–µ–ø—Ä–µ—Å—Å–∏—è (PHQ-2): ${phq2Score}/6 ${phq2Score >= 3 ? '(–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω–∏–Ω–≥)' : ''}
‚Ä¢ –¢—Ä–µ–≤–æ–≥–∞ (GAD-2): ${gad2Score}/6 ${gad2Score >= 3 ? '(–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω–∏–Ω–≥)' : ''}

**–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:**
üè• **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –∫–ª–∏–Ω–∏—Ü–∏—Å—Ç–æ–º** (–æ—á–Ω–æ –∏–ª–∏ –æ–Ω–ª–∞–π–Ω)
üìã –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ —Ç–µ—Å—Ç—ã PHQ-9 –∏ GAD-7
‚ö†Ô∏è –ï—Å–ª–∏ –µ—Å—Ç—å –º—ã—Å–ª–∏ –æ —Å–∞–º–æ–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–∏ ‚Äî –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é

**–°–ª—É–∂–±—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏:**
üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122 (–±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)

**–ê—Ç—Ä–∏–±—É—Ü–∏—è:** PHQ-4: Kroenke, Spitzer, Williams, L√∂we (2009). Free to use.`;
    }

    return {
      score,
      interpretation,
      recommendations,
      maxScore: 12
    };
  };

  const calculateTestResult = (item: any) => {
    if (!item.questions || !item.keys) return;
    
    const totalQuestions = item.questions.length;
    const answeredQuestions = Object.keys(answers).length;
    
    if (answeredQuestions < totalQuestions) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã",
        variant: "destructive"
      });
      return;
    }

    let score = 0;
    let result: TestResult;

    // Calculate score based on test type
    if (item.title.includes("–®–∫–∞–ª–∞ –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –ë–µ–∫–∞")) {
      Object.values(answers).forEach(answer => {
        const answerIndex = parseInt(answer);
        if (!isNaN(answerIndex)) {
          score += answerIndex;
        }
      });
      result = calculateBeckDepressionResult(score);
    } else if (item.keys === "PHQ-4") {
      Object.values(answers).forEach(answer => {
        const answerIndex = parseInt(answer.charAt(0));
        if (!isNaN(answerIndex)) {
          score += answerIndex;
        }
      });
      result = calculatePhq4Result(score, answers);
    } else if (item.keys === "cognitive_distortions_scale") {
      Object.values(answers).forEach(answer => {
        const answerIndex = parseInt(answer);
        if (!isNaN(answerIndex)) {
          score += answerIndex;
        }
      });
      result = calculateCognitiveDistortionsResult(score);
    } else if (item.keys === "wurs_adhd_scale") {
      Object.values(answers).forEach(answer => {
        const answerIndex = parseInt(answer);
        if (!isNaN(answerIndex)) {
          score += answerIndex;
        }
      });
      result = calculateWursAdhdResult(score);
    } else if (item.keys === "y_bocs_scale") {
      Object.values(answers).forEach(answer => {
        const answerIndex = parseInt(answer);
        if (!isNaN(answerIndex)) {
          score += answerIndex;
        }
      });
      result = calculateYbocsResult(score);
    } else {
      // Default calculation for other tests
      Object.values(answers).forEach(answer => {
        if (answer === '–¥–∞' || answer === '—á–∞—Å—Ç–æ' || answer === '—Å–æ–≥–ª–∞—Å–µ–Ω') {
          score += 1;
        }
      });
      
      const percentage = (score / totalQuestions) * 100;
      let interpretation = '';
      
      if (percentage >= 70) {
        interpretation = '–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É';
      } else if (percentage >= 40) {
        interpretation = '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å - —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –æ–±–ª–∞—Å—Ç—å';
      } else {
        interpretation = '–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å - –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ';
      }

      result = {
        score,
        interpretation,
        maxScore: totalQuestions
      };
    }

    // Format result text
    let resultText = '';
    
    if (item.keys === "PHQ-4") {
      // For PHQ-4, use the detailed recommendations from the function
      resultText = result.recommendations || result.interpretation;
    } else {
      // Standard formatting for other tests
      resultText = `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.score}`;
      if (result.maxScore) {
        resultText += ` –∏–∑ ${result.maxScore} –≤–æ–∑–º–æ–∂–Ω—ã—Ö`;
      }
      resultText += `\n\n–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: ${result.interpretation}`;
      
      if (result.recommendations) {
        resultText += `\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${result.recommendations}`;
      }
      
      resultText += '\n\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –¥–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.';
    }

    setTestResult(resultText);
    setShowResult(true);
  };

  return {
    answers,
    testResult,
    showResult,
    handleAnswerChange,
    calculateTestResult
  };
};