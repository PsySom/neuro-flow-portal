
import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Clock, Info, Edit, Star, Trash2 } from 'lucide-react';

interface Activity {
  id: number;
  name: string;
  emoji: string;
  startTime: string;
  endTime: string;
  duration: string;
  color: string;
  importance: number;
  completed: boolean;
  type: string;
  needEmoji?: string;
}

interface DayViewProps {
  currentDate: Date;
}

interface ActivityLayout {
  activity: Activity;
  top: number;
  height: number;
  left: number;
  width: number;
  column: number;
  totalColumns: number;
}

const DayView: React.FC<DayViewProps> = ({ currentDate }) => {
  const baseActivities: Activity[] = [
    { id: 2, name: '–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ', emoji: '‚òÄÔ∏è', startTime: '08:00', endTime: '08:30', duration: '30 –º–∏–Ω', color: 'bg-yellow-200', importance: 3, completed: true, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: '‚ö°' },
    { id: 3, name: '–ó–∞—Ä—è–¥–∫–∞', emoji: 'üèÉ‚Äç‚ôÇÔ∏è', startTime: '08:30', endTime: '09:30', duration: '1 —á', color: 'bg-green-200', importance: 4, completed: true, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üí™' },
    { id: 4, name: '–î—É—à, –∑–∞–≤—Ç—Ä–∞–∫, –≥–∏–≥–∏–µ–Ω–∞', emoji: 'üöø', startTime: '09:30', endTime: '10:00', duration: '30 –º–∏–Ω', color: 'bg-blue-200', importance: 4, completed: true, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üßò' },
    { id: 5, name: '–£—Ç—Ä–µ–Ω–Ω–∏–π –¥–Ω–µ–≤–Ω–∏–∫', emoji: 'üìù', startTime: '10:00', endTime: '10:30', duration: '30 –º–∏–Ω', color: 'bg-purple-200', importance: 5, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üß†' },
    { id: 6, name: '–î–æ—Ä–æ–≥–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É', emoji: 'üöó', startTime: '10:30', endTime: '11:00', duration: '30 –º–∏–Ω', color: 'bg-gray-200', importance: 2, completed: false, type: '–∑–∞–¥–∞—á–∞' },
    { id: 7, name: '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º', emoji: 'üíº', startTime: '11:00', endTime: '12:00', duration: '1 —á', color: 'bg-orange-200', importance: 5, completed: false, type: '–∑–∞–¥–∞—á–∞' },
    { id: 8, name: '–ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞ –∫–æ—Ñ–µ', emoji: '‚òï', startTime: '12:00', endTime: '12:30', duration: '30 –º–∏–Ω', color: 'bg-amber-200', importance: 3, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üå±' },
    { id: 9, name: '–†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏', emoji: 'üìã', startTime: '13:00', endTime: '14:00', duration: '1 —á', color: 'bg-red-200', importance: 4, completed: false, type: '–∑–∞–¥–∞—á–∞' },
    { id: 10, name: '–û–±–µ–¥', emoji: 'üçΩÔ∏è', startTime: '14:00', endTime: '14:30', duration: '30 –º–∏–Ω', color: 'bg-green-300', importance: 4, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üçé' },
    { id: 11, name: '–ü—Ä–æ–≥—É–ª–∫–∞', emoji: 'üö∂‚Äç‚ôÇÔ∏è', startTime: '14:30', endTime: '15:00', duration: '30 –º–∏–Ω', color: 'bg-emerald-200', importance: 3, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üå≥' },
    { id: 12, name: '–†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏', emoji: 'üìã', startTime: '15:00', endTime: '17:00', duration: '2 —á', color: 'bg-red-200', importance: 4, completed: false, type: '–∑–∞–¥–∞—á–∞' },
    { id: 13, name: '–í—Å—Ç—Ä–µ—á–∞ —Å –¥—Ä—É–≥–æ–º', emoji: 'üë•', startTime: '17:00', endTime: '19:00', duration: '2 —á', color: 'bg-pink-200', importance: 4, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: '‚ù§Ô∏è' },
    { id: 14, name: '–£–∂–∏–Ω', emoji: 'üçΩÔ∏è', startTime: '19:00', endTime: '20:00', duration: '1 —á', color: 'bg-green-300', importance: 4, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üçé' },
    { id: 15, name: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–∞', emoji: 'üé¨', startTime: '20:00', endTime: '21:30', duration: '1.5 —á', color: 'bg-violet-200', importance: 2, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üé≠' },
    { id: 16, name: '–î—É—à, –≥–∏–≥–∏–µ–Ω–∞', emoji: 'üöø', startTime: '21:30', endTime: '22:00', duration: '30 –º–∏–Ω', color: 'bg-blue-200', importance: 4, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üßò' },
    { id: 17, name: '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞', emoji: 'üìù', startTime: '22:00', endTime: '22:30', duration: '30 –º–∏–Ω', color: 'bg-purple-200', importance: 5, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üß†' },
    { id: 1, name: '–°–æ–Ω', emoji: 'üò¥', startTime: '22:30', endTime: '08:00', duration: '9.5 —á', color: 'bg-indigo-200', importance: 5, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üõå' },
  ];

  const currentTimeString = new Date().toLocaleTimeString('ru-RU', { 
    hour: '2-digit', 
    minute: '2-digit' 
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è
  const getTimeInMinutes = (timeString: string) => {
    const [hour, minute] = timeString.split(':').map(Number);
    return hour * 60 + minute;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
  const activitiesOverlap = (activity1: Activity, activity2: Activity) => {
    const start1 = getTimeInMinutes(activity1.startTime);
    let end1 = getTimeInMinutes(activity1.endTime);
    const start2 = getTimeInMinutes(activity2.startTime);
    let end2 = getTimeInMinutes(activity2.endTime);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π, –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö –ø–æ–ª–Ω–æ—á—å
    if (end1 < start1) end1 += 24 * 60;
    if (end2 < start2) end2 += 24 * 60;
    
    return start1 < end2 && start2 < end1;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
  const calculateActivityLayouts = (): ActivityLayout[] => {
    const layouts: ActivityLayout[] = [];
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const activityGroups: Activity[][] = [];
    const processed = new Set<number>();
    
    baseActivities.forEach(activity => {
      if (processed.has(activity.id)) return;
      
      const group: Activity[] = [activity];
      processed.add(activity.id);
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å —Ç–µ–∫—É—â–µ–π –∏–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏ –≥—Ä—É–ø–ø—ã
      let foundNew = true;
      while (foundNew) {
        foundNew = false;
        baseActivities.forEach(otherActivity => {
          if (processed.has(otherActivity.id)) return;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ –≥—Ä—É–ø–ø–µ
          const overlapsWithGroup = group.some(groupActivity => 
            activitiesOverlap(groupActivity, otherActivity)
          );
          
          if (overlapsWithGroup) {
            group.push(otherActivity);
            processed.add(otherActivity.id);
            foundNew = true;
          }
        });
      }
      
      activityGroups.push(group);
    });
    
    // –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
    activityGroups.forEach(group => {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
      group.sort((a, b) => getTimeInMinutes(a.startTime) - getTimeInMinutes(b.startTime));
      
      const totalColumns = Math.min(group.length, 4);
      const columnWidth = 100 / totalColumns;
      
      group.forEach((activity, index) => {
        const startMinutes = getTimeInMinutes(activity.startTime);
        let endMinutes = getTimeInMinutes(activity.endTime);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π, –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö –ø–æ–ª–Ω–æ—á—å
        if (endMinutes < startMinutes) {
          endMinutes += 24 * 60;
        }
        
        const top = (startMinutes / 60) * 60; // 60px –Ω–∞ —á–∞—Å
        let height = ((endMinutes - startMinutes) / 60) * 60;
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ - —Ä–∞–∑–º–µ—Ä —á–∞—Å–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
        height = Math.max(height, 60);
        
        const column = index % totalColumns;
        const left = column * columnWidth;
        
        layouts.push({
          activity,
          top: Math.max(0, top),
          height: Math.min(height, 1440 - Math.max(0, top)),
          left,
          width: columnWidth,
          column,
          totalColumns
        });
      });
    });
    
    return layouts;
  };

  const activityLayouts = calculateActivityLayouts();

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∞—Å–æ–≤—ã–µ –æ—Ç–º–µ—Ç–∫–∏
  const timeMarkers = Array.from({ length: 25 }, (_, i) => {
    const hour = i;
    return {
      hour,
      time: `${hour.toString().padStart(2, '0')}:00`,
      position: hour * 60 // 60px –Ω–∞ —á–∞—Å
    };
  });

  return (
    <Card className="h-[700px] bg-white/70 backdrop-blur-lg border-0 shadow-xl">
      <CardContent className="p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold flex items-center space-x-2">
            <Clock className="w-5 h-5 text-emerald-600" />
            <span>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–Ω—è</span>
          </h2>
          <Badge variant="outline" className="bg-red-500 text-white">
            –°–µ–π—á–∞—Å: {currentTimeString}
          </Badge>
        </div>

        <div className="flex h-[600px] overflow-y-auto">
          {/* –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ —Å–ª–µ–≤–∞ */}
          <div className="w-16 flex-shrink-0 relative border-r border-gray-200">
            {timeMarkers.map(({ hour, time, position }) => (
              <div 
                key={hour}
                className="absolute text-xs text-gray-500 -translate-y-2"
                style={{ top: `${position}px` }}
              >
                {hour < 24 ? time : ''}
              </div>
            ))}
          </div>

          {/* –û–±–ª–∞—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π */}
          <div className="flex-1 relative pl-4" style={{ height: '1440px' }}>
            {/* –°–µ—Ç–∫–∞ —á–∞—Å–æ–≤ */}
            {timeMarkers.slice(0, 24).map(({ hour, position }) => (
              <div
                key={hour}
                className="absolute w-full border-t border-gray-100"
                style={{ top: `${position}px` }}
              />
            ))}

            {/* –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
            {activityLayouts.map(({ activity, top, height, left, width }) => {
              // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–Ω—è
              if (top < 0 || top > 1440) return null;
              
              return (
                <div
                  key={activity.id}
                  className={`absolute ${activity.color} rounded-lg p-2 border border-gray-200 shadow-sm`}
                  style={{ 
                    top: `${Math.max(0, top)}px`, 
                    height: `${Math.min(height, 1440 - Math.max(0, top))}px`,
                    left: `${left}%`,
                    width: `${width - 1}%`, // -1% –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
                    minHeight: '60px'
                  }}
                >
                  <div className="flex items-start justify-between h-full">
                    <div className="flex items-start space-x-1 flex-1 min-w-0">
                      <Checkbox 
                        checked={activity.completed}
                        className="w-3 h-3 rounded-sm mt-1 flex-shrink-0"
                      />
                      <div className="flex flex-col space-y-1 min-w-0 flex-1">
                        <span className="font-medium text-xs truncate">{activity.name}</span>
                        
                        <div className="flex items-center space-x-1 text-xs text-gray-600">
                          <span className="font-medium text-xs">{activity.startTime}-{activity.endTime}</span>
                          <div className="flex items-center">
                            {Array.from({ length: Math.min(activity.importance, 3) }, (_, i) => (
                              <Star key={i} className="w-2 h-2 fill-yellow-400 text-yellow-400" />
                            ))}
                          </div>
                        </div>

                        <div className="flex items-center space-x-1">
                          <span className="text-sm">{activity.emoji}</span>
                          {activity.type === '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ' && activity.needEmoji && (
                            <span className="text-xs">{activity.needEmoji}</span>
                          )}
                          <Badge variant="secondary" className="text-xs px-1 py-0">
                            {activity.type.slice(0, 4)}
                          </Badge>
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex flex-col space-y-1 flex-shrink-0">
                      <Button size="icon" variant="ghost" className="h-4 w-4">
                        <Info className="w-2 h-2" />
                      </Button>
                      <Button size="icon" variant="ghost" className="h-4 w-4">
                        <Edit className="w-2 h-2" />
                      </Button>
                      <Button size="icon" variant="ghost" className="h-4 w-4">
                        <Trash2 className="w-2 h-2 text-red-500" />
                      </Button>
                    </div>
                  </div>
                </div>
              );
            })}

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ */}
            <div
              className="absolute left-0 right-4 h-0.5 bg-red-500 z-10"
              style={{
                top: `${(new Date().getHours() * 60 + new Date().getMinutes())}px`
              }}
            >
              <div className="w-3 h-3 bg-red-500 rounded-full -translate-y-1 -translate-x-1"></div>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default DayView;
