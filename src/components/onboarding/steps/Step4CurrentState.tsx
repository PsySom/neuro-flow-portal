import React from 'react';
import { Label } from '@/components/ui/label';
import { Slider } from '@/components/ui/slider';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Activity } from 'lucide-react';
import { OnboardingData } from '../hooks/useOnboardingState';

interface Step4CurrentStateProps {
  data: OnboardingData;
  updateData: (updates: Partial<OnboardingData>) => void;
  onNext: () => void;
}

const energyLevels = [
  { id: 'very-low', label: '–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π', emoji: 'üò¥' },
  { id: 'low', label: '–ù–∏–∑–∫–∏–π', emoji: 'üòë' },
  { id: 'medium', label: '–°—Ä–µ–¥–Ω–∏–π', emoji: 'üòê' },
  { id: 'high', label: '–í—ã—Å–æ–∫–∏–π', emoji: 'üôÇ' },
  { id: 'very-high', label: '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π', emoji: '‚ö°' }
];

const anxietyLevels = [
  { id: 'very-low', label: '–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è', emoji: 'üòå' },
  { id: 'low', label: '–ù–∏–∑–∫–∞—è', emoji: 'üôÇ' },
  { id: 'medium', label: '–°—Ä–µ–¥–Ω—è—è', emoji: 'üòê' },
  { id: 'high', label: '–í—ã—Å–æ–∫–∞—è', emoji: 'üò∞' },
  { id: 'very-high', label: '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è', emoji: 'üò±' }
];

const stressLevels = [
  { id: 'very-low', label: '–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π', emoji: 'üòä' },
  { id: 'low', label: '–ù–∏–∑–∫–∏–π', emoji: 'üôÇ' },
  { id: 'medium', label: '–°—Ä–µ–¥–Ω–∏–π', emoji: 'üòê' },
  { id: 'high', label: '–í—ã—Å–æ–∫–∏–π', emoji: 'üò´' },
  { id: 'very-high', label: '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π', emoji: 'ü§Ø' }
];

const getMoodEmoji = (value: number) => {
  if (value <= 2) return 'üòî';
  if (value <= 4) return 'üòï';
  if (value <= 6) return 'üòê';
  if (value <= 8) return 'üôÇ';
  return 'üòä';
};

const getMoodLabel = (value: number) => {
  if (value <= 2) return '–ü–ª–æ—Ö–æ–µ';
  if (value <= 4) return '–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ';
  if (value <= 6) return '–°—Ä–µ–¥–Ω–µ–µ';
  if (value <= 8) return '–•–æ—Ä–æ—à–µ–µ';
  return '–û—Ç–ª–∏—á–Ω–æ–µ';
};

const Step4CurrentState: React.FC<Step4CurrentStateProps> = ({
  data,
  updateData
}) => {
  return (
    <div className="space-y-6">
      <div className="space-y-2 text-center">
        <h2 className="text-2xl font-bold">–ö–∞–∫–æ–µ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–π—á–∞—Å?</h2>
        <p className="text-muted-foreground">
          –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–Ω—è—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        </p>
      </div>

      <div className="space-y-8">
        {/* Mood Slider */}
        <div className="space-y-4">
          <div className="text-center space-y-3">
            {/* Large mood emoji without background */}
            <div className="inline-block">
              <span className="text-6xl">{getMoodEmoji(data.mood)}</span>
            </div>
            
            {/* Mood score */}
            <div>
              <p className="text-2xl font-bold text-primary">
                {data.mood}/10
              </p>
              <p className="text-sm text-muted-foreground mt-1">
                {getMoodLabel(data.mood)}
              </p>
            </div>
          </div>

          {/* Slider with 5 emojis */}
          <div className="px-2">
            <Slider
              value={[data.mood]}
              onValueChange={([value]) => updateData({ mood: value })}
              min={0}
              max={10}
              step={1}
              className="py-4"
              aria-label={`–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${data.mood} –∏–∑ 10`}
            />
            
            {/* 5 Emoji scale */}
            <div className="flex justify-between items-center mt-2">
              <div className="flex flex-col items-center gap-1">
                <span className="text-2xl">üòî</span>
                <span className="text-xs text-muted-foreground font-medium">–ü–ª–æ—Ö–æ–µ</span>
              </div>
              <div className="flex flex-col items-center gap-1">
                <span className="text-2xl">üòï</span>
                <span className="text-xs text-muted-foreground font-medium">–ù–∏–∂–µ</span>
              </div>
              <div className="flex flex-col items-center gap-1">
                <span className="text-2xl">üòê</span>
                <span className="text-xs text-muted-foreground font-medium">–°—Ä–µ–¥–Ω–µ</span>
              </div>
              <div className="flex flex-col items-center gap-1">
                <span className="text-2xl">üôÇ</span>
                <span className="text-xs text-muted-foreground font-medium">–•–æ—Ä–æ—à–µ–µ</span>
              </div>
              <div className="flex flex-col items-center gap-1">
                <span className="text-2xl">üòä</span>
                <span className="text-xs text-muted-foreground font-medium">–û—Ç–ª–∏—á–Ω–æ–µ</span>
              </div>
            </div>
          </div>
        </div>

        {/* Energy Level */}
        <div className="space-y-3">
          <div className="text-center">
            <Label className="text-base font-semibold flex items-center justify-center gap-2">
              <Activity className="w-4 h-4 text-primary" />
              –£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏
            </Label>
            <p className="text-xs text-muted-foreground mt-1">
              –ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –±–æ–¥—Ä—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?
            </p>
          </div>
          
          <RadioGroup
            value={data.energy}
            onValueChange={(value) => updateData({ energy: value })}
            className="grid grid-cols-1 gap-2"
          >
            {energyLevels.map((level) => (
              <div 
                key={level.id} 
                className={`
                  flex items-center space-x-3 p-3 rounded-lg border-2 
                  transition-all cursor-pointer
                  ${data.energy === level.id 
                    ? 'border-primary bg-primary/5' 
                    : 'border-border hover:border-primary/50 hover:bg-muted/30'
                  }
                `}
              >
                <RadioGroupItem value={level.id} id={level.id} className="mt-0" />
                <Label 
                  htmlFor={level.id} 
                  className="cursor-pointer font-normal text-sm flex items-center gap-2 flex-1"
                >
                  <span className="text-xl">{level.emoji}</span>
                  <span>{level.label}</span>
                </Label>
              </div>
            ))}
          </RadioGroup>
        </div>

        {/* Anxiety Level */}
        <div className="space-y-3">
          <div className="text-center">
            <Label className="text-base font-semibold">–£—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–≥–∏</Label>
            <p className="text-xs text-muted-foreground mt-1">
              –ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —Ç—Ä–µ–≤–æ–∂–Ω—ã —Å–µ–π—á–∞—Å?
            </p>
          </div>
          
          <RadioGroup
            value={data.anxiety}
            onValueChange={(value) => updateData({ anxiety: value })}
            className="grid grid-cols-1 gap-2"
          >
            {anxietyLevels.map((level) => (
              <div 
                key={level.id} 
                className={`
                  flex items-center space-x-3 p-3 rounded-lg border-2 
                  transition-all cursor-pointer
                  ${data.anxiety === level.id 
                    ? 'border-primary bg-primary/5' 
                    : 'border-border hover:border-primary/50 hover:bg-muted/30'
                  }
                `}
              >
                <RadioGroupItem value={level.id} id={`anxiety-${level.id}`} className="mt-0" />
                <Label 
                  htmlFor={`anxiety-${level.id}`}
                  className="cursor-pointer font-normal text-sm flex items-center gap-2 flex-1"
                >
                  <span className="text-xl">{level.emoji}</span>
                  <span>{level.label}</span>
                </Label>
              </div>
            ))}
          </RadioGroup>
        </div>

        {/* Stress Level */}
        <div className="space-y-3">
          <div className="text-center">
            <Label className="text-base font-semibold">–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞</Label>
            <p className="text-xs text-muted-foreground mt-1">
              –ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –Ω–∞–ø—Ä—è–∂–µ–Ω—ã —Å–µ–π—á–∞—Å?
            </p>
          </div>
          
          <RadioGroup
            value={data.stress}
            onValueChange={(value) => updateData({ stress: value })}
            className="grid grid-cols-1 gap-2"
          >
            {stressLevels.map((level) => (
              <div 
                key={level.id} 
                className={`
                  flex items-center space-x-3 p-3 rounded-lg border-2 
                  transition-all cursor-pointer
                  ${data.stress === level.id 
                    ? 'border-primary bg-primary/5' 
                    : 'border-border hover:border-primary/50 hover:bg-muted/30'
                  }
                `}
              >
                <RadioGroupItem value={level.id} id={`stress-${level.id}`} className="mt-0" />
                <Label 
                  htmlFor={`stress-${level.id}`}
                  className="cursor-pointer font-normal text-sm flex items-center gap-2 flex-1"
                >
                  <span className="text-xl">{level.emoji}</span>
                  <span>{level.label}</span>
                </Label>
              </div>
            ))}
          </RadioGroup>
        </div>
      </div>
    </div>
  );
};

export default Step4CurrentState;
