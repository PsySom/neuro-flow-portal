import React, { useState } from 'react';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { OnboardingData } from '../hooks/useOnboardingState';
import { cn } from '@/lib/utils';

interface Step3GoalsAndChallengesProps {
  data: OnboardingData;
  updateData: (updates: Partial<OnboardingData>) => void;
  onNext: () => void;
  onPrev: () => void;
}

const primaryGoals = [
  { id: 'anxiety-stress', label: '–°–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∏ —Å—Ç—Ä–µ—Å—Å–æ–º' },
  { id: 'mood', label: '–£–ª—É—á—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ' },
  { id: 'procrastination', label: '–ü–æ–±–µ–¥–∏—Ç—å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—é' },
  { id: 'sleep', label: '–ù–∞–ª–∞–¥–∏—Ç—å —Å–æ–Ω' },
  { id: 'productivity', label: '–ü–æ–≤—ã—Å–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' },
  { id: 'mindfulness', label: '–†–∞–∑–≤–∏—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å' },
  { id: 'relationships', label: '–£–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è' },
  { id: 'balance', label: '–ù–∞–π—Ç–∏ –±–∞–ª–∞–Ω—Å –≤ –∂–∏–∑–Ω–∏' },
  { id: 'other', label: '–î—Ä—É–≥–æ–µ' }
];

const challengeAreas = [
  { id: 'anxiety', label: '–¢—Ä–µ–≤–æ–≥–∞ –∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ', icon: 'üò∞', description: '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ' },
  { id: 'stress', label: '–°—Ç—Ä–µ—Å—Å –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', icon: 'üòì', description: '–¢—Ä—É–¥–Ω–æ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å' },
  { id: 'procrastination', label: '–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è', icon: '‚è∞', description: '–û—Ç–∫–ª–∞–¥—ã–≤–∞—é –¥–µ–ª–∞ –Ω–∞ –ø–æ—Ç–æ–º' },
  { id: 'self-esteem', label: '–ù–∏–∑–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞', icon: 'üòî', description: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–µ–±–µ' },
  { id: 'sleep-issues', label: '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º', icon: 'üò¥', description: '–ü–ª–æ—Ö–æ –∑–∞—Å—ã–ø–∞—é –∏–ª–∏ —á–∞—Å—Ç–æ –ø—Ä–æ—Å—ã–ø–∞—é—Å—å' },
  { id: 'low-energy', label: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏', icon: 'üîã', description: '–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å' },
  { id: 'concentration', label: '–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π', icon: 'üéØ', description: '–°–ª–æ–∂–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –∑–∞–¥–∞—á–∞—Ö' },
  { id: 'mood-swings', label: '–ü–µ—Ä–µ–ø–∞–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è', icon: 'üé≠', description: '–†–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è' },
  { id: 'loneliness', label: '–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ', icon: 'üòû', description: '–û—â—É—â–µ–Ω–∏–µ –∏–∑–æ–ª—è—Ü–∏–∏ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏' },
  { id: 'burnout', label: '–í—ã–≥–æ—Ä–∞–Ω–∏–µ', icon: 'üî•', description: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –∏—Å—Ç–æ—â–µ–Ω–∏–µ' },
  { id: 'relationship-issues', label: '–ü—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö', icon: 'üíî', description: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–µ' },
  { id: 'other', label: '–ò–Ω–æ–µ', icon: '‚úèÔ∏è', description: '–î—Ä—É–≥–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏' }
];

const MAX_CHALLENGES = 3;

const Step3GoalsAndChallenges: React.FC<Step3GoalsAndChallengesProps> = ({
  data,
  updateData,
  onNext,
  onPrev
}) => {
  const [otherText, setOtherText] = useState('');

  const handleChallengeToggle = (challengeId: string) => {
    const currentChallenges = data.challenges || [];
    const newChallenges = currentChallenges.includes(challengeId)
      ? currentChallenges.filter(c => c !== challengeId)
      : [...currentChallenges, challengeId];
    
    // Limit to MAX_CHALLENGES
    if (newChallenges.length <= MAX_CHALLENGES) {
      updateData({ challenges: newChallenges });
    }
  };

  const isChallengeDisabled = (challengeId: string) => {
    const currentChallenges = data.challenges || [];
    return !currentChallenges.includes(challengeId) && currentChallenges.length >= MAX_CHALLENGES;
  };

  const handleSkip = () => {
    // Allow skip with empty challenges
    updateData({ challenges: [] });
    onNext();
  };

  return (
    <div className="space-y-6 max-w-3xl mx-auto">
      <div className="space-y-3 text-center">
        <h2 className="text-2xl sm:text-3xl font-bold">–° –∫–∞–∫–∏–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ –≤—ã —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å?</h2>
        <p className="text-sm sm:text-base text-muted-foreground">
          –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ {MAX_CHALLENGES} –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        </p>
      </div>

      <div className="space-y-5">
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
          {challengeAreas.map((challenge) => {
            const isSelected = (data.challenges || []).includes(challenge.id);
            const isDisabled = isChallengeDisabled(challenge.id);

            return (
              <button
                key={challenge.id}
                type="button"
                onClick={() => !isDisabled && handleChallengeToggle(challenge.id)}
                disabled={isDisabled}
                className={cn(
                  "flex items-start space-x-3 p-4 rounded-xl border-2 transition-all text-left",
                  "hover:scale-[1.02] active:scale-[0.98]",
                  isSelected
                    ? "border-primary bg-primary/10 shadow-md"
                    : "border-border hover:border-primary/50 hover:bg-accent/50",
                  isDisabled && "opacity-50 cursor-not-allowed hover:scale-100"
                )}
              >
                <span className="text-3xl flex-shrink-0">{challenge.icon}</span>
                <div className="flex-1 min-w-0">
                  <p className="font-semibold mb-1">{challenge.label}</p>
                  <p className="text-xs text-muted-foreground leading-snug">
                    {challenge.description}
                  </p>
                </div>
              </button>
            );
          })}
        </div>

        {/* Other input */}
        {(data.challenges || []).includes('other') && (
          <div className="space-y-2">
            <Input
              placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ç—Ä—É–¥–Ω–æ—Å—Ç—å..."
              value={otherText}
              onChange={(e) => setOtherText(e.target.value)}
              className="w-full"
              aria-label="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ç—Ä—É–¥–Ω–æ—Å—Ç—å"
            />
          </div>
        )}

        {/* Selection counter */}
        {(data.challenges || []).length > 0 && (
          <div className="text-center p-3 bg-primary/5 rounded-xl border border-primary/20">
            <p className="text-sm font-medium">
              –í—ã–±—Ä–∞–Ω–æ: {(data.challenges || []).length} –∏–∑ {MAX_CHALLENGES}
            </p>
          </div>
        )}

        {/* Navigation buttons */}
        <div className="flex justify-between items-center gap-4 pt-4">
          <Button
            type="button"
            variant="outline"
            onClick={onPrev}
          >
            –ù–∞–∑–∞–¥
          </Button>
          
          <Button
            type="button"
            variant="ghost"
            onClick={handleSkip}
            className="text-muted-foreground"
          >
            –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
          </Button>
          
          <Button
            onClick={onNext}
            disabled={(data.challenges || []).length < 1 || (data.challenges || []).length > MAX_CHALLENGES}
            className="flex-1 max-w-xs"
          >
            –î–∞–ª–µ–µ
          </Button>
        </div>
      </div>
    </div>
  );
};

export default Step3GoalsAndChallenges;
