import React, { useState } from 'react';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Checkbox } from '@/components/ui/checkbox';
import { Input } from '@/components/ui/input';
import { Separator } from '@/components/ui/separator';
import { Target, Search } from 'lucide-react';
import { OnboardingData } from '../hooks/useOnboardingState';

interface Step3GoalsAndChallengesProps {
  data: OnboardingData;
  updateData: (updates: Partial<OnboardingData>) => void;
  onNext: () => void;
}

const primaryGoals = [
  { id: 'anxiety-stress', label: '–°–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∏ —Å—Ç—Ä–µ—Å—Å–æ–º' },
  { id: 'mood', label: '–£–ª—É—á—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ' },
  { id: 'procrastination', label: '–ü–æ–±–µ–¥–∏—Ç—å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—é' },
  { id: 'sleep', label: '–ù–∞–ª–∞–¥–∏—Ç—å —Å–æ–Ω' },
  { id: 'productivity', label: '–ü–æ–≤—ã—Å–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' },
  { id: 'mindfulness', label: '–†–∞–∑–≤–∏—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å' },
  { id: 'relationships', label: '–£–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è' },
  { id: 'balance', label: '–ù–∞–π—Ç–∏ –±–∞–ª–∞–Ω—Å –≤ –∂–∏–∑–Ω–∏' },
  { id: 'other', label: '–î—Ä—É–≥–æ–µ' }
];

const challengeAreas = [
  { id: 'anxiety', label: '–¢—Ä–µ–≤–æ–≥–∞ –∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ' },
  { id: 'stress', label: '–°—Ç—Ä–µ—Å—Å –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ' },
  { id: 'procrastination', label: '–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è' },
  { id: 'self-esteem', label: '–ù–∏–∑–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞' },
  { id: 'sleep-issues', label: '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º' },
  { id: 'low-energy', label: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏' },
  { id: 'concentration', label: '–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π' },
  { id: 'mood-swings', label: '–ü–µ—Ä–µ–ø–∞–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è' },
  { id: 'loneliness', label: '–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ' },
  { id: 'burnout', label: '–í—ã–≥–æ—Ä–∞–Ω–∏–µ' },
  { id: 'relationship-issues', label: '–ü—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö' }
];

const MAX_CHALLENGES = 3;

const Step3GoalsAndChallenges: React.FC<Step3GoalsAndChallengesProps> = ({
  data,
  updateData
}) => {
  const [otherGoalText, setOtherGoalText] = useState('');
  const showOtherInput = data.primaryGoal === 'other';

  const handleChallengeToggle = (challengeId: string) => {
    const newChallenges = data.challenges.includes(challengeId)
      ? data.challenges.filter(c => c !== challengeId)
      : [...data.challenges, challengeId];
    
    // Limit to MAX_CHALLENGES
    if (newChallenges.length <= MAX_CHALLENGES) {
      updateData({ challenges: newChallenges });
    }
  };

  const isChallengeDisabled = (challengeId: string) => {
    return !data.challenges.includes(challengeId) && data.challenges.length >= MAX_CHALLENGES;
  };

  const handlePrimaryGoalChange = (value: string) => {
    updateData({ primaryGoal: value });
    if (value !== 'other') {
      setOtherGoalText('');
    }
  };

  return (
    <div className="space-y-6">
      <div className="space-y-2 text-center">
        <h2 className="text-2xl font-bold">–í–∞—à–∏ —Ü–µ–ª–∏</h2>
        <p className="text-muted-foreground">
          –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ
        </p>
      </div>

      <div className="space-y-6">
        {/* Block 1: Primary Goal */}
        <div className="space-y-4">
          <div className="flex items-center gap-2">
            <Target className="w-5 h-5 text-primary" />
            <Label className="text-base font-semibold">
              üéØ –ß—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –≤–∞—Å –≤ Mental Balance?
            </Label>
          </div>
          
          <RadioGroup
            value={data.primaryGoal}
            onValueChange={handlePrimaryGoalChange}
          >
            {primaryGoals.map((goal) => (
              <div key={goal.id} className="flex items-center space-x-2">
                <RadioGroupItem value={goal.id} id={`goal-${goal.id}`} />
                <Label 
                  htmlFor={`goal-${goal.id}`} 
                  className="cursor-pointer font-normal leading-tight"
                >
                  {goal.label}
                </Label>
              </div>
            ))}
          </RadioGroup>

          {showOtherInput && (
            <Input
              placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å..."
              value={otherGoalText}
              onChange={(e) => setOtherGoalText(e.target.value)}
              className="mt-2"
            />
          )}
        </div>

        {/* Divider */}
        <Separator className="my-6" />

        {/* Block 2: Challenge Areas */}
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Search className="w-5 h-5 text-primary" />
              <Label className="text-base font-semibold">
                üîç –ò 2-3 –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã:
              </Label>
            </div>
            <span className="text-sm text-muted-foreground">
              –í—ã–±—Ä–∞–Ω–æ: {data.challenges.length}/{MAX_CHALLENGES}
            </span>
          </div>

          <div className="space-y-3">
            {challengeAreas.map((area) => {
              const isDisabled = isChallengeDisabled(area.id);
              const isChecked = data.challenges.includes(area.id);
              
              return (
                <div 
                  key={area.id} 
                  className={`flex items-center space-x-2 ${isDisabled ? 'opacity-50' : ''}`}
                >
                  <Checkbox
                    id={`challenge-${area.id}`}
                    checked={isChecked}
                    onCheckedChange={() => handleChallengeToggle(area.id)}
                    disabled={isDisabled}
                  />
                  <Label
                    htmlFor={`challenge-${area.id}`}
                    className={`cursor-pointer font-normal leading-tight ${
                      isDisabled ? 'cursor-not-allowed' : ''
                    }`}
                  >
                    {area.label}
                  </Label>
                </div>
              );
            })}
          </div>

          {data.challenges.length >= MAX_CHALLENGES && (
            <p className="text-sm text-muted-foreground">
              –ú–∞–∫—Å–∏–º—É–º {MAX_CHALLENGES} –æ–±–ª–∞—Å—Ç–∏. –°–Ω–∏–º–∏—Ç–µ –≤—ã–±–æ—Ä, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é.
            </p>
          )}
        </div>
      </div>
    </div>
  );
};

export default Step3GoalsAndChallenges;
