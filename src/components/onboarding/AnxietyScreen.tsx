import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Card, CardContent } from '@/components/ui/card';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';

interface AnxietyScreenProps {
  onNext: (data: any) => void;
  onBack: () => void;
}

const AnxietyScreen: React.FC<AnxietyScreenProps> = ({ onNext, onBack }) => {
  const [anxietyFrequency, setAnxietyFrequency] = useState('');
  const [anxietyTriggers, setAnxietyTriggers] = useState<string[]>([]);
  const [anxietySymptoms, setAnxietySymptoms] = useState<string[]>([]);
  const [copingStrategies, setCopingStrategies] = useState<string[]>([]);

  const triggerOptions = [
    { id: 'morning', title: '–£—Ç—Ä–æ–º, –¥—É–º–∞—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –¥–Ω–µ', emoji: 'üåÖ' },
    { id: 'meetings', title: '–ü–µ—Ä–µ–¥ –≤–∞–∂–Ω—ã–º–∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏ –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è–º–∏', emoji: 'üíº' },
    { id: 'evening', title: '–í–µ—á–µ—Ä–æ–º, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –ø—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å', emoji: 'üåô' },
    { id: 'messages', title: '–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –∑–≤–æ–Ω–∫–æ–≤', emoji: 'üì±' },
    { id: 'new-situations', title: '–í –Ω–æ–≤—ã—Ö –∏–ª–∏ –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö', emoji: 'üö™' },
    { id: 'social', title: '–í —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö', emoji: 'üë•' },
    { id: 'decisions', title: '–ü—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π', emoji: 'üéØ' },
    { id: 'future', title: '–î—É–º–∞—è –æ –±—É–¥—É—â–µ–º', emoji: 'üîÆ' }
  ];

  const symptomOptions = [
    { id: 'thoughts', title: '–ù–∞–≤—è–∑—á–∏–≤—ã–µ –º—ã—Å–ª–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è', emoji: 'üß†' },
    { id: 'physical', title: '–§–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã (—Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ)', emoji: 'üíì' },
    { id: 'sleep', title: '–ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞—Å—ã–ø–∞–Ω–∏–µ–º', emoji: 'üò¥' },
    { id: 'checking', title: '–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞', emoji: 'üîÑ' },
    { id: 'avoidance', title: '–ò–∑–±–µ–≥–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π', emoji: 'üì±' },
    { id: 'procrastination', title: '–û—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª', emoji: 'üö´' },
    { id: 'catastrophizing', title: '–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤ –≥–æ–ª–æ–≤–µ', emoji: 'üò∞' },
    { id: 'decisions', title: '–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏–π', emoji: 'ü§ê' }
  ];

  const copingOptions = [
    { id: 'breathing', title: '–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è', emoji: 'üå¨Ô∏è', healthy: true },
    { id: 'exercise', title: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', emoji: 'üö∂', healthy: true },
    { id: 'meditation', title: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏–ª–∏ mindfulness', emoji: 'üßò', healthy: true },
    { id: 'talking', title: '–†–∞–∑–≥–æ–≤–æ—Ä —Å –±–ª–∏–∑–∫–∏–º–∏', emoji: 'ü§ù', healthy: true },
    { id: 'writing', title: '–ó–∞–ø–∏—Å—ã–≤–∞–Ω–∏–µ –º—ã—Å–ª–µ–π', emoji: '‚úçÔ∏è', healthy: true },
    { id: 'music', title: '–ú—É–∑—ã–∫–∞ –∏–ª–∏ –ø–æ–¥–∫–∞—Å—Ç—ã', emoji: 'üéµ', healthy: true },
    { id: 'nature', title: '–í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ', emoji: 'üå≥', healthy: true },
    { id: 'reading', title: '–ß—Ç–µ–Ω–∏–µ –∏–ª–∏ –∏–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', emoji: 'üìö', healthy: true },
    { id: 'alcohol', title: '–ê–ª–∫–æ–≥–æ–ª—å', emoji: 'üç∑', healthy: false },
    { id: 'eating', title: '–ó–∞–µ–¥–∞–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞ —Å–ª–∞–¥–∫–∏–º', emoji: 'üç´', healthy: false },
    { id: 'shopping', title: '–ò–º–ø—É–ª—å—Å–∏–≤–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏', emoji: 'üõí', healthy: false },
    { id: 'phone', title: '–û—Ç–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω', emoji: 'üì±', healthy: false },
    { id: 'games', title: '–í–∏–¥–µ–æ–∏–≥—Ä—ã', emoji: 'üéÆ', healthy: false },
    { id: 'tv', title: '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ/—Å–µ—Ä–∏–∞–ª–æ–≤', emoji: 'üì∫', healthy: false },
    { id: 'smoking', title: '–ö—É—Ä–µ–Ω–∏–µ', emoji: 'üö¨', healthy: false },
    { id: 'avoidance', title: '–ò–∑–±–µ–≥–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–π', emoji: 'üôà', healthy: false },
    { id: 'medication', title: '–£—Å–ø–æ–∫–æ–∏—Ç–µ–ª—å–Ω—ã–µ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–∞—á–∞', emoji: 'üíä', healthy: false }
  ];

  const toggleSelection = (item: string, setter: React.Dispatch<React.SetStateAction<string[]>>, maxCount?: number) => {
    setter(prev => {
      if (prev.includes(item)) {
        return prev.filter(id => id !== item);
      } else if (!maxCount || prev.length < maxCount) {
        return [...prev, item];
      }
      return prev;
    });
  };

  const handleSubmit = () => {
    onNext({
      anxietyFrequency,
      anxietyTriggers,
      anxietySymptoms,
      copingStrategies
    });
  };

  return (
    <div className="p-8">
      <div className="mb-6">
        <Progress value={62.5} className="mb-4" />
        <p className="text-sm text-gray-500">10 –∏–∑ 16 —à–∞–≥–æ–≤</p>
      </div>
      
      <h2 className="text-2xl font-bold text-gray-900 mb-2">
        –¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ
      </h2>
      <p className="text-gray-600 mb-6">
        –ü–æ–Ω–∏–º–∞–Ω–∏–µ –≤–∞—à–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      </p>
      
      <div className="space-y-8">
        <div>
          <Label className="text-sm font-medium text-gray-700 mb-4 block">
            –ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ —Ç—Ä–µ–≤–æ–≥—É?
          </Label>
          <RadioGroup value={anxietyFrequency} onValueChange={setAnxietyFrequency}>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="never" id="anxiety-never" />
              <Label htmlFor="anxiety-never">–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∫–æ–≥–¥–∞</Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="sometimes" id="anxiety-sometimes" />
              <Label htmlFor="anxiety-sometimes">–ò–Ω–æ–≥–¥–∞ –≤ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö</Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="often" id="anxiety-often" />
              <Label htmlFor="anxiety-often">–ß–∞—Å—Ç–æ –±–µ—Å–ø–æ–∫–æ—é—Å—å –∏ —Ç—Ä–µ–≤–æ–∂—É—Å—å</Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="constantly" id="anxiety-constantly" />
              <Label htmlFor="anxiety-constantly">–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –Ω–∞—Ö–æ–∂—É—Å—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç—Ä–µ–≤–æ–≥–∏</Label>
            </div>
          </RadioGroup>
        </div>

        <div>
          <Label className="text-sm font-medium text-gray-700 mb-4 block">
            –ö–æ–≥–¥–∞ –≤—ã —á–∞—â–µ –≤—Å–µ–≥–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Ç—Ä–µ–≤–æ–≥—É? (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
          </Label>
          <div className="grid grid-cols-1 gap-2">
            {triggerOptions.map((trigger) => (
              <div key={trigger.id} className="flex items-center space-x-2">
                <Checkbox
                  id={trigger.id}
                  checked={anxietyTriggers.includes(trigger.id)}
                  onCheckedChange={() => toggleSelection(trigger.id, setAnxietyTriggers)}
                />
                <Label htmlFor={trigger.id} className="flex items-center space-x-2">
                  <span>{trigger.emoji}</span>
                  <span>{trigger.title}</span>
                </Label>
              </div>
            ))}
          </div>
        </div>

        <div>
          <Label className="text-sm font-medium text-gray-700 mb-4 block">
            –ö–∞–∫ –æ–±—ã—á–Ω–æ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∞ —Ç—Ä–µ–≤–æ–≥–∞? (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
          </Label>
          <div className="grid grid-cols-1 gap-2">
            {symptomOptions.map((symptom) => (
              <div key={symptom.id} className="flex items-center space-x-2">
                <Checkbox
                  id={symptom.id}
                  checked={anxietySymptoms.includes(symptom.id)}
                  onCheckedChange={() => toggleSelection(symptom.id, setAnxietySymptoms)}
                />
                <Label htmlFor={symptom.id} className="flex items-center space-x-2">
                  <span>{symptom.emoji}</span>
                  <span>{symptom.title}</span>
                </Label>
              </div>
            ))}
          </div>
        </div>

        <div>
          <Label className="text-sm font-medium text-gray-700 mb-4 block">
            –ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–æ–π? (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
          </Label>
          <div className="space-y-4">
            <div>
              <h4 className="text-sm font-medium text-green-700 mb-2">–ó–¥–æ—Ä–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</h4>
              <div className="grid grid-cols-1 gap-2">
                {copingOptions.filter(option => option.healthy).map((strategy) => (
                  <div key={strategy.id} className="flex items-center space-x-2">
                    <Checkbox
                      id={strategy.id}
                      checked={copingStrategies.includes(strategy.id)}
                      onCheckedChange={() => toggleSelection(strategy.id, setCopingStrategies)}
                    />
                    <Label htmlFor={strategy.id} className="flex items-center space-x-2">
                      <span>{strategy.emoji}</span>
                      <span>{strategy.title}</span>
                    </Label>
                  </div>
                ))}
              </div>
            </div>
            
            <div>
              <h4 className="text-sm font-medium text-orange-700 mb-2">–î–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</h4>
              <div className="grid grid-cols-1 gap-2">
                {copingOptions.filter(option => !option.healthy).map((strategy) => (
                  <div key={strategy.id} className="flex items-center space-x-2">
                    <Checkbox
                      id={strategy.id}
                      checked={copingStrategies.includes(strategy.id)}
                      onCheckedChange={() => toggleSelection(strategy.id, setCopingStrategies)}
                    />
                    <Label htmlFor={strategy.id} className="flex items-center space-x-2">
                      <span>{strategy.emoji}</span>
                      <span>{strategy.title}</span>
                    </Label>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="flex space-x-4 mt-8">
        <Button variant="outline" onClick={onBack} className="flex-1">
          –ù–∞–∑–∞–¥
        </Button>
        <Button 
          onClick={handleSubmit}
          className="flex-1 bg-gradient-to-r from-emerald-500 to-teal-500"
          disabled={!anxietyFrequency}
        >
          –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        </Button>
      </div>
    </div>
  );
};

export default AnxietyScreen;