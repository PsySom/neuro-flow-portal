
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';

interface ChallengesScreenProps {
  onNext: (data: any) => void;
  onBack: () => void;
}

const ChallengesScreen: React.FC<ChallengesScreenProps> = ({ onNext, onBack }) => {
  const [selectedChallenges, setSelectedChallenges] = useState<string[]>([]);
  const [otherChallenge, setOtherChallenge] = useState('');

  const challenges = [
    { id: 'anxiety', title: '–¢—Ä–µ–≤–æ–≥–∞ –∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ', emoji: 'üß†', color: 'bg-blue-100 border-blue-200' },
    { id: 'stress', title: '–°—Ç—Ä–µ—Å—Å –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', emoji: '‚ö°', color: 'bg-red-100 border-red-200' },
    { id: 'procrastination', title: '–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è –∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –¥–µ–ª', emoji: '‚è∞', color: 'bg-orange-100 border-orange-200' },
    { id: 'self-esteem', title: '–ù–∏–∑–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞', emoji: 'üíô', color: 'bg-purple-100 border-purple-200' },
    { id: 'sleep', title: '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º', emoji: 'üò¥', color: 'bg-indigo-100 border-indigo-200' },
    { id: 'energy', title: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏', emoji: 'üîã', color: 'bg-green-100 border-green-200' },
    { id: 'focus', title: '–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π', emoji: 'üéØ', color: 'bg-yellow-100 border-yellow-200' },
    { id: 'mood', title: '–ü–µ—Ä–µ–ø–∞–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è', emoji: 'üåà', color: 'bg-pink-100 border-pink-200' },
    { id: 'loneliness', title: '–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ', emoji: 'ü§ù', color: 'bg-teal-100 border-teal-200' },
    { id: 'burnout', title: '–í—ã–≥–æ—Ä–∞–Ω–∏–µ', emoji: 'üî•', color: 'bg-red-100 border-red-200' },
    { id: 'relationships', title: '–ü—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö', emoji: '‚ù§Ô∏è', color: 'bg-rose-100 border-rose-200' }
  ];

  const toggleChallenge = (challengeId: string) => {
    setSelectedChallenges(prev => {
      if (prev.includes(challengeId)) {
        return prev.filter(id => id !== challengeId);
      } else if (prev.length < 5) {
        return [...prev, challengeId];
      }
      return prev;
    });
  };

  const handleSubmit = () => {
    const challengesData = {
      challenges: selectedChallenges,
      otherChallenge: otherChallenge.trim()
    };
    onNext(challengesData);
  };

  return (
    <div className="p-8">
      <div className="mb-6">
        <Progress value={62.5} className="mb-4" />
        <p className="text-sm text-gray-500">5 –∏–∑ 8 —à–∞–≥–æ–≤</p>
      </div>
      
      <h2 className="text-2xl font-bold text-gray-900 mb-2">
        –° –∫–∞–∫–∏–º–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—è–º–∏ –≤—ã —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å?
      </h2>
      <p className="text-gray-600 mb-6">
        –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç –≤–∞—Å —á–∞—â–µ –≤—Å–µ–≥–æ (–¥–æ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
      </p>
      
      <div className="grid grid-cols-2 gap-3 mb-6">
        {challenges.map((challenge) => (
          <Card
            key={challenge.id}
            className={`cursor-pointer transition-all ${challenge.color} ${
              selectedChallenges.includes(challenge.id) ? 'ring-2 ring-emerald-500' : ''
            }`}
            onClick={() => toggleChallenge(challenge.id)}
          >
            <CardContent className="p-4">
              <div className="flex items-center space-x-3">
                <span className="text-lg">{challenge.emoji}</span>
                <span className="text-sm font-medium text-gray-900">{challenge.title}</span>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      <div className="mb-6">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          –î—Ä—É–≥–æ–µ (–æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏)
        </label>
        <Input
          placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç..."
          value={otherChallenge}
          onChange={(e) => setOtherChallenge(e.target.value)}
        />
      </div>

      <p className="text-sm text-gray-500 mb-6">
        –í—ã–±—Ä–∞–Ω–æ: {selectedChallenges.length} –∏–∑ 5
      </p>

      <div className="flex space-x-4">
        <Button variant="outline" onClick={onBack} className="flex-1">
          –ù–∞–∑–∞–¥
        </Button>
        <Button 
          onClick={handleSubmit}
          className="flex-1 bg-gradient-to-r from-emerald-500 to-teal-500"
          disabled={selectedChallenges.length === 0 && !otherChallenge.trim()}
        >
          –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        </Button>
      </div>
    </div>
  );
};

export default ChallengesScreen;
