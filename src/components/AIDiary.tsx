
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Sparkles, MessageCircle, Heart, Coffee, Zap } from 'lucide-react';

const AIDiary = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [responses, setResponses] = useState({});

  const questions = [
    {
      text: "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ ü§ñ –ö–∞–∫ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
      options: [
        { emoji: "üòä", label: "–û—Ç–ª–∏—á–Ω–æ", value: "great" },
        { emoji: "üòå", label: "–•–æ—Ä–æ—à–æ", value: "good" },
        { emoji: "üòê", label: "–ù–æ—Ä–º–∞–ª—å–Ω–æ", value: "okay" },
        { emoji: "üòî", label: "–ù–µ –æ—á–µ–Ω—å", value: "low" },
        { emoji: "üò§", label: "–°—Ç—Ä–µ—Å—Å", value: "stressed" }
      ]
    },
    {
      text: "–ü–æ–Ω—è—Ç–Ω–æ! –ê –∫–∞–∫–æ–π —É –≤–∞—Å —Å–µ–π—á–∞—Å —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏?",
      options: [
        { emoji: "‚ö°", label: "–ü–æ–ª–æ–Ω —Å–∏–ª", value: "high" },
        { emoji: "üîã", label: "–ó–∞—Ä—è–∂–µ–Ω", value: "good" },
        { emoji: "üîÑ", label: "–°—Ä–µ–¥–Ω–µ", value: "medium" },
        { emoji: "ü™´", label: "–£—Å—Ç–∞–ª", value: "low" },
        { emoji: "üò¥", label: "–í—ã–∂–∞—Ç", value: "exhausted" }
      ]
    },
    {
      text: "–°–ø–∞—Å–∏–±–æ! –ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≥–ª–∞–≤–Ω–æ–µ –≤ –≤–∞—à–∏—Ö –ø–ª–∞–Ω–∞—Ö?",
      options: [
        { emoji: "üéØ", label: "–†–∞–±–æ—Ç–∞—Ç—å", value: "work" },
        { emoji: "üßò", label: "–û—Ç–¥—ã—Ö–∞—Ç—å", value: "rest" },
        { emoji: "üìö", label: "–£—á–∏—Ç—å—Å—è", value: "learn" },
        { emoji: "üë•", label: "–û–±—â–∞—Ç—å—Å—è", value: "social" },
        { emoji: "üå±", label: "–†–∞–∑–≤–∏–≤–∞—Ç—å—Å—è", value: "grow" }
      ]
    }
  ];

  const handleResponse = (value) => {
    const newResponses = { ...responses, [currentStep]: value };
    setResponses(newResponses);
    
    if (currentStep < questions.length - 1) {
      setTimeout(() => setCurrentStep(currentStep + 1), 500);
    }
  };

  const isCompleted = currentStep === questions.length - 1 && responses[currentStep];

  return (
    <section className="animate-fade-in">
      <div className="text-center mb-12">
        <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
          –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–¥–Ω–µ–≤–Ω–∏–∫
        </h2>
        <p className="text-lg text-gray-600 max-w-2xl mx-auto">
          –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–Ω–∏–º–∞–µ—Ç –≤–∞—à–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –≤–∞—à —Ä–∏—Ç–º –∂–∏–∑–Ω–∏
        </p>
      </div>

      <div className="max-w-2xl mx-auto">
        <Card className="bg-white/70 backdrop-blur-lg border-0 shadow-xl hover:shadow-2xl transition-all duration-500">
          <CardHeader className="text-center pb-6">
            <div className="w-16 h-16 bg-gradient-to-br from-emerald-400 to-teal-500 rounded-full flex items-center justify-center mx-auto mb-4 animate-pulse">
              <Sparkles className="w-8 h-8 text-white" />
            </div>
            <CardTitle className="text-2xl text-gray-900">
              AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç
            </CardTitle>
          </CardHeader>

          <CardContent className="space-y-8">
            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
            <div className="flex items-center justify-center space-x-2 mb-8">
              {questions.map((_, index) => (
                <div
                  key={index}
                  className={`w-3 h-3 rounded-full transition-all duration-300 ${
                    index <= currentStep
                      ? 'bg-gradient-to-r from-emerald-400 to-teal-500'
                      : 'bg-gray-200'
                  }`}
                />
              ))}
            </div>

            {/* –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å */}
            {currentStep < questions.length && (
              <div className="space-y-6 animate-fade-in">
                <div className="flex items-start space-x-4">
                  <MessageCircle className="w-6 h-6 text-emerald-500 mt-1 flex-shrink-0" />
                  <p className="text-lg text-gray-800 font-medium">
                    {questions[currentStep].text}
                  </p>
                </div>

                <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
                  {questions[currentStep].options.map((option, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      className="h-auto p-4 flex flex-col items-center space-y-2 hover:bg-emerald-50 hover:border-emerald-300 transition-all duration-200 hover:scale-105"
                      onClick={() => handleResponse(option.value)}
                    >
                      <span className="text-2xl">{option.emoji}</span>
                      <span className="text-sm font-medium text-gray-700">
                        {option.label}
                      </span>
                    </Button>
                  ))}
                </div>
              </div>
            )}

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
            {isCompleted && (
              <div className="text-center space-y-6 animate-scale-in">
                <div className="w-20 h-20 bg-gradient-to-br from-emerald-400 to-teal-500 rounded-full flex items-center justify-center mx-auto">
                  <Heart className="w-10 h-10 text-white" />
                </div>
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 mb-3">
                    –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å! üíö
                  </h3>
                  <p className="text-gray-600 mb-6">
                    –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö, —è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
                    –í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É.
                  </p>
                  <div className="flex flex-col sm:flex-row gap-3 justify-center">
                    <Button className="bg-gradient-to-r from-emerald-500 to-teal-500 hover:from-emerald-600 hover:to-teal-600">
                      –í–æ–π—Ç–∏ / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                    </Button>
                    <Button variant="outline" onClick={() => {
                      setCurrentStep(0);
                      setResponses({});
                    }}>
                      –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑
                    </Button>
                  </div>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </section>
  );
};

export default AIDiary;
