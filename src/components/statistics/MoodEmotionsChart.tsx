
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, ReferenceLine } from 'recharts';
import { getMoodEmoji } from '../diaries/moodDiaryUtils';
import { ChartDataPoint, TimeRange } from './chart-utils/chartDataConverters';
import { chartDataService } from './chart-utils/chartDataService';
import { CustomTooltip, CustomDot, getLineWidth } from './chart-utils/chartComponents';
import { useBackendAuth } from '@/contexts/BackendAuthContext';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ mock —Ä–µ–∂–∏–º
const USE_MOCK = true; // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤ backend-diary.service.ts

const MoodEmotionsChart = () => {
  const { isAuthenticated } = useBackendAuth();
  const [timeRange, setTimeRange] = useState<TimeRange>('week');
  const [selectedPoint, setSelectedPoint] = useState<ChartDataPoint | null>(null);
  const [chartData, setChartData] = useState<ChartDataPoint[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é —Å–µ—Ä–≤–∏—Å–∞
  const fetchMoodData = async (range: TimeRange) => {
    setIsLoading(true);
    try {
      const data = await chartDataService.fetchMoodData(range, isAuthenticated);
      setChartData(data);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:', error);
      setChartData([]);
    } finally {
      setIsLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  useEffect(() => {
    fetchMoodData(timeRange);
  }, [timeRange, isAuthenticated]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const interval = setInterval(() => {
      fetchMoodData(timeRange);
    }, 60000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –æ–∫–Ω–∞
    const handleFocus = () => {
      fetchMoodData(timeRange);
    };

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const handleStorageChange = (e: StorageEvent) => {
      console.log('üìä Storage event triggered:', e.key, e.newValue?.slice(0, 100));
      if (e.key === 'mock_mood_entries' || e.key?.includes('diary-status')) {
        console.log('üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ localStorage, –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫');
        setTimeout(() => fetchMoodData(timeRange), 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
      }
    };

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    const handleCustomUpdate = () => {
      console.log('üìä Custom update event triggered');
      fetchMoodData(timeRange);
    };

    window.addEventListener('focus', handleFocus);
    window.addEventListener('storage', handleStorageChange);
    window.addEventListener('mood-data-updated', handleCustomUpdate);

    return () => {
      clearInterval(interval);
      window.removeEventListener('focus', handleFocus);
      window.removeEventListener('storage', handleStorageChange);
      window.removeEventListener('mood-data-updated', handleCustomUpdate);
    };
  }, [timeRange, isAuthenticated]);

  const currentData = chartData;

  return (
    <div className="space-y-6">
      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è mock –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω */}
      {!USE_MOCK && !isAuthenticated && (
        <Card className="border-amber-200 bg-amber-50 dark:border-amber-800 dark:bg-amber-950/50">
          <CardContent className="pt-6">
            <p className="text-amber-800 dark:text-amber-200 text-sm">
              üìä –°–µ–π—á–∞—Å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. 
              <strong> –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç</strong>, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.
            </p>
          </CardContent>
        </Card>
      )}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>–ì—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —ç–º–æ—Ü–∏–π</span>
            <div className="flex space-x-2">
              <Button
                variant={timeRange === 'day' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setTimeRange('day')}
              >
                –î–µ–Ω—å
              </Button>
              <Button
                variant={timeRange === 'week' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setTimeRange('week')}
              >
                –ù–µ–¥–µ–ª—è
              </Button>
              <Button
                variant={timeRange === 'month' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setTimeRange('month')}
              >
                –ú–µ—Å—è—Ü
              </Button>
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="h-96 flex items-center justify-center">
              <p className="text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è...</p>
            </div>
          ) : currentData.length === 0 ? (
            <div className="h-96 flex flex-col items-center justify-center">
              <p className="text-muted-foreground text-lg mb-2">üìä –ì—Ä–∞—Ñ–∏–∫ –ø—É—Å—Ç</p>
              <p className="text-muted-foreground text-sm text-center max-w-md">
                –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. 
                –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ.
              </p>
            </div>
          ) : (
            <div className="h-96">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={currentData} margin={{ top: 40, right: 30, left: 20, bottom: 5 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis 
                    dataKey="time" 
                    tick={{ fontSize: 12 }}
                    angle={timeRange === 'week' ? -45 : 0}
                    textAnchor={timeRange === 'week' ? 'end' : 'middle'}
                    height={timeRange === 'week' ? 60 : 30}
                  />
                  <YAxis 
                    domain={[-5, 5]} 
                    ticks={[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]}
                    tick={{ fontSize: 12 }}
                  />
                  <ReferenceLine y={0} stroke="#666" strokeDasharray="2 2" />
                  <Tooltip content={<CustomTooltip />} />
                  <Line 
                    type="monotone" 
                    dataKey="mood" 
                    stroke="#3b82f6" 
                    strokeWidth={getLineWidth(timeRange)}
                    dot={<CustomDot 
                      timeRange={timeRange} 
                      onPointClick={setSelectedPoint}
                      cx={0} cy={0} payload={{} as ChartDataPoint} index={0}
                    />}
                    connectNulls={false}
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
          )}
        </CardContent>
      </Card>

      {/* –ü–∞–Ω–µ–ª—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π */}
      <Card>
        <CardHeader>
          <CardTitle>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ç–æ—á–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è</CardTitle>
        </CardHeader>
        <CardContent>
          {selectedPoint ? (
            <div className="space-y-6">
              <div className="mb-4 p-3 bg-muted/50 rounded-lg">
                <p className="text-sm text-muted-foreground">
                  –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {selectedPoint.fullDate}
                </p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div>
                    <h4 className="font-medium text-foreground mb-2 flex items-center">
                      <span className="text-2xl mr-2">{getMoodEmoji(selectedPoint.mood)}</span>
                      –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {selectedPoint.mood}
                    </h4>
                  </div>
                  
                  <div>
                    <h4 className="font-medium text-foreground mb-2">–≠–º–æ—Ü–∏–∏</h4>
                    <p className="text-muted-foreground">
                      {selectedPoint.emotions && selectedPoint.emotions.length > 0 
                        ? selectedPoint.emotions.join(', ') 
                        : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                    </p>
                  </div>

                  <div>
                    <h4 className="font-medium text-foreground mb-2">–ö–æ–Ω—Ç–µ–∫—Å—Ç</h4>
                    <p className="text-muted-foreground">
                      {selectedPoint.connection || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                    </p>
                  </div>
                </div>

                <div className="space-y-4">
                   <div>
                     <h4 className="font-medium text-foreground mb-2">–ó–∞–º–µ—Ç–∫–∏</h4>
                     <p className="text-muted-foreground">
                       {selectedPoint.notes || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                     </p>
                   </div>

                   <div>
                     <h4 className="font-medium text-foreground mb-2">–¢—Ä–∏–≥–≥–µ—Ä—ã</h4>
                     <p className="text-muted-foreground">
                       {selectedPoint.triggers && selectedPoint.triggers.length > 0
                         ? selectedPoint.triggers.join(', ')
                         : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                     </p>
                   </div>

                   <div>
                     <h4 className="font-medium text-foreground mb-2">–§–∏–∑–∏—á–µ—Å–∫–∏–µ –æ—â—É—â–µ–Ω–∏—è</h4>
                     <p className="text-muted-foreground">
                       {selectedPoint.physical_sensations && selectedPoint.physical_sensations.length > 0
                         ? selectedPoint.physical_sensations.join(', ')
                         : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                     </p>
                   </div>
                </div>
              </div>

              <div className="pt-4 border-t">
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => setSelectedPoint(null)}
                >
                  –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä
                </Button>
              </div>
            </div>
          ) : (
            <div className="text-center py-8 text-gray-500 dark:text-gray-400">
              <p className="mb-2">–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ—á–∫—É –≥—Ä–∞—Ñ–∏–∫–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</p>
              <p className="text-sm">–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default MoodEmotionsChart;
