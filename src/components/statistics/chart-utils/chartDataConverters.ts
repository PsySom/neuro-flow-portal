import { format } from 'date-fns';
import { MoodEntry } from '@/services/backend-diary.service';

export interface ChartDataPoint {
  time: string;
  mood: number;
  emotions?: string[];
  context?: string;
  notes?: string;
  triggers?: string[];
  physical_sensations?: string[];
  connection?: string;
  fullDate?: string;
}

export type TimeRange = 'day' | 'week' | 'month';

export const convertMoodEntriesToChartData = (entries: MoodEntry[], range: TimeRange): ChartDataPoint[] => {
  console.log(`üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ${entries.length} –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ${range}`);
  
  if (entries.length === 0) {
    console.log('üìä –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
    return [];
  }

  const chartData: ChartDataPoint[] = [];
  const groupedData = new Map<string, MoodEntry[]>();

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞
  entries.forEach(entry => {
    const entryDate = new Date(entry.timestamp);
    let timeKey: string;

    if (range === 'day') {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Å–∞–º
      timeKey = format(entryDate, 'HH:mm');
    } else if (range === 'week') {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏  
      const dayNames = ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å'];
      const dayIndex = (entryDate.getDay() + 6) % 7; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=0 –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫=0
      const dayName = dayNames[dayIndex];
      const dateStr = format(entryDate, 'dd.MM');
      timeKey = `${dayName}\n${dateStr}`;
    } else {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –º–µ—Å—è—Ü–∞
      timeKey = format(entryDate, 'd');
    }

    if (!groupedData.has(timeKey)) {
      groupedData.set(timeKey, []);
    }
    groupedData.get(timeKey)!.push(entry);
  });

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ—á–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
  groupedData.forEach((entriesGroup, timeKey) => {
    // –£—Å—Ä–µ–¥–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –≤ –æ–¥–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
    const avgMood = entriesGroup.reduce((sum, entry) => sum + entry.mood_score, 0) / entriesGroup.length;
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–º–æ—Ü–∏–∏
    const allEmotions: string[] = [];
    entriesGroup.forEach(entry => {
      entry.emotions?.forEach(emotion => {
        if (!allEmotions.includes(emotion.name)) {
          allEmotions.push(emotion.name);
        }
      });
    });

    // –ë–µ—Ä–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
    const lastEntry = entriesGroup[entriesGroup.length - 1];
    
    chartData.push({
      time: timeKey,
      mood: avgMood,
      emotions: allEmotions,
      context: lastEntry.context,
      notes: lastEntry.notes,
      triggers: lastEntry.triggers,
      physical_sensations: lastEntry.physical_sensations,
      connection: allEmotions.join(', '),
      fullDate: format(new Date(lastEntry.timestamp), 'dd.MM.yyyy HH:mm')
    });
  });

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  if (range === 'day') {
    chartData.sort((a, b) => a.time.localeCompare(b.time));
  } else if (range === 'week') {
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –Ω–µ–¥–µ–ª–∏ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è
    const weekDayOrder = ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å'];
    chartData.sort((a, b) => {
      const dayA = a.time.split('\n')[0];
      const dayB = b.time.split('\n')[0];
      return weekDayOrder.indexOf(dayA) - weekDayOrder.indexOf(dayB);
    });
  } else {
    // –î–ª—è –º–µ—Å—è—Ü–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∏—Å–ª—É
    chartData.sort((a, b) => parseInt(a.time) - parseInt(b.time));
  }

  console.log(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ ${chartData.length} —Ç–æ—á–µ–∫ –≥—Ä–∞—Ñ–∏–∫–∞`, chartData);
  return chartData;
};

// –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –Ω–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
export const generateDemoData = (range: TimeRange): ChartDataPoint[] => {
  console.log('üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è', range);
  const demoData: ChartDataPoint[] = [];
  const now = new Date();

  if (range === 'day') {
    // –î–Ω–µ–≤–Ω–æ–π —Ä–µ–∂–∏–º: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const hourlyData = [
      { hour: 8, mood: 2 }, { hour: 10, mood: 3 }, { hour: 12, mood: 1 },
      { hour: 14, mood: 4 }, { hour: 16, mood: 2 }, { hour: 18, mood: 3 },
      { hour: 20, mood: 1 }, { hour: 22, mood: 2 }
    ];
    
    hourlyData.forEach(({ hour, mood }) => {
      const timeString = `${hour.toString().padStart(2, '0')}:00`;
      demoData.push({
        time: timeString,
        mood,
        emotions: mood >= 2 ? ['—Ä–∞–¥–æ—Å—Ç—å', '—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ'] : ['—É—Å—Ç–∞–ª–æ—Å—Ç—å'],
        connection: '–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
        fullDate: format(now, 'dd.MM.yyyy') + ' ' + timeString
      });
    });
  } else if (range === 'week') {
    // –ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const daysOfWeek = ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å'];
    const weeklyMoods = [2, 3, 1, 4, 2, 3, 1]; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    
    for (let i = 0; i < 7; i++) {
      const date = new Date(now);
      date.setDate(date.getDate() - 6 + i);
      const dayName = daysOfWeek[i];
      const dateStr = format(date, 'dd.MM');
      const mood = weeklyMoods[i];
      
      demoData.push({
        time: `${dayName}\n${dateStr}`,
        mood,
        emotions: mood >= 2 ? ['—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', '—Ä–∞–¥–æ—Å—Ç—å'] : ['—É—Å—Ç–∞–ª–æ—Å—Ç—å'],
        connection: '–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
        fullDate: format(date, 'dd.MM.yyyy')
      });
    }
  } else if (range === 'month') {
    // –ú–µ—Å—è—á–Ω—ã–π —Ä–µ–∂–∏–º: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const monthlyMoods = [1, 2, 3, 2, 4, 1, 3, 2, 3, 1, 4, 2, 3, 1, 2]; // 15 –¥–Ω–µ–π
    
    for (let i = 0; i < 15; i++) {
      const date = new Date(now);
      date.setDate(date.getDate() - 14 + i);
      const day = date.getDate();
      const mood = monthlyMoods[i];
      
      demoData.push({
        time: day.toString(),
        mood,
        emotions: mood >= 2 ? ['—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ'] : ['—É—Å—Ç–∞–ª–æ—Å—Ç—å'],
        connection: '–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
        fullDate: format(date, 'dd.MM.yyyy')
      });
    }
  }

  return demoData;
};

export const getDateRange = (range: TimeRange) => {
  const now = new Date();
  let startDate: Date;
  let endDate: Date;

  if (range === 'day') {
    // –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –æ—Ç 00:00 –¥–æ 23:59
    startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59, 999);
  } else if (range === 'week') {
    // –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    const dayOfWeek = now.getDay();
    const diffToMonday = dayOfWeek === 0 ? -6 : 1 - dayOfWeek;
    startDate = new Date(now);
    startDate.setDate(now.getDate() + diffToMonday);
    startDate.setHours(0, 0, 0, 0);
    
    endDate = new Date(startDate);
    endDate.setDate(startDate.getDate() + 6);
    endDate.setHours(23, 59, 59, 999);
  } else {
    // –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    startDate = new Date(now.getFullYear(), now.getMonth(), 1);
    endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);
  }

  return { startDate, endDate };
};