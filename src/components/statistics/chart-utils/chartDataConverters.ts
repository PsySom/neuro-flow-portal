import { format } from 'date-fns';
import { MoodEntry } from '@/services/backend-diary.service';

export interface ChartDataPoint {
  time: string;
  mood: number;
  emotions?: string[];
  context?: string;
  notes?: string;
  triggers?: string[];
  physical_sensations?: string[];
  connection?: string;
  fullDate?: string;
}

export type TimeRange = 'day' | 'week' | 'month';

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —à–∫–∞–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É -5..5
// –ï—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ -10..10 (–±–µ–∫–µ–Ω–¥), –¥–µ–ª–∏–º –Ω–∞ 2 –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞
const normalizeMood = (value: number): number => {
  if (value > 5 || value < -5) {
    const scaled = value / 2;
    return Math.max(-5, Math.min(5, Math.round(scaled * 10) / 10));
  }
  // —Ç–∞–∫–∂–µ –æ–≥—Ä–∞–Ω–∏—á–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  return Math.max(-5, Math.min(5, Math.round(value * 10) / 10));
};

export const convertMoodEntriesToChartData = (entries: MoodEntry[], range: TimeRange): ChartDataPoint[] => {
  console.log(`üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ${entries.length} –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ${range}`);
  
  if (entries.length === 0) {
    console.log('üìä –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
    return [];
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  const { startDate, endDate } = getDateRange(range);
  console.log(`üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è ${range}:`, { 
    start: format(startDate, 'yyyy-MM-dd HH:mm'), 
    end: format(endDate, 'yyyy-MM-dd HH:mm') 
  });

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
  const filteredEntries = entries.filter(entry => {
    const entryDate = new Date(entry.timestamp);
    const isInRange = entryDate >= startDate && entryDate <= endDate;
    return isInRange;
  });

  console.log(`üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${filteredEntries.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ ${entries.length} –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ${range}`);

  if (filteredEntries.length === 0) {
    console.log('üìä –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ');
    return [];
  }

  if (range === 'day') {
    // –î–µ–Ω—å: –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    return convertDayData(filteredEntries);
  } else if (range === 'week') {
    // –ù–µ–¥–µ–ª—è: 3 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤ –¥–µ–Ω—å
    return convertWeekData(filteredEntries);
  } else {
    // –ú–µ—Å—è—Ü: –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –¥–µ–Ω—å (—Å—Ä–µ–¥–Ω–µ–µ)
    return convertMonthData(filteredEntries);
  }
};

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ - –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω–æ
const convertDayData = (entries: MoodEntry[]): ChartDataPoint[] => {
  console.log('üìÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω–æ');
  
  const chartData: ChartDataPoint[] = entries.map(entry => {
    const entryDate = new Date(entry.timestamp);
    const timeKey = format(entryDate, 'HH:mm');
    
    const emotions = entry.emotions?.map(e => e.name) || [];
    
    return {
      time: timeKey,
      mood: normalizeMood(entry.mood_score),
      emotions,
      context: entry.context,
      notes: entry.notes,
      triggers: entry.triggers,
      physical_sensations: entry.physical_sensations,
      connection: emotions.join(', '),
      fullDate: format(entryDate, 'dd.MM.yyyy HH:mm')
    };
  });

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  chartData.sort((a, b) => a.time.localeCompare(b.time));
  
  console.log(`‚úÖ –î–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${chartData.length} –∑–∞–ø–∏—Å–µ–π`);
  return chartData;
};

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ - 3 –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤ –¥–µ–Ω—å
const convertWeekData = (entries: MoodEntry[]): ChartDataPoint[] => {
  console.log('üìÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - 3 –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤ –¥–µ–Ω—å');
  
  const groupedData = new Map<string, MoodEntry[]>();
  
  entries.forEach(entry => {
    const entryDate = new Date(entry.timestamp);
    const dayNames = ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å'];
    const dayIndex = (entryDate.getDay() + 6) % 7;
    const dayName = dayNames[dayIndex];
    const dateStr = format(entryDate, 'dd.MM');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫
    const hours = entryDate.getHours();
    let timeSlot: string;
    if (hours < 12) {
      timeSlot = '—É—Ç—Ä–æ';
    } else if (hours < 17) {
      timeSlot = '–¥–µ–Ω—å'; 
    } else {
      timeSlot = '–≤–µ—á–µ—Ä';
    }
    
    const timeKey = `${dayName}\n${dateStr}\n${timeSlot}`;
    
    if (!groupedData.has(timeKey)) {
      groupedData.set(timeKey, []);
    }
    groupedData.get(timeKey)!.push(entry);
  });

  const chartData: ChartDataPoint[] = [];
  
  groupedData.forEach((entriesGroup, timeKey) => {
    // –£—Å—Ä–µ–¥–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ (–Ω–æ—Ä–º–∞–ª–∏–∑—É—è —à–∫–∞–ª—É)
    const avgMood = entriesGroup.reduce((sum, entry) => sum + normalizeMood(entry.mood_score), 0) / entriesGroup.length;
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–º–æ—Ü–∏–∏
    const allEmotions: string[] = [];
    entriesGroup.forEach(entry => {
      entry.emotions?.forEach(emotion => {
        if (!allEmotions.includes(emotion.name)) {
          allEmotions.push(emotion.name);
        }
      });
    });

    // –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
    const lastEntry = entriesGroup[entriesGroup.length - 1];
    
    const dataPoint: ChartDataPoint = {
      time: timeKey,
      mood: Math.round(avgMood * 10) / 10, // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞
      emotions: allEmotions,
      context: lastEntry.context,
      notes: `${entriesGroup.length} –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫`,
      triggers: lastEntry.triggers,
      physical_sensations: lastEntry.physical_sensations,
      connection: allEmotions.join(', '),
      fullDate: format(new Date(lastEntry.timestamp), 'dd.MM.yyyy HH:mm')
    };

    chartData.push(dataPoint);
  });

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
  const weekDayOrder = ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å'];
  const timeSlotOrder = ['—É—Ç—Ä–æ', '–¥–µ–Ω—å', '–≤–µ—á–µ—Ä'];
  
  chartData.sort((a, b) => {
    const [dayA, , timeSlotA] = a.time.split('\n');
    const [dayB, , timeSlotB] = b.time.split('\n');
    
    const dayDiff = weekDayOrder.indexOf(dayA) - weekDayOrder.indexOf(dayB);
    if (dayDiff !== 0) return dayDiff;
    
    return timeSlotOrder.indexOf(timeSlotA) - timeSlotOrder.indexOf(timeSlotB);
  });
  
  console.log(`‚úÖ –ù–µ–¥–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${chartData.length} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤`);
  return chartData;
};

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ - —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ –¥–µ–Ω—å
const convertMonthData = (entries: MoodEntry[]): ChartDataPoint[] => {
  console.log('üìÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ –¥–µ–Ω—å');
  
  const groupedData = new Map<string, MoodEntry[]>();
  
  entries.forEach(entry => {
    const entryDate = new Date(entry.timestamp);
    const dayKey = format(entryDate, 'd'); // –î–µ–Ω—å –º–µ—Å—è—Ü–∞
    
    if (!groupedData.has(dayKey)) {
      groupedData.set(dayKey, []);
    }
    groupedData.get(dayKey)!.push(entry);
  });

  const chartData: ChartDataPoint[] = [];
  
  groupedData.forEach((entriesGroup, dayKey) => {
    // –£—Å—Ä–µ–¥–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å (–Ω–æ—Ä–º–∞–ª–∏–∑—É—è —à–∫–∞–ª—É)
    const avgMood = entriesGroup.reduce((sum, entry) => sum + normalizeMood(entry.mood_score), 0) / entriesGroup.length;
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–º–æ—Ü–∏–∏ –∑–∞ –¥–µ–Ω—å
    const allEmotions: string[] = [];
    entriesGroup.forEach(entry => {
      entry.emotions?.forEach(emotion => {
        if (!allEmotions.includes(emotion.name)) {
          allEmotions.push(emotion.name);
        }
      });
    });

    // –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –¥–Ω—è
    const lastEntry = entriesGroup[entriesGroup.length - 1];
    
    const dataPoint: ChartDataPoint = {
      time: dayKey,
      mood: Math.round(avgMood * 10) / 10, // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞
      emotions: allEmotions,
      context: lastEntry.context,
      notes: `${entriesGroup.length} –∑–∞–ø–∏—Å–µ–π –∑–∞ –¥–µ–Ω—å`,
      triggers: lastEntry.triggers,
      physical_sensations: lastEntry.physical_sensations,
      connection: allEmotions.join(', '),
      fullDate: format(new Date(lastEntry.timestamp), 'dd.MM.yyyy')
    };

    chartData.push(dataPoint);
  });

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –º–µ—Å—è—Ü–∞
  chartData.sort((a, b) => parseInt(a.time) - parseInt(b.time));
  
  console.log(`‚úÖ –ú–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${chartData.length} –¥–Ω–µ–π`);
  return chartData;
};

// –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –Ω–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
export const generateDemoData = (range: TimeRange): ChartDataPoint[] => {
  console.log('üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è', range);
  const demoData: ChartDataPoint[] = [];
  const now = new Date();

  if (range === 'day') {
    // –î–Ω–µ–≤–Ω–æ–π —Ä–µ–∂–∏–º: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const hourlyData = [
      { hour: 8, mood: 2 }, { hour: 10, mood: 3 }, { hour: 12, mood: 1 },
      { hour: 14, mood: 4 }, { hour: 16, mood: 2 }, { hour: 18, mood: 3 },
      { hour: 20, mood: 1 }, { hour: 22, mood: 2 }
    ];
    
    hourlyData.forEach(({ hour, mood }) => {
      const timeString = `${hour.toString().padStart(2, '0')}:00`;
      demoData.push({
        time: timeString,
        mood,
        emotions: mood >= 2 ? ['—Ä–∞–¥–æ—Å—Ç—å', '—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ'] : ['—É—Å—Ç–∞–ª–æ—Å—Ç—å'],
        connection: '–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
        fullDate: format(now, 'dd.MM.yyyy') + ' ' + timeString
      });
    });
  } else if (range === 'week') {
    // –ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const daysOfWeek = ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å'];
    const weeklyMoods = [2, 3, 1, 4, 2, 3, 1]; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    
    for (let i = 0; i < 7; i++) {
      const date = new Date(now);
      date.setDate(date.getDate() - 6 + i);
      const dayName = daysOfWeek[i];
      const dateStr = format(date, 'dd.MM');
      const mood = weeklyMoods[i];
      
      demoData.push({
        time: `${dayName}\n${dateStr}`,
        mood,
        emotions: mood >= 2 ? ['—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', '—Ä–∞–¥–æ—Å—Ç—å'] : ['—É—Å—Ç–∞–ª–æ—Å—Ç—å'],
        connection: '–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
        fullDate: format(date, 'dd.MM.yyyy')
      });
    }
  } else if (range === 'month') {
    // –ú–µ—Å—è—á–Ω—ã–π —Ä–µ–∂–∏–º: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const monthlyMoods = [1, 2, 3, 2, 4, 1, 3, 2, 3, 1, 4, 2, 3, 1, 2]; // 15 –¥–Ω–µ–π
    
    for (let i = 0; i < 15; i++) {
      const date = new Date(now);
      date.setDate(date.getDate() - 14 + i);
      const day = date.getDate();
      const mood = monthlyMoods[i];
      
      demoData.push({
        time: day.toString(),
        mood,
        emotions: mood >= 2 ? ['—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ'] : ['—É—Å—Ç–∞–ª–æ—Å—Ç—å'],
        connection: '–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
        fullDate: format(date, 'dd.MM.yyyy')
      });
    }
  }

  return demoData;
};

export const getDateRange = (range: TimeRange) => {
  const now = new Date();
  let startDate: Date;
  let endDate: Date;

  if (range === 'day') {
    // –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –æ—Ç 00:00 –¥–æ 23:59
    startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59, 999);
  } else if (range === 'week') {
    // –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    const dayOfWeek = now.getDay();
    const diffToMonday = dayOfWeek === 0 ? -6 : 1 - dayOfWeek;
    startDate = new Date(now);
    startDate.setDate(now.getDate() + diffToMonday);
    startDate.setHours(0, 0, 0, 0);
    
    endDate = new Date(startDate);
    endDate.setDate(startDate.getDate() + 6);
    endDate.setHours(23, 59, 59, 999);
  } else {
    // –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    startDate = new Date(now.getFullYear(), now.getMonth(), 1);
    endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);
  }

  return { startDate, endDate };
};