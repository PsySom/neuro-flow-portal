import { format, subDays, subMonths, subWeeks } from 'date-fns';
import { backendDiaryService, MoodEntry } from '@/services/backend-diary.service';
import { ChartDataPoint, TimeRange, convertMoodEntriesToChartData, generateDemoData, getDateRange } from './chartDataConverters';

export class ChartDataService {
  async fetchMoodData(range: TimeRange, isAuthenticated: boolean = true): Promise<ChartDataPoint[]> {
    try {
      const { startDate, endDate } = getDateRange(range);

      console.log(`üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ${range}:`, { startDate, endDate });

      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Supabase
      let entries: MoodEntry[] = [];
      
      if (isAuthenticated) {
        try {
          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
          const { moodDiaryRepository } = await import('@/integrations/supabase/mood-diary.repo');
          
          const supabaseEntries = await moodDiaryRepository.getEntries({
            start_date: format(startDate, 'yyyy-MM-dd'),
            end_date: format(endDate, 'yyyy-MM-dd'),
            order_direction: 'asc',
            limit: 100
          });

          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç
          entries = supabaseEntries.map(entry => ({
            id: entry.id,
            user_id: entry.user_id,
            mood_score: entry.mood_score,
            emotions: entry.emotions || [],
            triggers: entry.triggers || [],
            physical_sensations: entry.physical_sensations || [],
            body_areas: entry.body_areas || [],
            context: entry.context || '',
            notes: entry.notes || '',
            timestamp: entry.created_at || new Date().toISOString()
          }));

          console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${entries.length} –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–∑ Supabase`);
        } catch (supabaseError) {
          console.warn('‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º fallback API:', supabaseError);
          // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É API
          entries = await backendDiaryService.getMoodEntries({
            start_date: format(startDate, 'yyyy-MM-dd'),
            end_date: format(endDate, 'yyyy-MM-dd'),
            sort_desc: false
          });
        }
      }

      if (entries.length > 0) {
        const chartData = convertMoodEntriesToChartData(entries, range);
        console.log(`üìä –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ ${chartData.length} —Ç–æ—á–µ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞`);
        return chartData;
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫
        if (isAuthenticated) {
          console.log('üìä –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫');
          return [];
        } else {
          // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
          console.log('üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ');
          return this.generateDemoMoodData(range);
        }
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:', error);
      
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥–µ–º–æ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
      if (isAuthenticated) {
        return [];
      } else {
        return this.generateDemoMoodData(range);
      }
    }
  }

  private generateDemoMoodData(range: TimeRange): ChartDataPoint[] {
    console.log('üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞');
    
    const now = new Date();
    const dataPoints: ChartDataPoint[] = [];
    
    let startDate: Date;
    let pointCount: number;
    
    switch (range) {
      case 'day':
        startDate = subDays(now, 1);
        pointCount = 24; // –ö–∞–∂–¥—ã–π —á–∞—Å
        break;
      case 'week':
        startDate = subWeeks(now, 1);
        pointCount = 7; // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å
        break;
      case 'month':
        startDate = subMonths(now, 1);
        pointCount = 15; // –ö–∞–∂–¥—ã–µ 2 –¥–Ω—è
        break;
      default:
        startDate = subWeeks(now, 1);
        pointCount = 7;
    }

    for (let i = 0; i < pointCount; i++) {
      const date = new Date(startDate.getTime() + (i * (now.getTime() - startDate.getTime()) / pointCount));
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
      const baseScore = -1 + Math.sin(i / pointCount * Math.PI * 2) * 2; // –í–æ–ª–Ω–∞ –æ—Ç -3 –¥–æ 1
      const randomVariation = (Math.random() - 0.5) * 2; // ¬±1
      const mood = Math.max(-5, Math.min(5, Math.round(baseScore + randomVariation)));
      
      // –î–µ–º–æ —ç–º–æ—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
      const emotions = mood > 2 ? ['–†–∞–¥–æ—Å—Ç—å', '–≠–Ω—Ç—É–∑–∏–∞–∑–º'] :
                     mood > 0 ? ['–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ'] :
                     mood > -2 ? ['–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å'] :
                     ['–ì—Ä—É—Å—Ç—å', '–£—Å—Ç–∞–ª–æ—Å—Ç—å'];

      const triggers = mood < 0 ? ['–†–∞–±–æ—Ç–∞', '–°—Ç—Ä–µ—Å—Å'] : ['–û—Ç–¥—ã—Ö', '–û–±—â–µ–Ω–∏–µ'];

      let timeFormat: string;
      switch (range) {
        case 'day':
          timeFormat = date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
          break;
        case 'week':
          timeFormat = date.toLocaleDateString('ru-RU', { weekday: 'short', day: 'numeric' });
          break;
        default:
          timeFormat = date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' });
      }

      dataPoints.push({
        time: timeFormat,
        mood: mood,
        emotions: emotions,
        triggers: triggers,
        physical_sensations: mood < 0 ? ['–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '–£—Å—Ç–∞–ª–æ—Å—Ç—å'] : ['–õ–µ–≥–∫–æ—Å—Ç—å'],
        connection: mood > 0 ? '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è' : '–°—Ç—Ä–µ—Å—Å–æ–≤—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏',
        notes: '–î–µ–º–æ-–∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞',
        fullDate: date.toLocaleDateString('ru-RU', { 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        })
      });
    }

    return dataPoints;
  }
}

export const chartDataService = new ChartDataService();