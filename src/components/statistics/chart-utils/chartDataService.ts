import { format } from 'date-fns';
import { backendDiaryService, MoodEntry } from '@/services/backend-diary.service';
import { ChartDataPoint, TimeRange, convertMoodEntriesToChartData, generateDemoData, getDateRange } from './chartDataConverters';

export class ChartDataService {
  async fetchMoodData(range: TimeRange, isAuthenticated: boolean = true): Promise<ChartDataPoint[]> {
    try {
      const { startDate, endDate } = getDateRange(range);

      console.log(`üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ${range}:`, { startDate, endDate });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (—Ä–µ–∞–ª—å–Ω—ã–µ –∏–ª–∏ mock)
      const entries = await backendDiaryService.getMoodEntries({
        start_date: format(startDate, 'yyyy-MM-dd'),
        end_date: format(endDate, 'yyyy-MM-dd'),
        sort_desc: false
      });

      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${entries.length} –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ${range}`);
      
      if (entries.length > 0) {
        const chartData = convertMoodEntriesToChartData(entries, range);
        console.log(`üìä –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ ${chartData.length} —Ç–æ—á–µ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞`, chartData);
        return chartData;
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ (–ù–ï –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ!)
        console.log('üìä –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫');
        return [];
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:', error);
      
      // –î–ª—è –æ—à–∏–±–æ–∫ —Ç–æ–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤  
      console.log('üìä –û—à–∏–±–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫');
      return [];
    }
  }
}

export const chartDataService = new ChartDataService();