import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Checkbox } from '@/components/ui/checkbox';
import { Clock, Plus, Info, Edit, Star, Trash2 } from 'lucide-react';

interface Activity {
  id: number;
  name: string;
  emoji: string;
  startTime: string;
  endTime: string;
  duration: string;
  color: string;
  importance: number;
  completed: boolean;
  type: string;
  needEmoji?: string;
}

const ActivityTimelineComponent = () => {
  const [currentTime, setCurrentTime] = useState(new Date());
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const timeIndicatorRef = useRef<HTMLDivElement>(null);
  const lastInteractionRef = useRef(Date.now());

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 60000);

    return () => clearInterval(timer);
  }, []);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –ø–æ—Å–ª–µ 20 —Å–µ–∫—É–Ω–¥ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
  useEffect(() => {
    const checkAutoScroll = () => {
      const timeSinceLastInteraction = Date.now() - lastInteractionRef.current;
      if (timeSinceLastInteraction >= 20000) { // 20 —Å–µ–∫—É–Ω–¥
        scrollToCurrentTime();
      }
    };

    const autoScrollTimer = setInterval(checkAutoScroll, 5000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(autoScrollTimer);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleUserInteraction = () => {
    lastInteractionRef.current = Date.now();
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä–æ–ª–ª–∞ –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
  const scrollToCurrentTime = () => {
    if (timeIndicatorRef.current && scrollAreaRef.current) {
      const scrollContainer = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');
      if (scrollContainer) {
        const indicatorTop = timeIndicatorRef.current.offsetTop;
        const containerHeight = scrollContainer.clientHeight;
        const scrollTop = indicatorTop - containerHeight / 2;
        
        scrollContainer.scrollTo({
          top: Math.max(0, scrollTop),
          behavior: 'smooth'
        });
      }
    }
  };

  const activities: Activity[] = [
    { id: 1, name: '–°–æ–Ω', emoji: 'üò¥', startTime: '00:00', endTime: '08:00', duration: '8 —á', color: 'bg-indigo-200', importance: 5, completed: true, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üõå' },
    { id: 2, name: '–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ', emoji: '‚òÄÔ∏è', startTime: '08:00', endTime: '08:30', duration: '30 –º–∏–Ω', color: 'bg-yellow-200', importance: 3, completed: true, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: '‚ö°' },
    { id: 3, name: '–ó–∞—Ä—è–¥–∫–∞', emoji: 'üèÉ‚Äç‚ôÇÔ∏è', startTime: '08:30', endTime: '09:30', duration: '1 —á', color: 'bg-green-200', importance: 4, completed: true, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üí™' },
    { id: 4, name: '–î—É—à, –∑–∞–≤—Ç—Ä–∞–∫, –≥–∏–≥–∏–µ–Ω–∞', emoji: 'üöø', startTime: '09:30', endTime: '10:00', duration: '30 –º–∏–Ω', color: 'bg-blue-200', importance: 4, completed: true, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üßò' },
    { id: 5, name: '–£—Ç—Ä–µ–Ω–Ω–∏–π –¥–Ω–µ–≤–Ω–∏–∫', emoji: 'üìù', startTime: '10:00', endTime: '10:30', duration: '30 –º–∏–Ω', color: 'bg-purple-200', importance: 5, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üß†' },
    { id: 6, name: '–î–æ—Ä–æ–≥–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É', emoji: 'üöó', startTime: '10:30', endTime: '11:00', duration: '30 –º–∏–Ω', color: 'bg-gray-200', importance: 2, completed: false, type: '–∑–∞–¥–∞—á–∞' },
    { id: 7, name: '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º', emoji: 'üíº', startTime: '11:00', endTime: '12:00', duration: '1 —á', color: 'bg-orange-200', importance: 5, completed: false, type: '–∑–∞–¥–∞—á–∞' },
    { id: 8, name: '–ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞ –∫–æ—Ñ–µ', emoji: '‚òï', startTime: '12:00', endTime: '12:30', duration: '30 –º–∏–Ω', color: 'bg-amber-200', importance: 3, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üå±' },
    { id: 9, name: '–†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏', emoji: 'üìã', startTime: '13:00', endTime: '14:00', duration: '1 —á', color: 'bg-red-200', importance: 4, completed: false, type: '–∑–∞–¥–∞—á–∞' },
    { id: 10, name: '–û–±–µ–¥', emoji: 'üçΩÔ∏è', startTime: '14:00', endTime: '14:30', duration: '30 –º–∏–Ω', color: 'bg-green-300', importance: 4, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üçé' },
    { id: 11, name: '–ü—Ä–æ–≥—É–ª–∫–∞', emoji: 'üö∂‚Äç‚ôÇÔ∏è', startTime: '14:30', endTime: '15:00', duration: '30 –º–∏–Ω', color: 'bg-emerald-200', importance: 3, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üå≥' },
    { id: 12, name: '–†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏', emoji: 'üìã', startTime: '15:00', endTime: '17:00', duration: '2 —á', color: 'bg-red-200', importance: 4, completed: false, type: '–∑–∞–¥–∞—á–∞' },
    { id: 13, name: '–í—Å—Ç—Ä–µ—á–∞ —Å –¥—Ä—É–≥–æ–º', emoji: 'üë•', startTime: '17:00', endTime: '19:00', duration: '2 —á', color: 'bg-pink-200', importance: 4, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: '‚ù§Ô∏è' },
    { id: 14, name: '–£–∂–∏–Ω', emoji: 'üçΩÔ∏è', startTime: '19:00', endTime: '20:00', duration: '1 —á', color: 'bg-green-300', importance: 4, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üçé' },
    { id: 15, name: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–∞', emoji: 'üé¨', startTime: '20:00', endTime: '21:30', duration: '1.5 —á', color: 'bg-violet-200', importance: 2, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üé≠' },
    { id: 16, name: '–î—É—à, –≥–∏–≥–∏–µ–Ω–∞', emoji: 'üöø', startTime: '21:30', endTime: '22:00', duration: '30 –º–∏–Ω', color: 'bg-blue-200', importance: 4, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üßò' },
    { id: 17, name: '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞', emoji: 'üìù', startTime: '22:00', endTime: '22:30', duration: '30 –º–∏–Ω', color: 'bg-purple-200', importance: 5, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üß†' },
    { id: 18, name: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ —Å–Ω—É', emoji: 'üåô', startTime: '22:30', endTime: '24:00', duration: '1.5 —á', color: 'bg-indigo-200', importance: 5, completed: false, type: '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', needEmoji: 'üò¥' }
  ];

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  const getCurrentTimePosition = () => {
    const currentHour = currentTime.getHours();
    const currentMinute = currentTime.getMinutes();
    const totalMinutes = currentHour * 60 + currentMinute;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
    const slotIndex = Math.floor(currentHour / 3);
    const slotStartMinutes = slotIndex * 180; // 3 —á–∞—Å–∞ = 180 –º–∏–Ω—É—Ç
    const minutesIntoSlot = totalMinutes - slotStartMinutes;
    
    // –í—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ (95px + padding)
    const slotHeight = 95 + 8; // 95px –≤—ã—Å–æ—Ç–∞ + 8px padding
    const positionInSlot = (minutesIntoSlot / 180) * slotHeight;
    
    return slotIndex * slotHeight + positionInSlot + 60; // +60 –¥–ª—è —É—á–µ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  };

  const currentTimeString = currentTime.toLocaleTimeString('ru-RU', { 
    hour: '2-digit', 
    minute: '2-digit' 
  });

  // Group activities into 8 three-hour blocks
  const timeSlots = Array.from({ length: 8 }, (_, i) => {
    const startHour = i * 3;
    const endHour = (i + 1) * 3;
    const timeString = `${startHour.toString().padStart(2, '0')}:00 - ${endHour.toString().padStart(2, '0')}:00`;
    
    // Find activities for this 3-hour block
    const blockActivities = activities.filter(activity => {
      const activityStartHour = parseInt(activity.startTime.split(':')[0]);
      const activityEndHour = parseInt(activity.endTime.split(':')[0]);
      const activityEndMinute = parseInt(activity.endTime.split(':')[1]);
      
      // Activity overlaps with this 3-hour block
      return (activityStartHour < endHour && (activityEndHour > startHour || (activityEndHour === endHour && activityEndMinute > 0)));
    });

    return {
      startHour,
      endHour,
      timeString,
      activities: blockActivities
    };
  });

  const isActivityStart = (activity: Activity, startHour: number) => {
    const activityStartHour = parseInt(activity.startTime.split(':')[0]);
    return activityStartHour >= startHour && activityStartHour < startHour + 3;
  };

  return (
    <Card className="h-[600px] bg-white/70 backdrop-blur-lg border-0 shadow-xl">
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle className="flex items-center space-x-2">
          <Clock className="w-5 h-5 text-emerald-600" />
          <span>–õ–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</span>
        </CardTitle>
        <Button size="icon" className="rounded-full bg-emerald-500 hover:bg-emerald-600">
          <Plus className="w-4 h-4" />
        </Button>
      </CardHeader>
      
      <CardContent className="p-0 relative">
        <ScrollArea 
          ref={scrollAreaRef} 
          className="h-[500px]"
          onWheel={handleUserInteraction}
          onTouchStart={handleUserInteraction}
          onMouseDown={handleUserInteraction}
        >
          <div className="px-6 relative">
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ */}
            <div 
              ref={timeIndicatorRef}
              className="absolute left-0 right-0 z-10 pointer-events-none"
              style={{ top: `${getCurrentTimePosition()}px` }}
            >
              <div className="flex items-center">
                <div className="w-20 flex justify-center">
                  <span className="bg-red-500 text-white px-2 py-1 rounded text-xs font-bold">
                    {currentTimeString}
                  </span>
                </div>
                <div 
                  className="flex-1 h-0.5 bg-red-500 relative"
                  style={{ height: '2px' }}
                >
                  <div className="absolute right-0 top-1/2 transform -translate-y-1/2 w-2 h-2 bg-red-500 rounded-full"></div>
                </div>
              </div>
            </div>

            {timeSlots.map((slot) => (
              <div key={slot.startHour} className="flex items-start py-2 border-b border-gray-100 last:border-b-0 min-h-[95px]">
                <div className="w-20 text-sm font-medium text-gray-600 py-3">
                  {slot.timeString}
                </div>
                <div className="flex-1 relative">
                  {slot.activities.length > 0 ? (
                    slot.activities.map((activity) => 
                      isActivityStart(activity, slot.startHour) ? (
                        <div 
                          key={activity.id} 
                          className={`${activity.color} rounded-lg p-3 mb-3 border border-gray-200 h-[85px] flex flex-col justify-between`}
                        >
                          {/* –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –≥–∞–ª–æ—á–∫–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ */}
                          <div className="flex items-start justify-between">
                            <div className="flex items-start space-x-2 flex-1">
                              <Checkbox 
                                checked={activity.completed}
                                className="w-8 h-8 rounded-sm mt-0.5"
                              />
                              <div className="flex flex-col space-y-1">
                                <span className="font-medium text-sm leading-tight">{activity.name}</span>
                                
                                {/* –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –≤—Ä–µ–º—è, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∑–≤–µ–∑–¥–æ—á–∫–∏ */}
                                <div className="flex items-center space-x-4 text-xs text-gray-600">
                                  <span>[{activity.startTime}-{activity.endTime}]</span>
                                  <span>[{activity.duration}]</span>
                                  <div className="flex items-center">
                                    {Array.from({ length: activity.importance }, (_, i) => (
                                      <Star key={i} className="w-3 h-3 fill-yellow-400 text-yellow-400" />
                                    ))}
                                  </div>
                                </div>

                                {/* –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: —ç–º–æ–¥–∑–∏ */}
                                <div className="flex items-center space-x-2">
                                  <span className="text-lg">{activity.emoji}</span>
                                  {activity.type === '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ' && activity.needEmoji && (
                                    <span className="text-sm">{activity.needEmoji}</span>
                                  )}
                                </div>
                              </div>
                            </div>
                            <div className="flex items-center space-x-1">
                              <Button size="icon" variant="ghost" className="h-6 w-6">
                                <Info className="w-3 h-3" />
                              </Button>
                              <Button size="icon" variant="ghost" className="h-6 w-6">
                                <Edit className="w-3 h-3" />
                              </Button>
                              <Button size="icon" variant="ghost" className="h-6 w-6">
                                <Star className="w-3 h-3" />
                              </Button>
                              <Button size="icon" variant="ghost" className="h-6 w-6">
                                <Trash2 className="w-3 h-3 text-red-500" />
                              </Button>
                            </div>
                          </div>
                        </div>
                      ) : null
                    )
                  ) : (
                    <div className="h-[85px] bg-gray-50 rounded-lg flex items-center justify-center opacity-50 hover:opacity-75 cursor-pointer">
                      <Plus className="w-4 h-4 text-gray-400" />
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  );
};

export default ActivityTimelineComponent;
