
import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { useActivities } from '@/contexts/ActivitiesContext';
import { RecurringActivityOptions } from '@/components/calendar/utils/recurringUtils';

interface CreateActivityDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

const CreateActivityDialog: React.FC<CreateActivityDialogProps> = ({
  open,
  onOpenChange
}) => {
  const [activeTab, setActiveTab] = useState('edit');
  const [activityName, setActivityName] = useState('');
  const [activityType, setActivityType] = useState('');
  const [startTime, setStartTime] = useState('');
  const [endTime, setEndTime] = useState('');
  const [priority, setPriority] = useState(1);
  const [selectedColor, setSelectedColor] = useState('bg-blue-200');
  const [note, setNote] = useState('');
  const [repeatType, setRepeatType] = useState('none');

  const { addActivity, getCurrentDateString } = useActivities();

  const getEmojiByType = (type: string) => {
    switch (type) {
      case '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ': return 'üå±';
      case '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è': return '‚ö™';
      case '—Å–º–µ—à–∞–Ω–Ω–∞—è': return 'üîÑ';
      case '–∑–∞–¥–∞—á–∞': return 'üíº';
      default: return 'üìù';
    }
  };

  const calculateDuration = (start: string, end: string) => {
    if (!start || !end) return '';
    
    const [startHour, startMin] = start.split(':').map(Number);
    const [endHour, endMin] = end.split(':').map(Number);
    
    let startMinutes = startHour * 60 + startMin;
    let endMinutes = endHour * 60 + endMin;
    
    if (endMinutes < startMinutes) {
      endMinutes += 24 * 60;
    }
    
    const diffMinutes = endMinutes - startMinutes;
    const hours = Math.floor(diffMinutes / 60);
    const minutes = diffMinutes % 60;
    
    if (hours === 0) return `${minutes} –º–∏–Ω`;
    if (minutes === 0) return `${hours} —á`;
    return `${hours} —á ${minutes} –º–∏–Ω`;
  };

  const handleSave = () => {
    if (!activityName.trim() || !activityType || !startTime || !endTime) {
      console.log('Validation failed: missing required fields');
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞
    const currentDate = getCurrentDateString();

    const newActivity = {
      id: Date.now(),
      name: activityName.trim(),
      emoji: getEmojiByType(activityType),
      startTime,
      endTime,
      duration: calculateDuration(startTime, endTime),
      color: selectedColor,
      importance: priority,
      completed: false,
      type: activityType,
      note,
      needEmoji: activityType === '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ' ? '‚ö°' : undefined,
      date: currentDate
    };

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤—Ç–æ—Ä–∞
    let recurringOptions: RecurringActivityOptions | undefined;
    if (repeatType && repeatType !== 'none' && repeatType !== '') {
      recurringOptions = {
        type: repeatType as 'daily' | 'weekly' | 'monthly',
        interval: 1,
        maxOccurrences: repeatType === 'daily' ? 10 : 30
      };
    }

    console.log('Creating activity from dashboard:', newActivity);
    console.log('With recurring options:', recurringOptions);
    
    addActivity(newActivity, recurringOptions);
    handleClose();
  };

  const handleClose = () => {
    setActivityName('');
    setActivityType('');
    setStartTime('');
    setEndTime('');
    setPriority(1);
    setSelectedColor('bg-blue-200');
    setNote('');
    setRepeatType('none');
    onOpenChange(false);
  };

  const colorOptions = [
    'bg-blue-200', 'bg-green-200', 'bg-yellow-200', 'bg-red-200',
    'bg-purple-200', 'bg-pink-200', 'bg-indigo-200', 'bg-orange-200'
  ];

  return (
    <Dialog open={open} onOpenChange={handleClose}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-xl font-semibold text-center">
            –°–æ–∑–¥–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
          </DialogTitle>
        </DialogHeader>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="edit">–°–æ–∑–¥–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</TabsTrigger>
            <TabsTrigger value="evaluate">–û—Ü–µ–Ω–∏—Ç—å</TabsTrigger>
            <TabsTrigger value="development">–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</TabsTrigger>
          </TabsList>

          <TabsContent value="edit" className="mt-6">
            <div className="space-y-4">
              <div>
                <Label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</Label>
                <Input
                  id="name"
                  value={activityName}
                  onChange={(e) => setActivityName(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
                />
              </div>

              <div>
                <Label htmlFor="type">–¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</Label>
                <Select value={activityType} onValueChange={setActivityType}>
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ">
                      <div className="flex items-center">
                        <div className="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∞—è
                      </div>
                    </SelectItem>
                    <SelectItem value="–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è">
                      <div className="flex items-center">
                        <div className="w-3 h-3 rounded-full bg-blue-500 mr-2"></div>
                        –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è
                      </div>
                    </SelectItem>
                    <SelectItem value="—Å–º–µ—à–∞–Ω–Ω–∞—è">
                      <div className="flex items-center">
                        <div className="w-3 h-3 rounded-full bg-yellow-500 mr-2"></div>
                        –°–º–µ—à–∞–Ω–Ω–∞—è
                      </div>
                    </SelectItem>
                    <SelectItem value="–∑–∞–¥–∞—á–∞">
                      <div className="flex items-center">
                        <div className="w-3 h-3 rounded-full bg-red-500 mr-2"></div>
                        –ò—Å—Ç–æ—â–∞—é—â–∞—è
                      </div>
                    </SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="startTime">–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</Label>
                  <Input
                    id="startTime"
                    type="time"
                    value={startTime}
                    onChange={(e) => setStartTime(e.target.value)}
                  />
                </div>
                <div>
                  <Label htmlFor="endTime">–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è</Label>
                  <Input
                    id="endTime"
                    type="time"
                    value={endTime}
                    onChange={(e) => setEndTime(e.target.value)}
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="priority">–í–∞–∂–Ω–æ—Å—Ç—å (1-5)</Label>
                <Select value={priority.toString()} onValueChange={(value) => setPriority(Number(value))}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="1">1 - –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è</SelectItem>
                    <SelectItem value="2">2 - –ù–∏–∑–∫–∞—è</SelectItem>
                    <SelectItem value="3">3 - –°—Ä–µ–¥–Ω—è—è</SelectItem>
                    <SelectItem value="4">4 - –í—ã—Å–æ–∫–∞—è</SelectItem>
                    <SelectItem value="5">5 - –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="repeat">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</Label>
                <Select value={repeatType} onValueChange={setRepeatType}>
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="none">–ù–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å</SelectItem>
                    <SelectItem value="daily">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ (10 –¥–Ω–µ–π)</SelectItem>
                    <SelectItem value="weekly">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</SelectItem>
                    <SelectItem value="monthly">–ï–∂–µ–º–µ—Å—è—á–Ω–æ</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label>–¶–≤–µ—Ç</Label>
                <div className="flex gap-2 mt-2">
                  {colorOptions.map((color) => (
                    <button
                      key={color}
                      className={`w-8 h-8 rounded-lg border-2 ${color} ${
                        selectedColor === color ? 'border-gray-600' : 'border-gray-300'
                      }`}
                      onClick={() => setSelectedColor(color)}
                    />
                  ))}
                </div>
              </div>

              <div>
                <Label htmlFor="note">–ó–∞–º–µ—Ç–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
                <Textarea
                  id="note"
                  value={note}
                  onChange={(e) => setNote(e.target.value)}
                  placeholder="–î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫—É –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
                />
              </div>

              <div className="flex justify-end space-x-2">
                <Button variant="outline" onClick={handleClose}>
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button onClick={handleSave} className="bg-emerald-600 hover:bg-emerald-700">
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </Button>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="evaluate" className="mt-6">
            <div className="text-center py-12">
              <h3 className="text-xl font-semibold mb-4">–û—Ü–µ–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>
              <p className="text-gray-600">–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –µ—ë –æ—Ü–µ–Ω–∫–∏.</p>
            </div>
          </TabsContent>

          <TabsContent value="development" className="mt-6">
            <div className="text-center py-12">
              <h3 className="text-xl font-semibold mb-4">–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h3>
              <p className="text-gray-600">–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
            </div>
          </TabsContent>
        </Tabs>
      </DialogContent>
    </Dialog>
  );
};

export default CreateActivityDialog;
