import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Slider } from '@/components/ui/slider';
import { Checkbox } from '@/components/ui/checkbox';
import { Textarea } from '@/components/ui/textarea';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { useForm } from 'react-hook-form';
import { Heart, Save, ArrowLeft, ArrowRight } from 'lucide-react';
import EmotionSelector from './EmotionSelector';
import { getMoodEmoji, getMoodZone, getRecommendations, emotionsData } from './moodDiaryUtils';

interface MoodDiaryData {
  mood: number;
  moodComment: string;
  selectedEmotions: Array<{
    name: string;
    intensity: number;
  }>;
  emotionTrigger?: string;
  emotionComment: string;
  bodyStateInfluence?: string;
  relatedThoughts?: string;
  triggerSource?: string;
  triggerThought?: string;
  hasCognitiveBias: boolean;
  reframedThought?: string;
  positiveSource?: string;
  selfEvaluation: number;
  gratitude: string;
  emotionConnection?: string;
  emotionImpact?: string;
}

const MoodDiary = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [moodValue, setMoodValue] = useState([0]);
  const [selectedEmotions, setSelectedEmotions] = useState<Array<{name: string; intensity: number}>>([]);
  const [showNegativeQuestions, setShowNegativeQuestions] = useState(false);
  const [showPositiveQuestions, setShowPositiveQuestions] = useState(false);
  const [recommendations, setRecommendations] = useState<string[]>([]);

  const form = useForm<MoodDiaryData>({
    defaultValues: {
      mood: 0,
      moodComment: '',
      selectedEmotions: [],
      emotionComment: '',
      relatedThoughts: '',
      hasCognitiveBias: false,
      selfEvaluation: 0,
      gratitude: '',
      emotionConnection: '',
      emotionImpact: ''
    }
  });

  const currentMood = moodValue[0];
  const moodEmoji = getMoodEmoji(currentMood);
  const moodZone = getMoodZone(currentMood);

  // –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏
  const lifeSpheres = [
    { emoji: 'üíº', label: '–†–∞–±–æ—Ç–∞/—É—á–µ–±–∞', value: 'work' },
    { emoji: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶', label: '–°–µ–º—å—è', value: 'family' },
    { emoji: '‚ù§Ô∏è', label: '–û—Ç–Ω–æ—à–µ–Ω–∏—è', value: 'relationships' },
    { emoji: 'üè•', label: '–ó–¥–æ—Ä–æ–≤—å–µ', value: 'health' },
    { emoji: 'üí∞', label: '–§–∏–Ω–∞–Ω—Å—ã', value: 'money' },
    { emoji: 'üë•', label: '–î—Ä—É–∑—å—è', value: 'friends' },
    { emoji: 'üéØ', label: '–¶–µ–ª–∏', value: 'goals' },
    { emoji: 'üè†', label: '–î–æ–º/–±—ã—Ç', value: 'home' },
    { emoji: 'üé®', label: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', value: 'creativity' },
    { emoji: '‚ö°', label: '–≠–Ω–µ—Ä–≥–∏—è/—Å–æ—Å—Ç–æ—è–Ω–∏–µ', value: 'energy' },
    { emoji: 'üåç', label: '–í–Ω–µ—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è', value: 'external' },
    { emoji: 'üß†', label: '–ú—ã—Å–ª–∏', value: 'thoughts' }
  ];

  // –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç–µ–ª–∞
  const bodyStates = [
    { emoji: 'üò¥', label: '–£—Å—Ç–∞–ª–æ—Å—Ç—å', value: 'tired', type: 'negative' },
    { emoji: 'üò∞', label: '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ', value: 'tense', type: 'negative' },
    { emoji: 'ü§ï', label: '–ë–æ–ª—å/–¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç', value: 'pain', type: 'negative' },
    { emoji: 'üòµ‚Äçüí´', label: '–ì–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ', value: 'dizzy', type: 'negative' },
    { emoji: 'ü´®', label: '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –≤ —Ç–µ–ª–µ', value: 'anxious_body', type: 'negative' },
    { emoji: 'üò∂', label: '–û–Ω–µ–º–µ–Ω–∏–µ', value: 'numb', type: 'neutral' },
    { emoji: 'üòê', label: '–û–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', value: 'normal', type: 'neutral' },
    { emoji: 'üôÇ', label: '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', value: 'calm', type: 'neutral' },
    { emoji: 'üí™', label: '–≠–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å', value: 'energetic', type: 'positive' },
    { emoji: 'üòå', label: '–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ—Å—Ç—å', value: 'relaxed', type: 'positive' },
    { emoji: '‚ú®', label: '–õ–µ–≥–∫–æ—Å—Ç—å', value: 'light', type: 'positive' },
    { emoji: 'üî•', label: '–ñ–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞', value: 'vital', type: 'positive' }
  ];

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω—ã –ª–∏ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    const hasHighNegativeEmotions = selectedEmotions.some(emotion => {
      const emotionData = emotionsData.negative.find(e => e.name === emotion.name);
      return emotionData && emotion.intensity >= 7;
    });

    const hasHighPositiveEmotions = selectedEmotions.some(emotion => {
      const emotionData = emotionsData.positive.find(e => e.name === emotion.name);
      return emotionData && emotion.intensity >= 8;
    });

    setShowNegativeQuestions(hasHighNegativeEmotions);
    setShowPositiveQuestions(hasHighPositiveEmotions);
  }, [selectedEmotions]);

  const handleMoodChange = (value: number[]) => {
    setMoodValue(value);
    form.setValue('mood', value[0]);
  };

  const handleEmotionSelect = (emotions: Array<{name: string; intensity: number}>) => {
    setSelectedEmotions(emotions);
    form.setValue('selectedEmotions', emotions);
  };

  const handleNext = () => {
    if (currentStep < 5) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrev = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const onSubmit = (data: MoodDiaryData) => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    const generatedRecommendations = getRecommendations(data);
    setRecommendations(generatedRecommendations);
    
    console.log('Diary entry saved:', data);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  };

  const renderMoodBlock = () => (
    <div className="space-y-6">
      <div className="text-center">
        <h3 className="text-lg font-medium mb-4">
          –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ —Å–µ–±–µ –∏ –æ—Ü–µ–Ω–∏, –∫–∞–∫–æ–µ —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        </h3>
        
        <div className="flex justify-center mb-6">
          <div className="text-6xl">
            {moodEmoji}
          </div>
        </div>

        <div className="w-full max-w-md mx-auto mb-4">
          <Slider
            value={moodValue}
            onValueChange={handleMoodChange}
            min={-5}
            max={5}
            step={1}
            className="w-full"
          />
          <div className="flex justify-between text-xs text-gray-500 mt-2">
            <span>üòû -5</span>
            <span>üòê 0</span>
            <span>ü§© +5</span>
          </div>
        </div>

        <div className={`p-4 rounded-lg ${moodZone.color}`}>
          <p className="text-sm font-medium">{moodZone.description}</p>
          <p className="text-lg font-bold">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {currentMood}</p>
        </div>
      </div>

      <div className="space-y-2">
        <Label htmlFor="moodComment">
          –ú–æ–∂–µ—à—å –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–π—á–∞—Å?
        </Label>
        <Input
          id="moodComment"
          placeholder="–û–ø–∏—à–∏ —Å–≤–æ–∏ –º—ã—Å–ª–∏..."
          {...form.register('moodComment')}
        />
      </div>
    </div>
  );

  const renderEmotionsBlock = () => (
    <div className="space-y-6">
      <h3 className="text-lg font-medium text-center">
        –ü–æ–ø—Ä–æ–±—É–π —Ç–µ–ø–µ—Ä—å –æ–ø–∏—Å–∞—Ç—å, –∫–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –∏ —á—É–≤—Å—Ç–≤–∞ –ø—Ä–µ–æ–±–ª–∞–¥–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è?
      </h3>
      
      <EmotionSelector
        currentMood={currentMood}
        onEmotionsChange={handleEmotionSelect}
        selectedEmotions={selectedEmotions}
      />
    </div>
  );

  const renderClarifyingQuestions = () => (
    <div className="space-y-6">
      <h3 className="text-lg font-medium text-center">–£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã</h3>
      
      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏ */}
      {selectedEmotions.length > 0 && (
        <>
          {/* –í–æ–ø—Ä–æ—Å: –° —á–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ —ç—Ç–æ —á—É–≤—Å—Ç–≤–æ? */}
          <div className="space-y-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
            <h4 className="font-medium text-gray-900 dark:text-gray-100">–° —á–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ —ç—Ç–æ —á—É–≤—Å—Ç–≤–æ?</h4>
            <div className="grid grid-cols-3 sm:grid-cols-4 gap-3">
              {lifeSpheres.map((sphere) => (
                <button
                  key={sphere.value}
                  type="button"
                  onClick={() => form.setValue('emotionConnection', sphere.value)}
                  className={`p-3 rounded-lg border-2 transition-all text-center hover:scale-105 ${
                    form.watch('emotionConnection') === sphere.value
                      ? 'border-pink-500 bg-pink-50 dark:bg-pink-900/20'
                      : 'border-gray-200 dark:border-gray-600 bg-white dark:bg-gray-700 hover:border-gray-300 dark:hover:border-gray-500'
                  }`}
                >
                  <div className="text-2xl mb-1">{sphere.emoji}</div>
                  <div className="text-xs text-gray-600 dark:text-gray-300">{sphere.label}</div>
                </button>
              ))}
            </div>
          </div>

          {/* –í–æ–ø—Ä–æ—Å: –ù–∞ —á—Ç–æ –≤–ª–∏—è–µ—Ç —ç—Ç–∞ —ç–º–æ—Ü–∏—è? */}
          <div className="space-y-2">
            <Label>–ù–∞ —á—Ç–æ –≤–ª–∏—è–µ—Ç —ç—Ç–∞ —ç–º–æ—Ü–∏—è? –ß–µ–º—É –º–µ—à–∞–µ—Ç –∏–ª–∏ –ø–æ–º–æ–≥–∞–µ—Ç?</Label>
            <Textarea
              placeholder="–û–ø–∏—à–∏, –∫–∞–∫ —ç–º–æ—Ü–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ—é –∂–∏–∑–Ω—å, –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ—Ç–Ω–æ—à–µ–Ω–∏—è..."
              {...form.register('emotionImpact')}
              rows={3}
            />
          </div>

          {/* –í–æ–ø—Ä–æ—Å –æ –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–ª–∞ */}
          <div className="space-y-4 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
            <h4 className="font-medium text-blue-900 dark:text-blue-100">–ö–∞–∫ —ç—Ç–æ –≤–ª–∏—è–ª–æ –Ω–∞ —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–ª–∞?</h4>
            <div className="grid grid-cols-3 sm:grid-cols-4 gap-3">
              {bodyStates.map((state) => (
                <button
                  key={state.value}
                  type="button"
                  onClick={() => form.setValue('bodyStateInfluence', state.value)}
                  className={`p-3 rounded-lg border-2 transition-all text-center hover:scale-105 ${
                    form.watch('bodyStateInfluence') === state.value
                      ? 'border-blue-500 bg-blue-100 dark:bg-blue-800/30'
                      : 'border-gray-200 dark:border-gray-600 bg-white dark:bg-gray-700 hover:border-gray-300 dark:hover:border-gray-500'
                  }`}
                >
                  <div className="text-2xl mb-1">{state.emoji}</div>
                  <div className="text-xs text-gray-600 dark:text-gray-300">{state.label}</div>
                </button>
              ))}
            </div>
          </div>

          {/* –í–æ–ø—Ä–æ—Å –æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –º—ã—Å–ª—è—Ö */}
          <div className="space-y-2">
            <Label>–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ —Å —ç—Ç–∏–º —Å–≤—è–∑–∞–Ω—ã?</Label>
            <Textarea
              placeholder="–û–ø–∏—à–∏ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è..."
              {...form.register('relatedThoughts')}
              rows={3}
            />
          </div>

          {/* –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ —à–∞–≥–∞ 2 */}
          <div className="space-y-2">
            <Label>–ï—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è, –æ–ø–∏—à–∏, –∫–∞–∫ —ç—Ç–æ –ø—Ä–æ—è–≤–ª—è–ª–æ—Å—å –∏–ª–∏ —á—Ç–æ —ç—Ç–æ–º—É —Å–ø–æ—Å–æ–±—Å—Ç–≤–æ–≤–∞–ª–æ:</Label>
            <Input
              placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–± —ç–º–æ—Ü–∏—è—Ö..."
              {...form.register('emotionComment')}
            />
          </div>
        </>
      )}
      
      {/* –£–≥–ª—É–±–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π */}
      {showNegativeQuestions && (
        <div className="space-y-4 p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg">
          <h4 className="font-medium text-orange-900 dark:text-orange-100">–†–∞–±–æ—Ç–∞ —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏</h4>
          
          <div className="space-y-2">
            <Label>–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã–∑–≤–∞–ª–æ —ç—Ç–æ —á—É–≤—Å—Ç–≤–æ?</Label>
            <select 
              className="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600"
              {...form.register('triggerSource')}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫</option>
              <option value="external">–í–Ω–µ—à–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ</option>
              <option value="thoughts">–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º—ã—Å–ª–∏</option>
              <option value="communication">–û–±—â–µ–Ω–∏–µ</option>
              <option value="physical">–§–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏—á–∏–Ω—ã</option>
              <option value="self-esteem">–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞</option>
              <option value="other">–î—Ä—É–≥–æ–µ</option>
            </select>
          </div>

          <div className="space-y-2">
            <Label>–ö–∞–∫–∞—è –º—ã—Å–ª—å –∏–ª–∏ —Ñ—Ä–∞–∑–∞ –ø—Ä–∏—Ö–æ–¥–∏–ª–∞ —Ç–µ–±–µ –≤ –≥–æ–ª–æ–≤—É –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç?</Label>
            <Input
              placeholder="–û–ø–∏—à–∏ —Å–≤–æ–∏ –º—ã—Å–ª–∏..."
              {...form.register('triggerThought')}
            />
          </div>

          <div className="flex items-center space-x-2">
            <Checkbox
              id="cognitiveBias"
              {...form.register('hasCognitiveBias')}
            />
            <Label htmlFor="cognitiveBias">
              –ë—ã–ª–∏ –ª–∏ —Å—Ä–µ–¥–∏ —ç—Ç–∏—Ö –º—ã—Å–ª–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω—ã–µ (¬´—è –≤—Å–µ–≥–¥–∞¬ª, ¬´—è –Ω–µ –º–æ–≥—É¬ª, ¬´—É –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è¬ª)?
            </Label>
          </div>

          {form.watch('hasCognitiveBias') && (
            <div className="space-y-2">
              <Label>–ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –º—ã—Å–ª—å —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∞ –∑–≤—É—á–∞–ª–∞ –º—è–≥—á–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ –¥–ª—è —Ç–µ–±—è?</Label>
              <Input
                placeholder="–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º—ã—Å–ª—å..."
                {...form.register('reframedThought')}
              />
            </div>
          )}
        </div>
      )}

      {/* –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π */}
      {showPositiveQuestions && (
        <div className="space-y-4 p-4 bg-green-50 dark:bg-green-900/20 rounded-lg">
          <h4 className="font-medium text-green-900 dark:text-green-100">–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã</h4>
          
          <div className="space-y-2">
            <Label>–ß—Ç–æ —Å–ø–æ—Å–æ–±—Å—Ç–≤–æ–≤–∞–ª–æ —ç—Ç–æ–º—É –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é?</Label>
            <Input
              placeholder="–û–ø–∏—à–∏ —Å–æ–±—ã—Ç–∏–µ, –ø—Ä–æ—Ü–µ—Å—Å, –ø–æ–¥–¥–µ—Ä–∂–∫—É, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ..."
              {...form.register('positiveSource')}
            />
          </div>
        </div>
      )}
    </div>
  );

  const renderSelfEvaluation = () => (
    <div className="space-y-6">
      <h3 className="text-lg font-medium">–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞ –¥–Ω—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞</h3>
      
      <div className="space-y-4">
        <div>
          <Label>–ï—Å–ª–∏ –æ–≥–ª—è–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —ç–º–æ—Ü–∏—è–º–∏?</Label>
          <div className="mt-2">
            <Slider
              value={[form.watch('selfEvaluation') || 0]}
              onValueChange={(value) => form.setValue('selfEvaluation', value[0])}
              min={-5}
              max={5}
              step={1}
              className="w-full"
            />
            <div className="flex justify-between text-xs text-gray-500 mt-2">
              <span>–°–æ–≤—Å–µ–º –Ω–µ —Å–ø—Ä–∞–≤–ª—è–ª—Å—è -5</span>
              <span>–û—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–ª—Å—è +5</span>
            </div>
          </div>
        </div>

        <div className="space-y-2">
          <Label>–ß—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–≥–ª–æ –∏–ª–∏ –∫–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å?</Label>
          <Input
            placeholder="–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞..."
            {...form.register('gratitude')}
          />
        </div>
      </div>
    </div>
  );

  const renderRecommendations = () => (
    <div className="space-y-6">
      <h3 className="text-lg font-medium">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–±—è</h3>
      
      {recommendations.length > 0 ? (
        <div className="space-y-3">
          {recommendations.map((recommendation, index) => (
            <div key={index} className="p-4 bg-emerald-50 border border-emerald-200 rounded-lg">
              <p className="text-emerald-800">{recommendation}</p>
            </div>
          ))}
        </div>
      ) : (
        <div className="p-4 bg-gray-50 rounded-lg">
          <p className="text-gray-600">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</p>
        </div>
      )}

      <Button 
        onClick={() => form.handleSubmit(onSubmit)()} 
        className="w-full"
        size="lg"
      >
        <Save className="w-4 h-4 mr-2" />
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫
      </Button>
    </div>
  );

  const steps = [
    { number: 1, title: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', content: renderMoodBlock },
    { number: 2, title: '–≠–º–æ—Ü–∏–∏', content: renderEmotionsBlock },
    { number: 3, title: '–£—Ç–æ—á–Ω–µ–Ω–∏—è', content: renderClarifyingQuestions },
    { number: 4, title: '–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞', content: renderSelfEvaluation },
    { number: 5, title: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', content: renderRecommendations },
  ];

  return (
    <div className="max-w-4xl mx-auto p-6">
      <Card className="bg-white/70 backdrop-blur-lg border-0 shadow-xl">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Heart className="w-6 h-6 text-pink-500" />
            <span>–î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —ç–º–æ—Ü–∏–π</span>
          </CardTitle>
          
          {/* Progress bar */}
          <div className="w-full bg-gray-200 rounded-full h-2 mt-4">
            <div 
              className="bg-pink-500 h-2 rounded-full transition-all duration-300"
              style={{ width: `${(currentStep / steps.length) * 100}%` }}
            />
          </div>
          <p className="text-sm text-gray-600 mt-2">
            –®–∞–≥ {currentStep} –∏–∑ {steps.length}: {steps[currentStep - 1].title}
          </p>
        </CardHeader>

        <CardContent>
          <Form {...form}>
            <form className="space-y-6">
              {steps[currentStep - 1].content()}
              
              <div className="flex justify-between pt-6">
                <Button
                  type="button"
                  variant="outline"
                  onClick={handlePrev}
                  disabled={currentStep === 1}
                >
                  <ArrowLeft className="w-4 h-4 mr-2" />
                  –ù–∞–∑–∞–¥
                </Button>
                
                {currentStep < steps.length && (
                  <Button
                    type="button"
                    onClick={handleNext}
                  >
                    –î–∞–ª–µ–µ
                    <ArrowRight className="w-4 h-4 ml-2" />
                  </Button>
                )}
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
};

export default MoodDiary;
