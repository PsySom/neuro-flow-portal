
import React from 'react';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { Button } from '@/components/ui/button';
import { Save } from 'lucide-react';
import { UseFormReturn } from 'react-hook-form';
import { ProcrastinationDiaryData, ProcrastinationTask } from './types';
import { helpStrategies } from './constants';

interface Step4SolutionsProps {
  form: UseFormReturn<ProcrastinationDiaryData>;
  onSubmit: (data: ProcrastinationDiaryData) => void;
}

const Step4Solutions: React.FC<Step4SolutionsProps> = ({ form, onSubmit }) => {
  const tasks = form.watch('tasks') || [];

  const updateTask = (taskId: string, field: keyof ProcrastinationTask, value: any) => {
    const updatedTasks = tasks.map(task => 
      task.id === taskId ? { ...task, [field]: value } : task
    );
    form.setValue('tasks', updatedTasks);
  };

  const updateTaskArray = (taskId: string, field: keyof ProcrastinationTask, value: string, checked: boolean) => {
    const task = tasks.find(t => t.id === taskId);
    if (!task) return;
    
    const currentArray = (task[field] as string[]) || [];
    const updatedArray = checked 
      ? [...currentArray, value]
      : currentArray.filter(item => item !== value);
    
    updateTask(taskId, field, updatedArray);
  };

  return (
    <div className="space-y-6">
      <h3 className="text-lg font-medium">–°–∞–º–æ–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –≤—ã–≤–æ–¥—ã</h3>
      
      {tasks.map((task, index) => (
        <div key={task.id} className="border rounded-lg p-4 space-y-4">
          <h4 className="font-medium">–ó–∞–¥–∞—á–∞ {index + 1}: {task.description.slice(0, 50)}...</h4>

          <div>
            <Label>–ß—Ç–æ –º–æ–≥–ª–æ –±—ã —Ç–µ–±–µ –ø–æ–º–æ—á—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ª–µ–≥—á–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ç–∞–∫–∏–º –¥–µ–ª–∞–º? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)</Label>
            <div className="space-y-2 mt-2">
              {helpStrategies.map((strategy) => (
                <label key={strategy.value} className="flex items-center space-x-2">
                  <Checkbox
                    checked={task.helpStrategies.includes(strategy.value)}
                    onCheckedChange={(checked) => 
                      updateTaskArray(task.id, 'helpStrategies', strategy.value, !!checked)
                    }
                  />
                  <span>{strategy.label}</span>
                </label>
              ))}
            </div>
            {task.helpStrategies.includes('other') && (
              <Input
                placeholder="–û–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é..."
                value={task.helpStrategyOther || ''}
                onChange={(e) => updateTask(task.id, 'helpStrategyOther', e.target.value)}
                className="mt-2"
              />
            )}
          </div>

          <div>
            <Label>–ï—Å—Ç—å –ª–∏ —Å–µ–π—á–∞—Å —á—Ç–æ-—Ç–æ –Ω–µ–±–æ–ª—å—à–æ–µ, —á—Ç–æ —Ç—ã –≤—Å—ë-—Ç–∞–∫–∏ –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏?</Label>
            <div className="space-y-2 mt-2">
              <label className="flex items-center space-x-2">
                <input
                  type="radio"
                  checked={task.willDoSmallStep === true}
                  onChange={() => updateTask(task.id, 'willDoSmallStep', true)}
                  className="w-4 h-4"
                />
                <span>–î–∞</span>
              </label>
              <label className="flex items-center space-x-2">
                <input
                  type="radio"
                  checked={task.willDoSmallStep === false}
                  onChange={() => updateTask(task.id, 'willDoSmallStep', false)}
                  className="w-4 h-4"
                />
                <span>–ù–µ—Ç</span>
              </label>
            </div>
            {task.willDoSmallStep && (
              <Textarea
                placeholder="–û–ø–∏—à–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π —à–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≥–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å..."
                value={task.smallStep || ''}
                onChange={(e) => updateTask(task.id, 'smallStep', e.target.value)}
                className="mt-2"
              />
            )}
          </div>

          {task.hasCategoricalThoughts && (
            <div className="p-4 bg-blue-50 rounded-lg">
              <p className="text-blue-800 font-medium">
                üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ—Å–∫–æ–ª—å–∫—É —É –≤–∞—Å –±—ã–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω—ã–µ –º—ã—Å–ª–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ç–∞–∫–∂–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ —Ä–∞–±–æ—Ç—ã —Å –º—ã—Å–ª—è–º–∏ –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–π –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏.
              </p>
            </div>
          )}
        </div>
      ))}

      <div className="p-4 bg-green-50 rounded-lg">
        <p className="text-green-800 font-medium">
          üåü –í—ã –ø—Ä–æ–¥–µ–ª–∞–ª–∏ –≤–∞–∂–Ω—É—é —Ä–∞–±–æ—Ç—É –ø–æ –∞–Ω–∞–ª–∏–∑—É —Å–≤–æ–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏. –≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º. –ü–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ!
        </p>
      </div>

      <Button 
        onClick={() => form.handleSubmit(onSubmit)()} 
        className="w-full"
        size="lg"
      >
        <Save className="w-4 h-4 mr-2" />
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫
      </Button>
    </div>
  );
};

export default Step4Solutions;
