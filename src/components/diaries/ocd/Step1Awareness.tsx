
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';

interface Step1Props {
  data: {
    hasObsessions: boolean;
    obsessionNote: string;
    obsessionDescription: string;
    obsessionThemes: string[];
    obsessionThemeOther: string;
    obsessionDuration: string;
    anxietyLevel: number;
    obsessionSituations: string;
  };
  onDataChange: (field: string, value: any) => void;
  onNext: () => void;
}

const Step1Awareness: React.FC<Step1Props> = ({ data, onDataChange, onNext }) => {
  const themes = [
    '–°—Ç—Ä–∞—Ö –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è/–∑–∞—Ä–∞–∂–µ–Ω–∏—è',
    '–°–æ–º–Ω–µ–Ω–∏—è (–≤—ã–∫–ª—é—á–∏–ª –ª–∏ —è —Å–≤–µ—Ç, –∑–∞–∫—Ä—ã–ª –ª–∏ –¥–≤–µ—Ä—å –∏ —Ç.–¥.)',
    '–°—Ç—Ä–∞—Ö –ø—Ä–∏—á–∏–Ω–∏—Ç—å –≤—Ä–µ–¥ —Å–µ–±–µ –∏–ª–∏ –¥—Ä—É–≥–∏–º',
    '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º, —Å–∏–º–º–µ—Ç—Ä–∏—è, –ø–æ—Ä—è–¥–æ–∫',
    '–†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –∏–ª–∏ –º–æ—Ä–∞–ª—å–Ω—ã–µ –æ–ø–∞—Å–µ–Ω–∏—è',
    '–ù–∞–≤—è–∑—á–∏–≤—ã–µ —á–∏—Å–ª–∞, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è',
    '–î—Ä—É–≥–æ–µ'
  ];

  const durations = [
    { value: 'less-10', label: '–ú–µ–Ω–µ–µ 10 –º–∏–Ω—É—Ç' },
    { value: '10-30', label: '10‚Äì30 –º–∏–Ω—É—Ç' },
    { value: '30-60', label: '30‚Äì60 –º–∏–Ω—É—Ç' },
    { value: '1-2h', label: '1‚Äì2 —á–∞—Å–∞' },
    { value: 'more-2h', label: '–ë–æ–ª–µ–µ 2 —á–∞—Å–æ–≤' }
  ];

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader>
        <CardTitle className="text-xl font-semibold text-gray-900">
          –®–∞–≥ 1: –û—Å–æ–∑–Ω–∞–Ω–∏–µ –Ω–∞–≤—è–∑—á–∏–≤—ã—Ö –º—ã—Å–ª–µ–π
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div>
          <Label className="text-base font-medium mb-3 block">
            1. –ë—ã–ª–∏ –ª–∏ —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –Ω–∞–≤—è–∑—á–∏–≤—ã–µ –º—ã—Å–ª–∏ (–æ–±—Å–µ—Å—Å–∏–∏)?
          </Label>
          <RadioGroup
            value={data.hasObsessions ? 'yes' : 'no'}
            onValueChange={(value) => onDataChange('hasObsessions', value === 'yes')}
          >
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="yes" id="obs-yes" />
              <Label htmlFor="obs-yes">–î–∞</Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="no" id="obs-no" />
              <Label htmlFor="obs-no">–ù–µ—Ç</Label>
            </div>
          </RadioGroup>
          
          <div className="mt-4">
            <Label className="text-sm text-gray-600 mb-2 block">
              –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –æ—â—É—â–µ–Ω–∏—è —É—Ç—Ä–æ–º/–≤–µ—á–µ—Ä–æ–º:
            </Label>
            <Textarea
              value={data.obsessionNote}
              onChange={(e) => onDataChange('obsessionNote', e.target.value)}
              placeholder="–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏..."
              className="min-h-[80px]"
            />
          </div>
        </div>

        {data.hasObsessions && (
          <>
            <div>
              <Label className="text-base font-medium mb-3 block">
                1.1. –û–ø–∏—à–∏—Ç–µ –Ω–∞–≤—è–∑—á–∏–≤—ã–µ –º—ã—Å–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–Ω–∏–∫–∞–ª–∏
              </Label>
              <Textarea
                value={data.obsessionDescription}
                onChange={(e) => onDataChange('obsessionDescription', e.target.value)}
                placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—è–∑—á–∏–≤—ã–µ –º—ã—Å–ª–∏..."
                className="min-h-[100px]"
              />
            </div>

            <div>
              <Label className="text-base font-medium mb-3 block">
                1.2. –ö–∞–∫–∏–µ –∏–∑ —Ç–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã? (–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)
              </Label>
              <div className="space-y-3">
                {themes.map((theme, index) => (
                  <div key={index} className="flex items-center space-x-2">
                    <Checkbox
                      id={`theme-${index}`}
                      checked={data.obsessionThemes.includes(theme)}
                      onCheckedChange={(checked) => {
                        if (checked) {
                          onDataChange('obsessionThemes', [...data.obsessionThemes, theme]);
                        } else {
                          onDataChange('obsessionThemes', data.obsessionThemes.filter(t => t !== theme));
                        }
                      }}
                    />
                    <Label htmlFor={`theme-${index}`} className="text-sm">
                      {theme}
                    </Label>
                  </div>
                ))}
                {data.obsessionThemes.includes('–î—Ä—É–≥–æ–µ') && (
                  <Textarea
                    value={data.obsessionThemeOther}
                    onChange={(e) => onDataChange('obsessionThemeOther', e.target.value)}
                    placeholder="–û–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É..."
                    className="mt-2 min-h-[60px]"
                  />
                )}
              </div>
            </div>

            <div>
              <Label className="text-base font-medium mb-3 block">
                1.3. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–≥–æ–¥–Ω—è –∑–∞–Ω–∏–º–∞–ª–∏ —ç—Ç–∏ –º—ã—Å–ª–∏?
              </Label>
              <RadioGroup
                value={data.obsessionDuration}
                onValueChange={(value) => onDataChange('obsessionDuration', value)}
              >
                {durations.map((duration) => (
                  <div key={duration.value} className="flex items-center space-x-2">
                    <RadioGroupItem value={duration.value} id={duration.value} />
                    <Label htmlFor={duration.value}>{duration.label}</Label>
                  </div>
                ))}
              </RadioGroup>
            </div>

            <div>
              <Label className="text-base font-medium mb-3 block">
                1.4. –ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–≥–∏ –≤—ã –∏—Å–ø—ã—Ç–∞–ª–∏? (0 ‚Äî –Ω–µ—Ç —Ç—Ä–µ–≤–æ–≥–∏, 10 ‚Äî –º–∞–∫—Å–∏–º—É–º)
              </Label>
              <div className="flex items-center space-x-4">
                <input
                  type="range"
                  min="0"
                  max="10"
                  value={data.anxietyLevel}
                  onChange={(e) => onDataChange('anxietyLevel', parseInt(e.target.value))}
                  className="flex-1"
                />
                <span className="font-medium text-lg">{data.anxietyLevel}/10</span>
              </div>
            </div>

            <div>
              <Label className="text-base font-medium mb-3 block">
                1.5. –í –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö/–º–µ—Å—Ç–∞—Ö/—Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –ø–æ—è–≤–ª—è–ª–∏—Å—å –º—ã—Å–ª–∏?
              </Label>
              <Textarea
                value={data.obsessionSituations}
                onChange={(e) => onDataChange('obsessionSituations', e.target.value)}
                placeholder="–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏–∏..."
                className="min-h-[80px]"
              />
            </div>
          </>
        )}

        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h4 className="font-semibold text-blue-900 mb-2">üí° –°–æ–≤–µ—Ç:</h4>
          <p className="text-blue-800 text-sm">
            –ù–∞–≤—è–∑—á–∏–≤—ã–µ –º—ã—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –≤–∞—Å –∫–∞–∫ –ª–∏—á–Ω–æ—Å—Ç—å. –ü–æ–∑–≤–æ–ª—å—Ç–µ –∏–º –±—ã—Ç—å, –Ω–æ –Ω–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å —Å –≤—ã–≤–æ–¥–∞–º–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏. 
            –ò–Ω–æ–≥–¥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–±–ª—é–¥–∞—Ç—å –∑–∞ –º—ã—Å–ª—å—é, —á—Ç–æ–±—ã –æ–Ω–∞ –æ—Å–ª–∞–±–ª–∞.
          </p>
        </div>

        <div className="flex justify-end">
          <Button onClick={onNext}>
            –î–∞–ª–µ–µ
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default Step1Awareness;
