
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';

interface Step2Props {
  data: {
    hasCompulsions: boolean;
    compulsionDescription: string;
    compulsionTypes: string[];
    compulsionTypeOther: string;
    compulsionDuration: string;
    anxietyBefore: number;
    anxietyDuring: number;
    anxietyAfter: number;
    resistanceLevel: string;
    resistanceDescription: string;
  };
  onDataChange: (field: string, value: any) => void;
  onNext: () => void;
  onPrev: () => void;
}

const Step2Compulsions: React.FC<Step2Props> = ({ data, onDataChange, onNext, onPrev }) => {
  const compulsionTypes = [
    '–ú—ã—Ç—å—ë —Ä—É–∫, –ø—Ä–∏–Ω—è—Ç–∏–µ –¥—É—à–∞',
    '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤–µ—Ä–µ–π, –æ–∫–æ–Ω, —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–±–æ—Ä–æ–≤',
    '–°—á—ë—Ç, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, –ø—Ä–æ–≥–æ–≤–∞—Ä–∏–≤–∞–Ω–∏–µ —Å–ª–æ–≤',
    '–†–∞—Å–∫–ª–∞–¥–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É/—Å–∏–º–º–µ—Ç—Ä–∏–∏',
    '–ü–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–Ω–∏–µ, –ø—Ä–æ—Å—å–±—ã –æ–± —É–≤–µ—Ä–µ–Ω–∏–∏',
    '–ò–∑–±–µ–≥–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –º–µ—Å—Ç/–ø—Ä–µ–¥–º–µ—Ç–æ–≤',
    '–î—Ä—É–≥–æ–µ'
  ];

  const durations = [
    { value: 'less-10', label: '–ú–µ–Ω–µ–µ 10 –º–∏–Ω—É—Ç' },
    { value: '10-30', label: '10‚Äì30 –º–∏–Ω—É—Ç' },
    { value: '30-60', label: '30‚Äì60 –º–∏–Ω—É—Ç' },
    { value: '1-2h', label: '1‚Äì2 —á–∞—Å–∞' },
    { value: 'more-2h', label: '–ë–æ–ª–µ–µ 2 —á–∞—Å–æ–≤' }
  ];

  const resistanceLevels = [
    { value: 'fully', label: '–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é' },
    { value: 'partially', label: '–î–∞, —á–∞—Å—Ç–∏—á–Ω–æ' },
    { value: 'not-at-all', label: '–ù–µ—Ç, –Ω–µ —Å–º–æ–≥(–ª–∞)' }
  ];

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader>
        <CardTitle className="text-xl font-semibold text-gray-900">
          –®–∞–≥ 2: –†–∏—Ç—É–∞–ª—ã –∏ –∫–æ–º–ø—É–ª—å—Å–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div>
          <Label className="text-base font-medium mb-3 block">
            2. –í—ã–ø–æ–ª–Ω—è–ª–∏ –ª–∏ –≤—ã —Å–µ–≥–æ–¥–Ω—è —Ä–∏—Ç—É–∞–ª—ã –∏–ª–∏ –∫–æ–º–ø—É–ª—å—Å–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–∏ –º—ã—Å–ª–∏?
          </Label>
          <RadioGroup
            value={data.hasCompulsions ? 'yes' : 'no'}
            onValueChange={(value) => onDataChange('hasCompulsions', value === 'yes')}
          >
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="yes" id="comp-yes" />
              <Label htmlFor="comp-yes">–î–∞</Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="no" id="comp-no" />
              <Label htmlFor="comp-no">–ù–µ—Ç</Label>
            </div>
          </RadioGroup>
        </div>

        {!data.hasCompulsions && (
          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <h4 className="font-semibold text-green-900 mb-2">üéâ –°–æ–≤–µ—Ç:</h4>
            <p className="text-green-800 text-sm">
              –ö–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –≤—ã —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ—Å—å –æ—Ç —Ä–∏—Ç—É–∞–ª–∞ ‚Äî —ç—Ç–æ –º–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–±–µ–¥–∞! 
              –ü–æ–∑–≤–æ–ª—å—Ç–µ —Å–µ–±–µ –≥–æ—Ä–¥–∏—Ç—å—Å—è —ç—Ç–∏–º —à–∞–≥–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç—Ä–µ–≤–æ–≥–∞ –±—ã–ª–∞ —Å–∏–ª—å–Ω–æ–π.
            </p>
          </div>
        )}

        {data.hasCompulsions && (
          <>
            <div>
              <Label className="text-base font-medium mb-3 block">
                2.1. –û–ø–∏—à–∏—Ç–µ —Ä–∏—Ç—É–∞–ª—ã/–¥–µ–π—Å—Ç–≤–∏—è
              </Label>
              <Textarea
                value={data.compulsionDescription}
                onChange={(e) => onDataChange('compulsionDescription', e.target.value)}
                placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ä–∏—Ç—É–∞–ª—ã..."
                className="min-h-[100px]"
              />
            </div>

            <div>
              <Label className="text-base font-medium mb-3 block">
                2.2. –ö–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ —Ä–∏—Ç—É–∞–ª—ã –±—ã–ª–∏ —Å–µ–≥–æ–¥–Ω—è?
              </Label>
              <div className="space-y-3">
                {compulsionTypes.map((type, index) => (
                  <div key={index} className="flex items-center space-x-2">
                    <Checkbox
                      id={`comp-type-${index}`}
                      checked={data.compulsionTypes.includes(type)}
                      onCheckedChange={(checked) => {
                        if (checked) {
                          onDataChange('compulsionTypes', [...data.compulsionTypes, type]);
                        } else {
                          onDataChange('compulsionTypes', data.compulsionTypes.filter(t => t !== type));
                        }
                      }}
                    />
                    <Label htmlFor={`comp-type-${index}`} className="text-sm">
                      {type}
                    </Label>
                  </div>
                ))}
                {data.compulsionTypes.includes('–î—Ä—É–≥–æ–µ') && (
                  <Textarea
                    value={data.compulsionTypeOther}
                    onChange={(e) => onDataChange('compulsionTypeOther', e.target.value)}
                    placeholder="–û–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ä–∏—Ç—É–∞–ª–∞..."
                    className="mt-2 min-h-[60px]"
                  />
                )}
              </div>
            </div>

            <div>
              <Label className="text-base font-medium mb-3 block">
                2.3. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è–ª–∏ —Ä–∏—Ç—É–∞–ª—ã?
              </Label>
              <RadioGroup
                value={data.compulsionDuration}
                onValueChange={(value) => onDataChange('compulsionDuration', value)}
              >
                {durations.map((duration) => (
                  <div key={duration.value} className="flex items-center space-x-2">
                    <RadioGroupItem value={duration.value} id={`comp-${duration.value}`} />
                    <Label htmlFor={`comp-${duration.value}`}>{duration.label}</Label>
                  </div>
                ))}
              </RadioGroup>
            </div>

            <div>
              <Label className="text-base font-medium mb-3 block">
                2.4. –û—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–≥–∏:
              </Label>
              <div className="space-y-4">
                <div>
                  <Label className="text-sm mb-2 block">–î–æ —Ä–∏—Ç—É–∞–ª–∞:</Label>
                  <div className="flex items-center space-x-4">
                    <input
                      type="range"
                      min="0"
                      max="10"
                      value={data.anxietyBefore}
                      onChange={(e) => onDataChange('anxietyBefore', parseInt(e.target.value))}
                      className="flex-1"
                    />
                    <span className="font-medium">{data.anxietyBefore}/10</span>
                  </div>
                </div>
                <div>
                  <Label className="text-sm mb-2 block">–í–æ –≤—Ä–µ–º—è:</Label>
                  <div className="flex items-center space-x-4">
                    <input
                      type="range"
                      min="0"
                      max="10"
                      value={data.anxietyDuring}
                      onChange={(e) => onDataChange('anxietyDuring', parseInt(e.target.value))}
                      className="flex-1"
                    />
                    <span className="font-medium">{data.anxietyDuring}/10</span>
                  </div>
                </div>
                <div>
                  <Label className="text-sm mb-2 block">–ü–æ—Å–ª–µ:</Label>
                  <div className="flex items-center space-x-4">
                    <input
                      type="range"
                      min="0"
                      max="10"
                      value={data.anxietyAfter}
                      onChange={(e) => onDataChange('anxietyAfter', parseInt(e.target.value))}
                      className="flex-1"
                    />
                    <span className="font-medium">{data.anxietyAfter}/10</span>
                  </div>
                </div>
              </div>
            </div>

            <div>
              <Label className="text-base font-medium mb-3 block">
                2.5. –£–¥–∞–ª–æ—Å—å –ª–∏ –≤–∞–º —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è—Ç—å—Å—è —Ä–∏—Ç—É–∞–ª—É?
              </Label>
              <RadioGroup
                value={data.resistanceLevel}
                onValueChange={(value) => onDataChange('resistanceLevel', value)}
              >
                {resistanceLevels.map((level) => (
                  <div key={level.value} className="flex items-center space-x-2">
                    <RadioGroupItem value={level.value} id={level.value} />
                    <Label htmlFor={level.value}>{level.label}</Label>
                  </div>
                ))}
              </RadioGroup>
              
              {data.resistanceLevel && (
                <div className="mt-4">
                  <Textarea
                    value={data.resistanceDescription}
                    onChange={(e) => onDataChange('resistanceDescription', e.target.value)}
                    placeholder={
                      data.resistanceLevel === 'not-at-all' 
                        ? "–û–ø–∏—à–∏—Ç–µ, –ø–æ—á–µ–º—É..." 
                        : "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø–æ–º–æ–≥–ª–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è—Ç—å—Å—è..."
                    }
                    className="min-h-[80px]"
                  />
                </div>
              )}
            </div>
          </>
        )}

        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h4 className="font-semibold text-blue-900 mb-2">üí° –°–æ–≤–µ—Ç:</h4>
          <p className="text-blue-800 text-sm">
            –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ä–∏—Ç—É–∞–ª–∞ ‚Äî —ç—Ç–æ –Ω–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ! 
            –£—á–∏—Ç–µ—Å—å –∑–∞–º–µ—á–∞—Ç—å –º–∞–ª–µ–π—à–∏–µ –º–æ–º–µ–Ω—Ç—ã, –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç—è –±—ã –Ω–µ–Ω–∞–¥–æ–ª–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –∏ –∑–∞–¥—É–º–∞–ª–∏—Å—å. –≠—Ç–æ —É–∂–µ —Ä–æ—Å—Ç!
          </p>
        </div>

        <div className="flex justify-between">
          <Button variant="outline" onClick={onPrev}>
            –ù–∞–∑–∞–¥
          </Button>
          <Button onClick={onNext}>
            –î–∞–ª–µ–µ
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default Step2Compulsions;
