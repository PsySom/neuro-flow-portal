
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { Slider } from '@/components/ui/slider';
import { Sunrise, Sun, Moon } from 'lucide-react';
import { DepressionCareDiaryData } from './types';

interface Step1DailyCareProps {
  data: DepressionCareDiaryData;
  onDataChange: (field: string, value: any) => void;
  onNext: () => void;
}

const Step1DailyCare: React.FC<Step1DailyCareProps> = ({ data, onDataChange, onNext }) => {
  const bodyStateOptions = [
    '–õ–µ–≥–∫–æ—Å—Ç—å –∏ —ç–Ω–µ—Ä–≥–∏—è', '–ü—Ä–∏—è—Ç–Ω–∞—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ—Å—Ç—å', '–û–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
    '–£—Å—Ç–∞–ª–æ—Å—Ç—å, –Ω–æ —Ç–µ—Ä–ø–∏–º–∞—è', '–¢—è–∂–µ—Å—Ç—å –≤ —Ç–µ–ª–µ', '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏–ª–∏ –±–æ–ª—å'
  ];

  const bodyNeedsOptions = [
    '–ú—è–≥–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ', '–ë–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞', '–ü–∏—Ç–∞–Ω–∏–µ', '–¢–µ–ø–ª–æ',
    '–°–≤–µ–∂–∏–π –≤–æ–∑–¥—É—Ö', '–¢–∏—à–∏–Ω–∞', '–û–±—ä—è—Ç–∏—è', '–ù–µ –∑–Ω–∞—é, –∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ'
  ];

  const dailyIntentionsOptions = [
    '–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ (3 –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏)',
    '–•–æ—Ç—è –±—ã 10 –º–∏–Ω—É—Ç –¥–≤–∏–∂–µ–Ω–∏—è (–ø—Ä–æ–≥—É–ª–∫–∞, –∑–∞—Ä—è–¥–∫–∞, —Ç–∞–Ω—Ü—ã)',
    '–í—Ä–µ–º—è –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ',
    '–û–±—â–µ–Ω–∏–µ —Å –±–ª–∏–∑–∫–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º',
    '–ß—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ –¥–ª—è –¥—É—à–∏',
    '–î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ—Ç–¥—ã—Ö'
  ];

  const emotionalWeatherOptions = [
    '–°–æ–ª–Ω–µ—á–Ω–æ –∏ —è—Å–Ω–æ', '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å', '–õ–µ–≥–∫–∞—è –¥—ã–º–∫–∞',
    '–ü–∞—Å–º—É—Ä–Ω–æ, –Ω–æ —Å–ø–æ–∫–æ–π–Ω–æ', '–ú–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥–∏–∫', '–ì—Ä–æ–∑–∞, –Ω–æ –æ–Ω–∞ –ø—Ä–æ–π–¥–µ—Ç',
    '–¢—É–º–∞–Ω, –ø–ª–æ—Ö–æ –≤–∏–¥–Ω–æ', '–®—Ç–∏–ª—å, –≤—Å–µ –∑–∞—Ç–∏—Ö–ª–æ'
  ];

  const activityFeelingOptions = [
    '–ü—Ä–∏—è—Ç–Ω–æ –∏ –ª–µ–≥–∫–æ', '–ù–æ—Ä–º–∞–ª—å–Ω–æ, –æ–±—ã—á–Ω–æ', '–ù–µ–º–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–≥–∞–ª–æ',
    '–°–ª–æ–∂–Ω–æ, –Ω–æ —Å–ø—Ä–∞–≤–ª—è—é—Å—å', '–û—á–µ–Ω—å —Ç—è–∂–µ–ª–æ'
  ];

  const avoidanceBehaviorsOptions = [
    '–ó–∞–≤–∏—Å–∞–Ω–∏–µ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ/—Å–æ—Ü—Å–µ—Ç—è—Ö –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ',
    '–ü–µ—Ä–µ–µ–¥–∞–Ω–∏–µ –∏–ª–∏, –Ω–∞–æ–±–æ—Ä–æ—Ç, –∑–∞–±—ã–≤–∞–Ω–∏–µ –ø–æ–µ—Å—Ç—å',
    '–û—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª/–∞',
    '–ñ–∞–ª–æ–±—ã –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö —Å –±–ª–∏–∑–∫–∏–º–∏',
    '–ñ–µ–ª–∞–Ω–∏–µ —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è –∏ –Ω–∏ —Å –∫–µ–º –Ω–µ –æ–±—â–∞—Ç—å—Å—è',
    '–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—é ‚Äî –¥–µ–ª–∞—é —á—Ç–æ —É–≥–æ–¥–Ω–æ, —Ç–æ–ª—å–∫–æ –Ω–µ –≤–∞–∂–Ω–æ–µ'
  ];

  const basicNeedsOptions = [
    '–ó–∞–≤—Ç—Ä–∞–∫', '–û–±–µ–¥', '–£–∂–∏–Ω',
    '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã (–Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è—è —Å–µ–±—è)',
    '–•–æ—Ç—è –±—ã –Ω–µ–º–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è',
    '–°–≤–µ–∂–∏–π –≤–æ–∑–¥—É—Ö (–¥–∞–∂–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–∫–Ω–æ)',
    '–û–±—â–µ–Ω–∏–µ —Å –∂–∏–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º',
    '–í—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞'
  ];

  const sleepPreparationOptions = [
    '–ü—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É', '–£–±—Ä–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞',
    '–ü—Ä–∏–Ω—è—Ç—å —Ç–µ–ø–ª—ã–π –¥—É—à/–≤–∞–Ω–Ω—É', '–ü–æ—á–∏—Ç–∞—Ç—å —á—Ç–æ-—Ç–æ –ª–µ–≥–∫–æ–µ',
    '–°–¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤', '–í–∫–ª—é—á–∏—Ç—å —Å–ø–æ–∫–æ–π–Ω—É—é –º—É–∑—ã–∫—É',
    '–ó–∞–ø–∏—Å–∞—Ç—å –º—ã—Å–ª–∏, —á—Ç–æ–±—ã –Ω–µ –∫—Ä—É—Ç–∏–ª–∏—Å—å –≤ –≥–æ–ª–æ–≤–µ'
  ];

  const handleCheckboxChange = (field: string, value: string, checked: boolean) => {
    const currentValues = data[field as keyof DepressionCareDiaryData] as string[] || [];
    if (checked) {
      onDataChange(field, [...currentValues, value]);
    } else {
      onDataChange(field, currentValues.filter(item => item !== value));
    }
  };

  const handleMoodWordsChange = (index: number, value: string) => {
    const newWords = [...(data.moodWords || ['', '', ''])];
    newWords[index] = value;
    onDataChange('moodWords', newWords);
  };

  const handleSmallJoysChange = (index: number, value: string) => {
    const newJoys = [...(data.smallJoys || ['', '', ''])];
    newJoys[index] = value;
    onDataChange('smallJoys', newJoys);
  };

  return (
    <div className="space-y-8">
      {/* –£—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ */}
      <Card className="border-pink-200 bg-pink-50">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2 text-pink-800">
            <Sunrise className="w-6 h-6" />
            <span>üåÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –∫ –∂–∏–∑–Ω–∏</span>
          </CardTitle>
          <p className="text-sm text-pink-700">
            –ö–∞–∫ —Ç—ã –≤—Å—Ç—Ä–µ—á–∞–µ—à—å –Ω–æ–≤—ã–π –¥–µ–Ω—å? –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ ‚Äî —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ.
          </p>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–¥—ã—Ö–∞ */}
          <div className="bg-white dark:bg-gray-800 rounded-lg p-4 space-y-4">
            <h4 className="font-semibold text-gray-900">–ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–¥—ã—Ö–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</h4>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="bedtime">–í–æ —Å–∫–æ–ª—å–∫–æ —É–¥–∞–ª–æ—Å—å –∑–∞—Å–Ω—É—Ç—å –≤—á–µ—Ä–∞</Label>
                <Input
                  id="bedtime"
                  type="time"
                  value={data.bedtime}
                  onChange={(e) => onDataChange('bedtime', e.target.value)}
                />
              </div>
              
              <div>
                <Label htmlFor="wakeupTime">–í–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å–Ω—É–ª—Å—è/–ª–∞—Å—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ</Label>
                <Input
                  id="wakeupTime"
                  type="time"
                  value={data.wakeupTime}
                  onChange={(e) => onDataChange('wakeupTime', e.target.value)}
                />
              </div>
            </div>

            <div>
              <Label htmlFor="nightWakeups">–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–æ—Å—ã–ø–∞–ª—Å—è/–ª–∞—Å—å –Ω–æ—á—å—é</Label>
              <Input
                id="nightWakeups"
                type="number"
                min="0"
                value={data.nightWakeups}
                onChange={(e) => onDataChange('nightWakeups', parseInt(e.target.value) || 0)}
              />
            </div>

            <div>
              <Label>–ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ (1-–æ—á–µ–Ω—å –ø–ª–æ—Ö–æ, 10-–æ—Ç–ª–∏—á–Ω–æ): {data.sleepQuality}</Label>
              <Slider
                value={[data.sleepQuality]}
                onValueChange={(value) => onDataChange('sleepQuality', value[0])}
                max={10}
                min={1}
                step={1}
                className="mt-2"
              />
            </div>

            <div>
              <Label>–ß—É–≤—Å—Ç–≤—É–µ—à—å –ª–∏ —Å–µ–±—è –æ—Ç–¥–æ—Ö–Ω—É–≤—à–∏–º/–µ–π (1-—Å–æ–≤—Å–µ–º –Ω–µ—Ç, 10-–ø–æ–ª–Ω–æ—Å—Ç—å—é): {data.restedness}</Label>
              <Slider
                value={[data.restedness]}
                onValueChange={(value) => onDataChange('restedness', value[0])}
                max={10}
                min={1}
                step={1}
                className="mt-2"
              />
            </div>

            <p className="text-sm text-gray-600 italic">
              –ï—Å–ª–∏ —Å–æ–Ω –±—ã–ª –±–µ—Å–ø–æ–∫–æ–π–Ω—ã–º, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –°–µ–≥–æ–¥–Ω—è –Ω–æ–≤—ã–π –¥–µ–Ω—å, –∏ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –ª—É—á—à–µ–º –æ—Ç–¥—ã—Ö–µ tonight.
            </p>
          </div>

          {/* –í—Å—Ç—Ä–µ—á–∞ —Å —Å–æ–±–æ–π —É—Ç—Ä–æ–º */}
          <div className="bg-white rounded-lg p-4 space-y-4">
            <h4 className="font-semibold text-gray-900">–í—Å—Ç—Ä–µ—á–∞ —Å —Å–æ–±–æ–π —É—Ç—Ä–æ–º</h4>
            
            <div>
              <Label>–ö–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–π—á–∞—Å –æ—â—É—â–∞–µ—à—å? (-10 –¥–æ +10): {data.morningMood}</Label>
              <Slider
                value={[data.morningMood]}
                onValueChange={(value) => onDataChange('morningMood', value[0])}
                max={10}
                min={-10}
                step={1}
                className="mt-2"
              />
            </div>

            <div>
              <Label>–¢—Ä–µ–º—è —Å–ª–æ–≤–∞–º–∏ –æ–ø–∏—à–∏ —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</Label>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-2 mt-2">
                {[0, 1, 2].map((index) => (
                  <Input
                    key={index}
                    placeholder={`–°–ª–æ–≤–æ ${index + 1}`}
                    value={data.moodWords[index] || ''}
                    onChange={(e) => handleMoodWordsChange(index, e.target.value)}
                  />
                ))}
              </div>
            </div>

            <div>
              <Label>–ö–∞–∫ —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è —Ç–≤–æ–µ —Ç–µ–ª–æ?</Label>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
                {bodyStateOptions.map((option) => (
                  <div key={option} className="flex items-center space-x-2">
                    <Checkbox
                      id={`bodyState-${option}`}
                      checked={data.bodyState.includes(option)}
                      onCheckedChange={(checked) => 
                        handleCheckboxChange('bodyState', option, checked as boolean)
                      }
                    />
                    <Label htmlFor={`bodyState-${option}`} className="text-sm">{option}</Label>
                  </div>
                ))}
              </div>
            </div>

            <div>
              <Label>–ß—Ç–æ —Å–µ–π—á–∞—Å –Ω—É–∂–Ω–æ —Ç–≤–æ–µ–º—É —Ç–µ–ª—É?</Label>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
                {bodyNeedsOptions.map((option) => (
                  <div key={option} className="flex items-center space-x-2">
                    <Checkbox
                      id={`bodyNeeds-${option}`}
                      checked={data.bodyNeeds.includes(option)}
                      onCheckedChange={(checked) => 
                        handleCheckboxChange('bodyNeeds', option, checked as boolean)
                      }
                    />
                    <Label htmlFor={`bodyNeeds-${option}`} className="text-sm">{option}</Label>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* –ù–∞–º–µ—Ä–µ–Ω–∏—è –Ω–∞ –¥–µ–Ω—å */}
          <div className="bg-white rounded-lg p-4 space-y-4">
            <h4 className="font-semibold text-gray-900">–ù–∞–º–µ—Ä–µ–Ω–∏—è –Ω–∞ –¥–µ–Ω—å</h4>
            <p className="text-sm text-gray-600">–ù–µ –ø–ª–∞–Ω—ã –∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –∞ –º—è–≥–∫–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ.</p>
            
            <div>
              <Label>–°–µ–≥–æ–¥–Ω—è —è —Ö–æ—Ç–µ–ª/–∞ –±—ã –ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ —á–µ—Ä–µ–∑:</Label>
              <div className="space-y-2 mt-2">
                {dailyIntentionsOptions.map((option) => (
                  <div key={option} className="flex items-center space-x-2">
                    <Checkbox
                      id={`intentions-${option}`}
                      checked={data.dailyIntentions.includes(option)}
                      onCheckedChange={(checked) => 
                        handleCheckboxChange('dailyIntentions', option, checked as boolean)
                      }
                    />
                    <Label htmlFor={`intentions-${option}`} className="text-sm">{option}</Label>
                  </div>
                ))}
              </div>
            </div>

            <div>
              <Label htmlFor="dailyJoy">–û–¥–Ω–∞ –º–∞–ª–µ–Ω—å–∫–∞—è —Ä–∞–¥–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é –ø–æ–¥–∞—Ä—é —Å–µ–±–µ —Å–µ–≥–æ–¥–Ω—è:</Label>
              <Textarea
                id="dailyJoy"
                value={data.dailyJoy}
                onChange={(e) => onDataChange('dailyJoy', e.target.value)}
                placeholder="–û–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Å–µ–±—è —Å–µ–≥–æ–¥–Ω—è..."
                className="mt-2"
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –î–Ω–µ–≤–Ω–æ–π —á–µ–∫–∏–Ω */}
      <Card className="border-yellow-200 bg-yellow-50">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2 text-yellow-800">
            <Sun className="w-6 h-6" />
            <span>üåû –î–Ω–µ–≤–Ω–æ–π —á–µ–∫–∏–Ω: –∫–∞–∫ –¥–µ–ª–∞ —É –º–æ–µ–π –¥—É—à–∏?</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="bg-white rounded-lg p-4 space-y-4">
            <div>
              <Label htmlFor="middayTime">–í—Ä–µ–º—è:</Label>
              <Input
                id="middayTime"
                type="time"
                value={data.middayTime}
                onChange={(e) => onDataChange('middayTime', e.target.value)}
                className="w-32"
              />
            </div>

            <div>
              <Label>–ö–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (-10 –¥–æ +10): {data.middayMood}</Label>
              <Slider
                value={[data.middayMood]}
                onValueChange={(value) => onDataChange('middayMood', value[0])}
                max={10}
                min={-10}
                step={1}
                className="mt-2"
              />
            </div>

            <div>
              <Label>–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å</Label>
              <p className="text-sm text-gray-600 mb-2">
                –ï—Å–ª–∏ –Ω–∞ —É–ª–∏—Ü–µ –¥–æ–∂–¥—å, —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ø–æ–≥–æ–¥–∞ –ø–ª–æ—Ö–∞—è ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫–∞—è –ø–æ–≥–æ–¥–∞. 
                –ß—Ç–æ —Å–µ–π—á–∞—Å "–ø–æ–≥–æ–¥–∞" –≤ —Ç–≤–æ–µ–π –¥—É—à–µ?
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                {emotionalWeatherOptions.map((option) => (
                  <div key={option} className="flex items-center space-x-2">
                    <input
                      type="radio"
                      id={`weather-${option}`}
                      name="emotionalWeather"
                      value={option}
                      checked={data.emotionalWeather === option}
                      onChange={(e) => onDataChange('emotionalWeather', e.target.value)}
                    />
                    <Label htmlFor={`weather-${option}`} className="text-sm">{option}</Label>
                  </div>
                ))}
              </div>
            </div>

            <div>
              <Label htmlFor="currentActivity">–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è/–∑–∞–Ω–∏–º–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞:</Label>
              <Textarea
                id="currentActivity"
                value={data.currentActivity}
                onChange={(e) => onDataChange('currentActivity', e.target.value)}
                className="mt-2"
              />
            </div>

            <div>
              <Label>–≠—Ç–æ –±—ã–ª–æ:</Label>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
                {activityFeelingOptions.map((option) => (
                  <div key={option} className="flex items-center space-x-2">
                    <input
                      type="radio"
                      id={`feeling-${option}`}
                      name="activityFeeling"
                      value={option}
                      checked={data.activityFeeling === option}
                      onChange={(e) => onDataChange('activityFeeling', e.target.value)}
                    />
                    <Label htmlFor={`feeling-${option}`} className="text-sm">{option}</Label>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–±–µ–≥–∞—é—â–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è */}
          <div className="bg-white rounded-lg p-4 space-y-4">
            <h4 className="font-semibold text-gray-900">–ù–µ–±–æ–ª—å—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–±–µ–≥–∞—é—â–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è</h4>
            <p className="text-sm text-gray-600">–ë–µ–∑ —Å–∞–º–æ–∫—Ä–∏—Ç–∏–∫–∏, –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ—á–∞–µ–º. –ò–Ω–æ–≥–¥–∞ –∏–∑–±–µ–≥–∞–Ω–∏–µ ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –∑–∞—â–∏—Ç—ã.</p>
            
            <div>
              <Label>–ó–∞–º–µ—á–∞—é –ª–∏ —è —Å–µ–≥–æ–¥–Ω—è –∑–∞ —Å–æ–±–æ–π:</Label>
              <div className="space-y-2 mt-2">
                {avoidanceBehaviorsOptions.map((option) => (
                  <div key={option} className="flex items-center space-x-2">
                    <Checkbox
                      id={`avoidance-${option}`}
                      checked={data.avoidanceBehaviors.includes(option)}
                      onCheckedChange={(checked) => 
                        handleCheckboxChange('avoidanceBehaviors', option, checked as boolean)
                      }
                    />
                    <Label htmlFor={`avoidance-${option}`} className="text-sm">{option}</Label>
                  </div>
                ))}
              </div>
            </div>

            <div>
              <Label htmlFor="selfCareAction">
                –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Ç–º–µ—Ç–∏–ª/–∞ ‚Äî —ç—Ç–æ —Å–∏–≥–Ω–∞–ª, —á—Ç–æ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞. 
                –û–¥–Ω–æ –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:
              </Label>
              <Textarea
                id="selfCareAction"
                value={data.selfCareAction}
                onChange={(e) => onDataChange('selfCareAction', e.target.value)}
                className="mt-2"
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –í–µ—á–µ—Ä–Ω–µ–µ –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ */}
      <Card className="border-indigo-200 bg-indigo-50">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2 text-indigo-800">
            <Moon className="w-6 h-6" />
            <span>üåô –í–µ—á–µ—Ä–Ω–µ–µ –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤</span>
          </CardTitle>
          <p className="text-sm text-indigo-700">
            –í—Ä–µ–º—è —Å—É—Ç–æ–∫, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ —Å –¥–æ–±—Ä–æ—Ç–æ–π –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –ø—Ä–æ–∂–∏—Ç—ã–π –¥–µ–Ω—å.
          </p>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="bg-white rounded-lg p-4 space-y-4">
            <h4 className="font-semibold text-gray-900">–ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å –≤ —Ü–µ–ª–æ–º</h4>
            
            <div>
              <Label>–û–±—â–µ–µ –æ—â—É—â–µ–Ω–∏–µ –æ—Ç –¥–Ω—è (-10 –¥–æ +10): {data.overallDayRating}</Label>
              <Slider
                value={[data.overallDayRating]}
                onValueChange={(value) => onDataChange('overallDayRating', value[0])}
                max={10}
                min={-10}
                step={1}
                className="mt-2"
              />
            </div>

            <div>
              <Label htmlFor="mostDifficult">–°–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–æ:</Label>
              <Textarea
                id="mostDifficult"
                value={data.mostDifficult}
                onChange={(e) => onDataChange('mostDifficult', e.target.value)}
                className="mt-2"
              />
            </div>

            <div>
              <Label htmlFor="mostPleasant">–°–∞–º–æ–µ –ø—Ä–∏—è—Ç–Ω–æ–µ –∏–ª–∏ —Ö–æ—Ç—è –±—ã –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ:</Label>
              <Textarea
                id="mostPleasant"
                value={data.mostPleasant}
                onChange={(e) => onDataChange('mostPleasant', e.target.value)}
                className="mt-2"
              />
            </div>

            <div>
              <Label htmlFor="selfPraise">–ó–∞ —á—Ç–æ –º–æ–≥—É —Å–µ–±—è —Ç–∏—Ö–æ–Ω—å–∫–æ –ø–æ—Ö–≤–∞–ª–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è:</Label>
              <Textarea
                id="selfPraise"
                value={data.selfPraise}
                onChange={(e) => onDataChange('selfPraise', e.target.value)}
                placeholder="–î–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–ª/–∞ —Å –∫—Ä–æ–≤–∞—Ç–∏ ‚Äî —ç—Ç–æ —É–∂–µ –ø–æ–¥–≤–∏–≥ –ø—Ä–∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏."
                className="mt-2"
              />
            </div>
          </div>

          {/* –û—Ö–æ—Ç–∞ –∑–∞ –∫–ª—É–±–Ω–∏—á–∫–∞–º–∏ */}
          <div className="bg-white rounded-lg p-4 space-y-4">
            <h4 className="font-semibold text-gray-900">–û—Ö–æ—Ç–∞ –∑–∞ "–∫–ª—É–±–Ω–∏—á–∫–∞–º–∏" ‚Äî –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —Ä–∞–¥–æ—Å—Ç—è–º–∏</h4>
            <p className="text-sm text-gray-600">
              –î–∞–∂–µ –≤ —Å–ª–æ–∂–Ω—ã–π –¥–µ–Ω—å –µ—Å—Ç—å –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å –∏ –æ—Ü–µ–Ω–∏—Ç—å.
            </p>
            
            <div>
              <Label>3 –º–∞–ª–µ–Ω—å–∫–∏–µ –ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è (–ª—é–±—ã–µ –º–µ–ª–æ—á–∏):</Label>
              <p className="text-xs text-gray-500 mb-2">
                –ü—Ä–∏–º–µ—Ä—ã: —Ç–µ–ø–ª—ã–π —á–∞–π, –º—è–≥–∫–∏–π –ø–ª–µ–¥, —É–ª—ã–±–∫–∞ –ø—Ä–æ—Ö–æ–∂–µ–≥–æ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å –≤ –∫–Ω–∏–≥–µ, 
                –∫—Ä–∞—Å–∏–≤—ã–π —Ü–≤–µ—Ç –Ω–µ–±–∞, —É–¥–æ–±–Ω–∞—è –ø–æ–∑–∞, –ø—Ä–∏—è—Ç–Ω—ã–π –∑–∞–ø–∞—Ö, –º–æ–º–µ–Ω—Ç —Ç–∏—à–∏–Ω—ã.
              </p>
              <div className="space-y-2">
                {[0, 1, 2].map((index) => (
                  <Input
                    key={index}
                    placeholder={`–ü—Ä–∏—è—Ç–Ω–æ—Å—Ç—å ${index + 1}`}
                    value={data.smallJoys[index] || ''}
                    onChange={(e) => handleSmallJoysChange(index, e.target.value)}
                  />
                ))}
              </div>
            </div>
          </div>

          {/* –ó–∞–±–æ—Ç–∞ –æ –±–∞–∑–æ–≤—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö */}
          <div className="bg-white rounded-lg p-4 space-y-4">
            <h4 className="font-semibold text-gray-900">–ó–∞–±–æ—Ç–∞ –æ –±–∞–∑–æ–≤—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö</h4>
            
            <div>
              <Label>–°–µ–≥–æ–¥–Ω—è —É –º–µ–Ω—è –±—ã–ª–æ:</Label>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
                {basicNeedsOptions.map((option) => (
                  <div key={option} className="flex items-center space-x-2">
                    <Checkbox
                      id={`basicNeeds-${option}`}
                      checked={data.basicNeedsCovered.includes(option)}
                      onCheckedChange={(checked) => 
                        handleCheckboxChange('basicNeedsCovered', option, checked as boolean)
                      }
                    />
                    <Label htmlFor={`basicNeeds-${option}`} className="text-sm">{option}</Label>
                  </div>
                ))}
              </div>
              <p className="text-sm text-gray-600 mt-2 italic">
                –ö–∞–∂–¥–∞—è –≥–∞–ª–æ—á–∫–∞ ‚Äî —ç—Ç–æ –∞–∫—Ç –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –∑–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å.
              </p>
            </div>
          </div>

          {/* –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–¥—ã—Ö—É */}
          <div className="bg-white rounded-lg p-4 space-y-4">
            <h4 className="font-semibold text-gray-900">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–¥—ã—Ö—É</h4>
            
            <div>
              <Label>–ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å —Å–µ–≥–æ–¥–Ω—è –Ω–æ—á—å—é:</Label>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
                {sleepPreparationOptions.map((option) => (
                  <div key={option} className="flex items-center space-x-2">
                    <Checkbox
                      id={`sleepPrep-${option}`}
                      checked={data.sleepPreparation.includes(option)}
                      onCheckedChange={(checked) => 
                        handleCheckboxChange('sleepPreparation', option, checked as boolean)
                      }
                    />
                    <Label htmlFor={`sleepPrep-${option}`} className="text-sm">{option}</Label>
                  </div>
                ))}
              </div>
            </div>

            <div>
              <Label htmlFor="plannedBedtime">–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É:</Label>
              <Input
                id="plannedBedtime"
                type="time"
                value={data.plannedBedtime}
                onChange={(e) => onDataChange('plannedBedtime', e.target.value)}
                className="w-32 mt-2"
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Navigation */}
      <div className="flex justify-end">
        <Button onClick={onNext} className="bg-pink-600 hover:bg-pink-700">
          –î–∞–ª–µ–µ: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        </Button>
      </div>
    </div>
  );
};

export default Step1DailyCare;
