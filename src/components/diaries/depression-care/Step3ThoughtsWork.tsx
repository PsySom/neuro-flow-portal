
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Textarea } from '@/components/ui/textarea';
import { Slider } from '@/components/ui/slider';
import { ArrowLeft } from 'lucide-react';
import { DepressionCareDiaryData } from './types';

interface Step3ThoughtsWorkProps {
  data: DepressionCareDiaryData;
  onDataChange: (field: string, value: any) => void;
  onNext: () => void;
  onPrev: () => void;
}

const Step3ThoughtsWork: React.FC<Step3ThoughtsWorkProps> = ({ 
  data, 
  onDataChange, 
  onNext, 
  onPrev 
}) => {
  const handleCheckboxChange = (field: string, value: string, checked: boolean) => {
    const currentValues = data[field] || [];
    if (checked) {
      onDataChange(field, [...currentValues, value]);
    } else {
      onDataChange(field, currentValues.filter((item: string) => item !== value));
    }
  };

  return (
    <div className="space-y-8">
      <Card className="border-green-200 bg-green-50">
        <CardHeader>
          <CardTitle className="text-green-800">
            üß† –†–∞–±–æ—Ç–∞ —Å –º—ã—Å–ª—è–º–∏ –∏ —É–±–µ–∂–¥–µ–Ω–∏—è–º–∏
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <p className="text-sm text-green-700">
            –î–µ–ø—Ä–µ—Å—Å–∏—è —á–∞—Å—Ç–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ –º—ã—Å–ª—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∫–∞–∂—É—Ç—Å—è –ø—Ä–∞–≤–¥–æ–π. 
            –ù–æ –º—ã—Å–ª–∏ ‚Äî —ç—Ç–æ –Ω–µ —Ñ–∞–∫—Ç—ã.
          </p>

          {/* –ó–∞–º–µ—á–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º—ã—Å–ª–µ–π */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-green-900">
              –ó–∞–º–µ—á–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º—ã—Å–ª–µ–π
            </h3>

            <div>
              <Label className="text-base font-medium">–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏ –æ —Å–µ–±–µ</Label>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
                {[
                  '–Ø –Ω–∏–∫—á–µ–º–Ω—ã–π/–∞—è',
                  '–£ –º–µ–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è',
                  '–Ø –ø–ª–æ—Ö–∞—è –º–∞—Ç—å/–æ—Ç–µ—Ü/–¥—Ä—É–≥',
                  '–°–æ –º–Ω–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫',
                  '–Ø –æ–±—É–∑–∞ –¥–ª—è –±–ª–∏–∑–∫–∏—Ö',
                  '–Ø –Ω–µ –∑–∞—Å–ª—É–∂–∏–≤–∞—é —Ö–æ—Ä–æ—à–µ–≥–æ'
                ].map((thought) => (
                  <div key={thought} className="flex items-center space-x-2">
                    <Checkbox
                      id={thought}
                      checked={data.negativeThoughtsAboutSelf?.includes(thought) || false}
                      onCheckedChange={(checked) => 
                        handleCheckboxChange('negativeThoughtsAboutSelf', thought, checked as boolean)
                      }
                    />
                    <Label htmlFor={thought} className="text-sm">{thought}</Label>
                  </div>
                ))}
              </div>
              <div className="mt-2">
                <Label>–î—Ä—É–≥–∏–µ –º—ã—Å–ª–∏ –æ —Å–µ–±–µ</Label>
                <Input
                  value={data.otherNegativeThoughtsAboutSelf || ''}
                  onChange={(e) => onDataChange('otherNegativeThoughtsAboutSelf', e.target.value)}
                  placeholder="–û–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏ –æ —Å–µ–±–µ..."
                  className="mt-1"
                />
              </div>
            </div>

            <div>
              <Label className="text-base font-medium">–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏ –æ –±—É–¥—É—â–µ–º</Label>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
                {[
                  '–ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è',
                  '–ú–Ω–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ç–∞–Ω–µ—Ç –ª—É—á—à–µ',
                  '–≠—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è',
                  '–í—Å–µ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Ö—É–∂–µ',
                  '–Ø –Ω–µ —Å–ø—Ä–∞–≤–ª—é—Å—å',
                  '–Ø –Ω–µ —Å–º–æ–≥—É –±—ã—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–º/–æ–π'
                ].map((thought) => (
                  <div key={thought} className="flex items-center space-x-2">
                    <Checkbox
                      id={thought}
                      checked={data.negativeThoughtsAboutFuture?.includes(thought) || false}
                      onCheckedChange={(checked) => 
                        handleCheckboxChange('negativeThoughtsAboutFuture', thought, checked as boolean)
                      }
                    />
                    <Label htmlFor={thought} className="text-sm">{thought}</Label>
                  </div>
                ))}
              </div>
            </div>

            <div>
              <Label className="text-base font-medium">–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏ –æ –º–∏—Ä–µ</Label>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
                {[
                  '–ù–∏–∫–æ–º—É –Ω–µ–ª—å–∑—è –¥–æ–≤–µ—Ä—è—Ç—å',
                  '–ú–∏—Ä –∂–µ—Å—Ç–æ–∫–∏–π',
                  '–í—Å–µ –ø–ª–æ—Ö–æ',
                  '–ù–∏–∫—Ç–æ –º–µ–Ω—è –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç',
                  '–õ—é–¥—è–º –≤—Å–µ —Ä–∞–≤–Ω–æ',
                  '–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ –Ω–µ—Ç'
                ].map((thought) => (
                  <div key={thought} className="flex items-center space-x-2">
                    <Checkbox
                      id={thought}
                      checked={data.negativeThoughtsAboutWorld?.includes(thought) || false}
                      onCheckedChange={(checked) => 
                        handleCheckboxChange('negativeThoughtsAboutWorld', thought, checked as boolean)
                      }
                    />
                    <Label htmlFor={thought} className="text-sm">{thought}</Label>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* –†–∞–±–æ—Ç–∞ —Å —Å–∞–º–æ–π –±–µ—Å–ø–æ–∫–æ—è—â–µ–π –º—ã—Å–ª—å—é */}
          <Card className="border-yellow-200 bg-yellow-50">
            <CardHeader>
              <CardTitle className="text-yellow-800 text-lg">
                –†–∞–±–æ—Ç–∞ —Å —Å–∞–º–æ–π –±–µ—Å–ø–æ–∫–æ—è—â–µ–π –º—ã—Å–ª—å—é
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –º—ã—Å–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º—É—á–∞–µ—Ç</Label>
                <Textarea
                  value={data.mostDistressingThought || ''}
                  onChange={(e) => onDataChange('mostDistressingThought', e.target.value)}
                  placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–∞–º—É—é –±–µ—Å–ø–æ–∫–æ—è—â—É—é –º—ã—Å–ª—å..."
                  className="mt-2"
                />
              </div>

              <div>
                <Label>–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ –≤–µ—Ä—é –≤ —ç—Ç—É –º—ã—Å–ª—å (0-100%)</Label>
                <div className="mt-2 space-y-2">
                  <Slider
                    value={[data.beliefInThought || 50]}
                    onValueChange={(value) => onDataChange('beliefInThought', value[0])}
                    min={0}
                    max={100}
                    step={5}
                    className="w-full"
                  />
                  <div className="text-center text-sm text-gray-600">
                    –£—Ä–æ–≤–µ–Ω—å —É–±–µ–∂–¥–µ–Ω–Ω–æ—Å—Ç–∏: {data.beliefInThought || 50}%
                  </div>
                </div>
              </div>

              <div>
                <Label>–ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç–∞ –º—ã—Å–ª—å</Label>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-2 mt-2">
                  {[
                    '–ì—Ä—É—Å—Ç—å',
                    '–¢—Ä–µ–≤–æ–≥–∞',
                    '–ó–ª–æ—Å—Ç—å',
                    '–°—Ç—ã–¥',
                    '–ë–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å',
                    '–í–∏–Ω–∞',
                    '–°—Ç—Ä–∞—Ö'
                  ].map((emotion) => (
                    <div key={emotion} className="flex items-center space-x-2">
                      <Checkbox
                        id={emotion}
                        checked={data.thoughtEmotions?.includes(emotion) || false}
                        onCheckedChange={(checked) => 
                          handleCheckboxChange('thoughtEmotions', emotion, checked as boolean)
                        }
                      />
                      <Label htmlFor={emotion} className="text-sm">{emotion}</Label>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <Label>–§–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ü–û–î–¢–í–ï–†–ñ–î–ê–Æ–¢ —ç—Ç—É –º—ã—Å–ª—å</Label>
                <Textarea
                  value={data.supportingEvidence || ''}
                  onChange={(e) => onDataChange('supportingEvidence', e.target.value)}
                  placeholder="–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Ñ–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —ç—Ç—É –º—ã—Å–ª—å..."
                  className="mt-2"
                />
              </div>

              <div>
                <Label>–§–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ü–†–û–¢–ò–í–û–†–ï–ß–ê–¢ —ç—Ç–æ–π –º—ã—Å–ª–∏</Label>
                <Textarea
                  value={data.contradictingEvidence || ''}
                  onChange={(e) => onDataChange('contradictingEvidence', e.target.value)}
                  placeholder="–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —Ñ–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç —ç—Ç–æ–π –º—ã—Å–ª–∏..."
                  className="mt-2"
                />
              </div>

              <div>
                <Label>–ß—Ç–æ –±—ã —è —Å–∫–∞–∑–∞–ª/–∞ —Ö–æ—Ä–æ—à–µ–º—É –¥—Ä—É–≥—É, –µ—Å–ª–∏ –±—ã –æ–Ω –¥—É–º–∞–ª —Ç–∞–∫ –æ —Å–µ–±–µ</Label>
                <Textarea
                  value={data.friendAdvice || ''}
                  onChange={(e) => onDataChange('friendAdvice', e.target.value)}
                  placeholder="–ö–∞–∫–æ–π —Å–æ–≤–µ—Ç –¥–∞–ª–∏ –±—ã –¥—Ä—É–≥—É..."
                  className="mt-2"
                />
              </div>

              <div>
                <Label>–ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∏ –¥–æ–±—Ä–∞—è –º—ã—Å–ª—å</Label>
                <Textarea
                  value={data.balancedThought || ''}
                  onChange={(e) => onDataChange('balancedThought', e.target.value)}
                  placeholder="–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º—ã—Å–ª—å..."
                  className="mt-2"
                />
              </div>

              <div>
                <Label>–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä—é –≤ —ç—Ç—É –Ω–æ–≤—É—é –º—ã—Å–ª—å (0-100%)</Label>
                <div className="mt-2 space-y-2">
                  <Slider
                    value={[data.beliefInNewThought || 50]}
                    onValueChange={(value) => onDataChange('beliefInNewThought', value[0])}
                    min={0}
                    max={100}
                    step={5}
                    className="w-full"
                  />
                  <div className="text-center text-sm text-gray-600">
                    –£—Ä–æ–≤–µ–Ω—å —É–±–µ–∂–¥–µ–Ω–Ω–æ—Å—Ç–∏: {data.beliefInNewThought || 50}%
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* –†–∞–±–æ—Ç–∞ —Å —Ü–∏–∫–ª–∞–º–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-green-900">
              –ó–∞–º–µ—á–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –º—ã—à–ª–µ–Ω–∏—è
            </h3>

            <div>
              <Label>–ö–∞–∫–∏–µ —Ç–∏–ø—ã –º—ã—Å–ª–µ–π –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ</Label>
              <div className="grid grid-cols-1 gap-2 mt-2">
                {[
                  '–ß–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –º—ã—à–ª–µ–Ω–∏–µ: "–õ–∏–±–æ –∏–¥–µ–∞–ª—å–Ω–æ, –ª–∏–±–æ –ø—Ä–æ–≤–∞–ª"',
                  '–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏–∑–∞—Ü–∏—è: "–≠—Ç–æ —É–∂–∞—Å–Ω–æ, –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞"',
                  '–ß—Ç–µ–Ω–∏–µ –º—ã—Å–ª–µ–π: "–û–Ω –¥—É–º–∞–µ—Ç, —á—Ç–æ —è..."',
                  '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ: "–¢–æ—á–Ω–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è"',
                  '–û–±–µ—Å—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–≥–æ: "–≠—Ç–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å"',
                  '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ–≤–æ–¥—ã: "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –≥–ª—É–ø–æ, –∑–Ω–∞—á–∏—Ç —è –≥–ª—É–ø"',
                  '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: "–≠—Ç–æ –º–æ—è –≤–∏–Ω–∞"',
                  '–î–æ–ª–∂–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ: "–Ø –¥–æ–ª–∂–µ–Ω/–æ–±—è–∑–∞–Ω"'
                ].map((pattern) => (
                  <div key={pattern} className="flex items-center space-x-2">
                    <Checkbox
                      id={pattern}
                      checked={data.thinkingPatterns?.includes(pattern) || false}
                      onCheckedChange={(checked) => 
                        handleCheckboxChange('thinkingPatterns', pattern, checked as boolean)
                      }
                    />
                    <Label htmlFor={pattern} className="text-sm">{pattern}</Label>
                  </div>
                ))}
              </div>
            </div>
          </div>

          <div className="bg-green-100 p-4 rounded-lg">
            <p className="text-sm text-green-800">
              <strong>–ü–æ–º–Ω–∏—Ç–µ:</strong> –ú—ã—Å–ª–∏ ‚Äî —ç—Ç–æ –Ω–µ —Ñ–∞–∫—Ç—ã. –û–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∏ —É—Ö–æ–¥—è—Ç. 
              –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–º–µ—á–∞—Ç—å –∏—Ö, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∏ –≤—ã–±–∏—Ä–∞—Ç—å, –∫–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö –∑–∞—Å–ª—É–∂–∏–≤–∞—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è.
            </p>
          </div>
        </CardContent>
      </Card>

      <div className="flex justify-between">
        <Button variant="outline" onClick={onPrev}>
          <ArrowLeft className="w-4 h-4 mr-2" />
          –ù–∞–∑–∞–¥
        </Button>
        <Button onClick={onNext}>
          –î–∞–ª–µ–µ: –ë–∞–∑–æ–≤—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
        </Button>
      </div>
    </div>
  );
};

export default Step3ThoughtsWork;
