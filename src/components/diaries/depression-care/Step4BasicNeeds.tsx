
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Slider } from '@/components/ui/slider';
import { ArrowLeft } from 'lucide-react';
import { DepressionCareDiaryData } from './types';

interface Step4BasicNeedsProps {
  data: DepressionCareDiaryData;
  onDataChange: (field: string, value: any) => void;
  onNext: () => void;
  onPrev: () => void;
}

const Step4BasicNeeds: React.FC<Step4BasicNeedsProps> = ({ 
  data, 
  onDataChange, 
  onNext, 
  onPrev 
}) => {
  const handleNeedChange = (category: string, need: string, value: number) => {
    onDataChange('basicNeeds', {
      ...data.basicNeeds,
      [category]: {
        ...data.basicNeeds?.[category],
        [need]: value
      }
    });
  };

  const handleImprovementChange = (category: string, value: string) => {
    onDataChange('needsImprovement', {
      ...data.needsImprovement,
      [category]: value
    });
  };

  return (
    <div className="space-y-8">
      <Card className="border-purple-200 bg-purple-50">
        <CardHeader>
          <CardTitle className="text-purple-800">
            üè† –ó–∞–±–æ—Ç–∞ –æ –±–∞–∑–æ–≤—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <p className="text-sm text-purple-700">
            –û—Ü–µ–Ω–∫–∞ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Ç 1 (—Å–æ–≤—Å–µ–º –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–æ) –¥–æ 10 (–ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–æ)
          </p>

          {/* –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ */}
          <Card className="border-pink-200 bg-pink-50">
            <CardHeader>
              <CardTitle className="text-pink-800 text-lg">
                –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label className="text-base font-medium">–°–æ–Ω –∏ –æ—Ç–¥—ã—Ö</Label>
                <div className="space-y-3 mt-2">
                  {[
                    { key: 'sleepQuality', label: '–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞' },
                    { key: 'dailyRest', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–¥—ã—Ö–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è' },
                    { key: 'recoveryFeeling', label: '–ß—É–≤—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è' }
                  ].map(({ key, label }) => (
                    <div key={key}>
                      <Label className="text-sm">{label}</Label>
                      <div className="mt-1 space-y-1">
                        <Slider
                          value={[data.basicNeeds?.sleep?.[key] || 5]}
                          onValueChange={(value) => handleNeedChange('sleep', key, value[0])}
                          min={1}
                          max={10}
                          step={1}
                          className="w-full"
                        />
                        <div className="text-xs text-gray-600 text-center">
                          {data.basicNeeds?.sleep?.[key] || 5}/10
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                <div className="mt-3">
                  <Label>–ß—Ç–æ –º–æ–≥—É —É–ª—É—á—à–∏—Ç—å</Label>
                  <Input
                    value={data.needsImprovement?.sleep || ''}
                    onChange={(e) => handleImprovementChange('sleep', e.target.value)}
                    placeholder="–ò–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–Ω–∞ –∏ –æ—Ç–¥—ã—Ö–∞..."
                    className="mt-1"
                  />
                </div>
              </div>

              <div>
                <Label className="text-base font-medium">–ü–∏—Ç–∞–Ω–∏–µ</Label>
                <div className="space-y-3 mt-2">
                  {[
                    { key: 'mealRegularity', label: '–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏' },
                    { key: 'nutritionQuality', label: '–ö–∞—á–µ—Å—Ç–≤–æ –ø–∏—Ç–∞–Ω–∏—è' },
                    { key: 'eatingPleasure', label: '–£–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –µ–¥—ã' }
                  ].map(({ key, label }) => (
                    <div key={key}>
                      <Label className="text-sm">{label}</Label>
                      <div className="mt-1 space-y-1">
                        <Slider
                          value={[data.basicNeeds?.nutrition?.[key] || 5]}
                          onValueChange={(value) => handleNeedChange('nutrition', key, value[0])}
                          min={1}
                          max={10}
                          step={1}
                          className="w-full"
                        />
                        <div className="text-xs text-gray-600 text-center">
                          {data.basicNeeds?.nutrition?.[key] || 5}/10
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                <div className="mt-3">
                  <Label>–ß—Ç–æ –º–æ–≥—É —É–ª—É—á—à–∏—Ç—å</Label>
                  <Input
                    value={data.needsImprovement?.nutrition || ''}
                    onChange={(e) => handleImprovementChange('nutrition', e.target.value)}
                    placeholder="–ò–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è..."
                    className="mt-1"
                  />
                </div>
              </div>

              <div>
                <Label className="text-base font-medium">–î–≤–∏–∂–µ–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</Label>
                <div className="space-y-3 mt-2">
                  {[
                    { key: 'physicalActivity', label: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' },
                    { key: 'freshAir', label: '–í—Ä–µ–º—è –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ' },
                    { key: 'bodyConnection', label: '–°–≤—è–∑—å —Å —Ç–µ–ª–æ–º' }
                  ].map(({ key, label }) => (
                    <div key={key}>
                      <Label className="text-sm">{label}</Label>
                      <div className="mt-1 space-y-1">
                        <Slider
                          value={[data.basicNeeds?.movement?.[key] || 5]}
                          onValueChange={(value) => handleNeedChange('movement', key, value[0])}
                          min={1}
                          max={10}
                          step={1}
                          className="w-full"
                        />
                        <div className="text-xs text-gray-600 text-center">
                          {data.basicNeeds?.movement?.[key] || 5}/10
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                <div className="mt-3">
                  <Label>–ß—Ç–æ –º–æ–≥—É —É–ª—É—á—à–∏—Ç—å</Label>
                  <Input
                    value={data.needsImprovement?.movement || ''}
                    onChange={(e) => handleImprovementChange('movement', e.target.value)}
                    placeholder="–ò–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏..."
                    className="mt-1"
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–º—Ñ–æ—Ä—Ç */}
          <Card className="border-blue-200 bg-blue-50">
            <CardHeader>
              <CardTitle className="text-blue-800 text-lg">
                –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–º—Ñ–æ—Ä—Ç
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label className="text-base font-medium">–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</Label>
                <div className="space-y-3 mt-2">
                  {[
                    { key: 'homeSafety', label: '–ß—É–≤—Å—Ç–≤–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ–º–∞' },
                    { key: 'environmentStability', label: '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏—è' },
                    { key: 'authenticity', label: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Ç—å —Å–æ–±–æ–π' }
                  ].map(({ key, label }) => (
                    <div key={key}>
                      <Label className="text-sm">{label}</Label>
                      <div className="mt-1 space-y-1">
                        <Slider
                          value={[data.basicNeeds?.safety?.[key] || 5]}
                          onValueChange={(value) => handleNeedChange('safety', key, value[0])}
                          min={1}
                          max={10}
                          step={1}
                          className="w-full"
                        />
                        <div className="text-xs text-gray-600 text-center">
                          {data.basicNeeds?.safety?.[key] || 5}/10
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <Label className="text-base font-medium">–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å</Label>
                <div className="space-y-3 mt-2">
                  {[
                    { key: 'futureConfidence', label: '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º –¥–Ω–µ' },
                    { key: 'basicNeedsCoverage', label: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—Ä—ã–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –Ω—É–∂–¥—ã' }
                  ].map(({ key, label }) => (
                    <div key={key}>
                      <Label className="text-sm">{label}</Label>
                      <div className="mt-1 space-y-1">
                        <Slider
                          value={[data.basicNeeds?.financial?.[key] || 5]}
                          onValueChange={(value) => handleNeedChange('financial', key, value[0])}
                          min={1}
                          max={10}
                          step={1}
                          className="w-full"
                        />
                        <div className="text-xs text-gray-600 text-center">
                          {data.basicNeeds?.financial?.[key] || 5}/10
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ */}
          <Card className="border-green-200 bg-green-50">
            <CardHeader>
              <CardTitle className="text-green-800 text-lg">
                –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label className="text-base font-medium">–ë–ª–∏–∑–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è</Label>
                <div className="space-y-3 mt-2">
                  {[
                    { key: 'relationshipQuality', label: '–ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –±–ª–∏–∑–∫–∏–º–∏' },
                    { key: 'understanding', label: '–ß—É–≤—Å—Ç–≤–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è' },
                    { key: 'emotionalSupport', label: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞' }
                  ].map(({ key, label }) => (
                    <div key={key}>
                      <Label className="text-sm">{label}</Label>
                      <div className="mt-1 space-y-1">
                        <Slider
                          value={[data.basicNeeds?.social?.[key] || 5]}
                          onValueChange={(value) => handleNeedChange('social', key, value[0])}
                          min={1}
                          max={10}
                          step={1}
                          className="w-full"
                        />
                        <div className="text-xs text-gray-600 text-center">
                          {data.basicNeeds?.social?.[key] || 5}/10
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <Label className="text-base font-medium">–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å</Label>
                <div className="space-y-3 mt-2">
                  {[
                    { key: 'communityBelonging', label: '–ß—É–≤—Å—Ç–≤–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É' },
                    { key: 'helpingOthers', label: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º' }
                  ].map(({ key, label }) => (
                    <div key={key}>
                      <Label className="text-sm">{label}</Label>
                      <div className="mt-1 space-y-1">
                        <Slider
                          value={[data.basicNeeds?.belonging?.[key] || 5]}
                          onValueChange={(value) => handleNeedChange('belonging', key, value[0])}
                          min={1}
                          max={10}
                          step={1}
                          className="w-full"
                        />
                        <div className="text-xs text-gray-600 text-center">
                          {data.basicNeeds?.belonging?.[key] || 5}/10
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–æ—Ç—ã –æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö */}
          <Card className="border-yellow-200 bg-yellow-50">
            <CardHeader>
              <CardTitle className="text-yellow-800 text-lg">
                üéØ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–æ—Ç—ã –æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label>–¢—Ä–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –æ—Å–æ–±–æ–º –≤–Ω–∏–º–∞–Ω–∏–∏</Label>
                <div className="space-y-3 mt-2">
                  {[1, 2, 3].map((num) => (
                    <div key={num} className="space-y-2">
                      <Label className="text-sm">–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å #{num}</Label>
                      <Input
                        value={data.priorityNeeds?.[`need${num}`] || ''}
                        onChange={(e) => onDataChange('priorityNeeds', {
                          ...data.priorityNeeds,
                          [`need${num}`]: e.target.value
                        })}
                        placeholder={`–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å ${num}...`}
                      />
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
                        <div>
                          <Label className="text-xs">–ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ —Å–µ–≥–æ–¥–Ω—è</Label>
                          <Input
                            value={data.priorityNeeds?.[`need${num}Today`] || ''}
                            onChange={(e) => onDataChange('priorityNeeds', {
                              ...data.priorityNeeds,
                              [`need${num}Today`]: e.target.value
                            })}
                            placeholder="–ß—Ç–æ —Å–¥–µ–ª–∞—é —Å–µ–≥–æ–¥–Ω—è..."
                            className="text-sm"
                          />
                        </div>
                        <div>
                          <Label className="text-xs">–®–∞–≥ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ</Label>
                          <Input
                            value={data.priorityNeeds?.[`need${num}Week`] || ''}
                            onChange={(e) => onDataChange('priorityNeeds', {
                              ...data.priorityNeeds,
                              [`need${num}Week`]: e.target.value
                            })}
                            placeholder="–ß—Ç–æ —Å–¥–µ–ª–∞—é –Ω–∞ –Ω–µ–¥–µ–ª–µ..."
                            className="text-sm"
                          />
                        </div>
                        <div>
                          <Label className="text-xs">–ö—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å</Label>
                          <Input
                            value={data.priorityNeeds?.[`need${num}Help`] || ''}
                            onChange={(e) => onDataChange('priorityNeeds', {
                              ...data.priorityNeeds,
                              [`need${num}Help`]: e.target.value
                            })}
                            placeholder="–ö—Ç–æ –ø–æ–º–æ–∂–µ—Ç..."
                            className="text-sm"
                          />
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="bg-purple-100 p-4 rounded-lg">
            <p className="text-sm text-purple-800">
              <strong>–ü–æ–º–Ω–∏—Ç–µ:</strong> –ó–∞–±–æ—Ç–∞ –æ –±–∞–∑–æ–≤—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö ‚Äî —ç—Ç–æ –Ω–µ —Ä–æ—Å–∫–æ—à—å, 
              –∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å. –ú–∞–ª–µ–Ω—å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π 
              –º–æ–≥—É—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤–∞—à–µ –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
            </p>
          </div>
        </CardContent>
      </Card>

      <div className="flex justify-between">
        <Button variant="outline" onClick={onPrev}>
          <ArrowLeft className="w-4 h-4 mr-2" />
          –ù–∞–∑–∞–¥
        </Button>
        <Button onClick={onNext}>
          –î–∞–ª–µ–µ: –ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –∏–∑–±–µ–≥–∞–Ω–∏—è
        </Button>
      </div>
    </div>
  );
};

export default Step4BasicNeeds;
