
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Textarea } from '@/components/ui/textarea';
import { ArrowLeft } from 'lucide-react';
import { DepressionCareDiaryData } from './types';

interface Step5OvercomingAvoidanceProps {
  data: DepressionCareDiaryData;
  onDataChange: (field: string, value: any) => void;
  onNext: () => void;
  onPrev: () => void;
}

const Step5OvercomingAvoidance: React.FC<Step5OvercomingAvoidanceProps> = ({ 
  data, 
  onDataChange, 
  onNext, 
  onPrev 
}) => {
  const handleCheckboxChange = (field: string, value: string, checked: boolean) => {
    const currentValues = data[field] || [];
    if (checked) {
      onDataChange(field, [...currentValues, value]);
    } else {
      onDataChange(field, currentValues.filter((item: string) => item !== value));
    }
  };

  const handleTaskStepChange = (index: number, value: string) => {
    const currentSteps = data.taskSteps || [];
    const newSteps = [...currentSteps];
    newSteps[index] = value;
    onDataChange('taskSteps', newSteps);
  };

  const addTaskStep = () => {
    const currentSteps = data.taskSteps || [];
    onDataChange('taskSteps', [...currentSteps, '']);
  };

  const removeTaskStep = (index: number) => {
    const currentSteps = data.taskSteps || [];
    onDataChange('taskSteps', currentSteps.filter((_, i) => i !== index));
  };

  return (
    <div className="space-y-8">
      <Card className="border-orange-200 bg-orange-50">
        <CardHeader>
          <CardTitle className="text-orange-800">
            üö™ –ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –∏–∑–±–µ–≥–∞—é—â–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <p className="text-sm text-orange-700">
            –ò–∑–±–µ–≥–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –∑–∞—â–∏—Ç–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è. –ó–∞–º–µ—á–∞–µ–º –±–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è.
          </p>

          {/* –ó–∞–º–µ—á–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑–±–µ–≥–∞–Ω–∏—è */}
          <Card className="border-orange-300 bg-white">
            <CardHeader>
              <CardTitle className="text-orange-900 text-lg">
                üîç –ó–∞–º–µ—á–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑–±–µ–≥–∞–Ω–∏—è
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* –ß—Ç–æ –∏–∑–±–µ–≥–∞—é */}
              <div>
                <Label className="text-base font-medium">–î–µ–ª–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏</Label>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
                  {[
                    '–†–∞–±–æ—Ç–∞/—É—á–µ–±–∞',
                    '–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞',
                    '–í–∞–∂–Ω—ã–µ –∑–≤–æ–Ω–∫–∏',
                    '–û–ø–ª–∞—Ç–∞ —Å—á–µ—Ç–æ–≤',
                    '–ó–∞–±–æ—Ç–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ',
                    '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ'
                  ].map((task) => (
                    <div key={task} className="flex items-center space-x-2">
                      <Checkbox
                        id={task}
                        checked={data.avoidedTasks?.includes(task) || false}
                        onCheckedChange={(checked) => 
                          handleCheckboxChange('avoidedTasks', task, checked as boolean)
                        }
                      />
                      <Label htmlFor={task} className="text-sm">{task}</Label>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <Label className="text-base font-medium">–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏</Label>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
                  {[
                    '–í—Å—Ç—Ä–µ—á–∏ —Å –¥—Ä—É–∑—å—è–º–∏',
                    '–°–µ–º–µ–π–Ω—ã–µ —Å–æ–±—Ä–∞–Ω–∏—è',
                    '–ù–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞',
                    '–†–∞–∑–≥–æ–≤–æ—Ä—ã –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É',
                    '–í—ã—Ö–æ–¥ –∏–∑ –¥–æ–º–∞',
                    '–ü—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏'
                  ].map((social) => (
                    <div key={social} className="flex items-center space-x-2">
                      <Checkbox
                        id={social}
                        checked={data.avoidedSocial?.includes(social) || false}
                        onCheckedChange={(checked) => 
                          handleCheckboxChange('avoidedSocial', social, checked as boolean)
                        }
                      />
                      <Label htmlFor={social} className="text-sm">{social}</Label>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <Label className="text-base font-medium">–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã</Label>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
                  {[
                    '–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ —á—É–≤—Å—Ç–≤–∞—Ö',
                    '–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã',
                    '–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π',
                    '–í—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π',
                    '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–∞–Ω–∏—Ü'
                  ].map((emotional) => (
                    <div key={emotional} className="flex items-center space-x-2">
                      <Checkbox
                        id={emotional}
                        checked={data.avoidedEmotional?.includes(emotional) || false}
                        onCheckedChange={(checked) => 
                          handleCheckboxChange('avoidedEmotional', emotional, checked as boolean)
                        }
                      />
                      <Label htmlFor={emotional} className="text-sm">{emotional}</Label>
                    </div>
                  ))}
                </div>
              </div>

              {/* –ü—Ä–æ—è–≤–ª–µ–Ω–∏—è –∏–∑–±–µ–≥–∞–Ω–∏—è */}
              <div>
                <Label className="text-base font-medium">–ö–∞–∫ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –∏–∑–±–µ–≥–∞–Ω–∏–µ</Label>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
                  {[
                    '–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ –ª–∏—Å—Ç–∞—é —Å–æ—Ü—Å–µ—Ç–∏',
                    '–°–º–æ—Ç—Ä—é —Å–µ—Ä–∏–∞–ª—ã/–≤–∏–¥–µ–æ',
                    '–°–ø–ª—é –±–æ–ª—å—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ',
                    '–ï–º –æ—Ç —Å–∫—É–∫–∏',
                    '–£–±–∏—Ä–∞—é—Å—å (–æ—Ç–∫–ª–∞–¥—ã–≤–∞—è –≥–ª–∞–≤–Ω–æ–µ)',
                    '–ò–≥—Ä–∞—é –≤ –∏–≥—Ä—ã',
                    '–ß–∏—Ç–∞—é –≤—Å–µ –ø–æ–¥—Ä—è–¥',
                    '–ñ–∞–ª—É—é—Å—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã'
                  ].map((manifestation) => (
                    <div key={manifestation} className="flex items-center space-x-2">
                      <Checkbox
                        id={manifestation}
                        checked={data.avoidanceManifestations?.includes(manifestation) || false}
                        onCheckedChange={(checked) => 
                          handleCheckboxChange('avoidanceManifestations', manifestation, checked as boolean)
                        }
                      />
                      <Label htmlFor={manifestation} className="text-sm">{manifestation}</Label>
                    </div>
                  ))}
                </div>
              </div>

              {/* –ü—Ä–∏—á–∏–Ω—ã –∏–∑–±–µ–≥–∞–Ω–∏—è */}
              <div>
                <Label className="text-base font-medium">–ß—Ç–æ —Å—Ç–æ–∏—Ç –∑–∞ –∏–∑–±–µ–≥–∞–Ω–∏–µ–º</Label>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
                  {[
                    '–°—Ç—Ä–∞—Ö –Ω–µ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è',
                    '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º ("–ª—É—á—à–µ –Ω–µ –¥–µ–ª–∞—Ç—å, —á–µ–º –ø–ª–æ—Ö–æ")',
                    '–£—Å—Ç–∞–ª–æ—Å—Ç—å –∏ –∏—Å—Ç–æ—â–µ–Ω–∏–µ',
                    '–°—Ç—Ä–∞—Ö –∫—Ä–∏—Ç–∏–∫–∏',
                    '–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ',
                    '–û—â—É—â–µ–Ω–∏–µ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏',
                    '–¢—Ä–µ–≤–æ–≥–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ',
                    '–î–µ–ø—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∞–ø–∞—Ç–∏—è'
                  ].map((reason) => (
                    <div key={reason} className="flex items-center space-x-2">
                      <Checkbox
                        id={reason}
                        checked={data.avoidanceReasons?.includes(reason) || false}
                        onCheckedChange={(checked) => 
                          handleCheckboxChange('avoidanceReasons', reason, checked as boolean)
                        }
                      />
                      <Label htmlFor={reason} className="text-sm">{reason}</Label>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* –ú—è–≥–∫–æ–µ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –∏–∑–±–µ–≥–∞–Ω–∏—è */}
          <Card className="border-green-200 bg-green-50">
            <CardHeader>
              <CardTitle className="text-green-800 text-lg">
                üèóÔ∏è –ú—è–≥–∫–æ–µ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –∏–∑–±–µ–≥–∞–Ω–∏—è
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label>–ó–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä—É—é –∏–∑–±–µ–≥–∞—é –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ</Label>
                <Input
                  value={data.mainAvoidedTask || ''}
                  onChange={(e) => onDataChange('mainAvoidedTask', e.target.value)}
                  placeholder="–û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∏–∑–±–µ–≥–∞–µ–º—É—é –∑–∞–¥–∞—á—É..."
                  className="mt-2"
                />
              </div>

              <div>
                <Label>–ü–æ—á–µ–º—É —ç—Ç–∞ –∑–∞–¥–∞—á–∞ –≤–∞–∂–Ω–∞ –¥–ª—è –º–µ–Ω—è</Label>
                <Textarea
                  value={data.taskImportance || ''}
                  onChange={(e) => onDataChange('taskImportance', e.target.value)}
                  placeholder="–û–±—ä—è—Å–Ω–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏..."
                  className="mt-2"
                />
              </div>

              <div>
                <Label>–ö–∞–∫–∏–µ —Å—Ç—Ä–∞—Ö–∏ —Å–≤—è–∑–∞–Ω—ã —Å —ç—Ç–æ–π –∑–∞–¥–∞—á–µ–π</Label>
                <Textarea
                  value={data.taskFears || ''}
                  onChange={(e) => onDataChange('taskFears', e.target.value)}
                  placeholder="–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ —Å—Ç—Ä–∞—Ö–∏..."
                  className="mt-2"
                />
              </div>

              {/* –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –º–∏–∫—Ä–æ-—à–∞–≥–∏ */}
              <div>
                <div className="flex items-center justify-between mb-2">
                  <Label className="text-base font-medium">–†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –º–∏–∫—Ä–æ-—à–∞–≥–∏</Label>
                  <Button 
                    type="button" 
                    variant="outline" 
                    size="sm"
                    onClick={addTaskStep}
                  >
                    –î–æ–±–∞–≤–∏—Ç—å —à–∞–≥
                  </Button>
                </div>
                {(data.taskSteps || []).map((step, index) => (
                  <div key={index} className="flex items-center space-x-2 mb-2">
                    <Input
                      value={step}
                      onChange={(e) => handleTaskStepChange(index, e.target.value)}
                      placeholder={`–®–∞–≥ ${index + 1}...`}
                      className="flex-1"
                    />
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => removeTaskStep(index)}
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </Button>
                  </div>
                ))}
              </div>

              <div>
                <Label>–°–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π –ø–µ—Ä–≤—ã–π —à–∞–≥, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ —Å–º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å</Label>
                <Input
                  value={data.smallestStep || ''}
                  onChange={(e) => onDataChange('smallestStep', e.target.value)}
                  placeholder="–û–ø–∏—à–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–≤—ã–π —à–∞–≥..."
                  className="mt-2"
                />
              </div>

              {/* –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ */}
              <div>
                <Label className="text-base font-medium">–ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å</Label>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2 mt-2">
                  {[
                    '–í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏—è—Ç–Ω—É—é –º—É–∑—ã–∫—É',
                    '–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ª—é–±–∏–º—ã–π –Ω–∞–ø–∏—Ç–æ–∫',
                    '–ü–æ–ø—Ä–æ—Å–∏—Ç—å –¥—Ä—É–≥–∞ "–ø–æ—Å–∏–¥–µ—Ç—å —Ä—è–¥–æ–º"',
                    '–ü–æ–æ–±–µ—â–∞—Ç—å —Å–µ–±–µ –Ω–∞–≥—Ä–∞–¥—É',
                    '–°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏',
                    '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ 15 –º–∏–Ω—É—Ç'
                  ].map((strategy) => (
                    <div key={strategy} className="flex items-center space-x-2">
                      <Checkbox
                        id={strategy}
                        checked={data.supportStrategies?.includes(strategy) || false}
                        onCheckedChange={(checked) => 
                          handleCheckboxChange('supportStrategies', strategy, checked as boolean)
                        }
                      />
                      <Label htmlFor={strategy} className="text-sm">{strategy}</Label>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* –†–∞–±–æ—Ç–∞ —Å –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º–æ–º */}
          <Card className="border-purple-200 bg-purple-50">
            <CardHeader>
              <CardTitle className="text-purple-800 text-lg">
                üèÜ –†–∞–±–æ—Ç–∞ —Å –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º–æ–º
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label className="text-base font-medium">–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç—Å–∫–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏</Label>
                <div className="grid grid-cols-1 gap-2 mt-2">
                  {[
                    '–ï—Å–ª–∏ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ, —Ç–æ –ª—É—á—à–µ –Ω–µ –¥–µ–ª–∞—Ç—å',
                    '–õ—é–¥–∏ –ø–æ–¥—É–º–∞—é—Ç, —á—Ç–æ —è –Ω–µ–∫–æ–º–ø–µ—Ç–µ–Ω—Ç–µ–Ω/–Ω–∞',
                    '–£ –º–µ–Ω—è –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞',
                    '–Ø –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –Ω–µ –∑–Ω–∞—é/–Ω–µ —É–º–µ—é',
                    '–û—à–∏–±–∫–∞ = –ø—Ä–æ–≤–∞–ª'
                  ].map((thought) => (
                    <div key={thought} className="flex items-center space-x-2">
                      <Checkbox
                        id={thought}
                        checked={data.perfectionistThoughts?.includes(thought) || false}
                        onCheckedChange={(checked) => 
                          handleCheckboxChange('perfectionistThoughts', thought, checked as boolean)
                        }
                      />
                      <Label htmlFor={thought} className="text-sm">{thought}</Label>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <Label>–ó–∞–¥–∞—á–∞, –≥–¥–µ –º–æ–≥—É –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–æ"</Label>
                <Input
                  value={data.goodEnoughTask || ''}
                  onChange={(e) => onDataChange('goodEnoughTask', e.target.value)}
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏..."
                  className="mt-2"
                />
              </div>

              <div>
                <Label>–ö—Ä–∏—Ç–µ—Ä–∏–π "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–æ" –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏</Label>
                <Textarea
                  value={data.goodEnoughCriteria || ''}
                  onChange={(e) => onDataChange('goodEnoughCriteria', e.target.value)}
                  placeholder="–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ '–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–æ'..."
                  className="mt-2"
                />
              </div>

              <div className="bg-white p-4 rounded-lg">
                <p className="text-sm text-purple-800">
                  <strong>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</strong> –õ—É—á—à–µ —Å–¥–µ–ª–∞–Ω–Ω–æ–µ –Ω–∞ 70%, —á–µ–º –Ω–µ —Å–¥–µ–ª–∞–Ω–Ω–æ–µ –Ω–∞ 100%.
                </p>
              </div>
            </CardContent>
          </Card>
        </CardContent>
      </Card>

      <div className="flex justify-between">
        <Button variant="outline" onClick={onPrev}>
          <ArrowLeft className="w-4 h-4 mr-2" />
          –ù–∞–∑–∞–¥
        </Button>
        <Button onClick={onNext}>
          –î–∞–ª–µ–µ: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        </Button>
      </div>
    </div>
  );
};

export default Step5OvercomingAvoidance;
