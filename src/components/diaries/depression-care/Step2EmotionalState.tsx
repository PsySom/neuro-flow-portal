
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Textarea } from '@/components/ui/textarea';
import { Slider } from '@/components/ui/slider';
import { ArrowLeft } from 'lucide-react';
import { DepressionCareDiaryData } from './types';

interface Step2EmotionalStateProps {
  data: DepressionCareDiaryData;
  onDataChange: (field: string, value: any) => void;
  onNext: () => void;
  onPrev: () => void;
}

const Step2EmotionalState: React.FC<Step2EmotionalStateProps> = ({ 
  data, 
  onDataChange, 
  onNext, 
  onPrev 
}) => {
  const handleEmotionChange = (emotion: string, value: number) => {
    onDataChange('emotions', {
      ...data.emotions,
      [emotion]: value
    });
  };

  const handleCheckboxChange = (field: string, value: string, checked: boolean) => {
    const currentValues = data[field] || [];
    if (checked) {
      onDataChange(field, [...currentValues, value]);
    } else {
      onDataChange(field, currentValues.filter((item: string) => item !== value));
    }
  };

  return (
    <div className="space-y-8">
      <Card className="border-blue-200 bg-blue-50">
        <CardHeader>
          <CardTitle className="text-blue-800">
            üíô –†–∞–±–æ—Ç–∞ —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* –£–≥–ª—É–±–ª–µ–Ω–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-blue-900">
              –£–≥–ª—É–±–ª–µ–Ω–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            </h3>
            <p className="text-sm text-blue-700">
              –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ –∂–µ–ª–∞–Ω–∏—é, –∫–æ–≥–¥–∞ –µ—Å—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö.
            </p>
            
            <div className="space-y-4">
              <div>
                <Label>–û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (-10 –¥–æ +10)</Label>
                <div className="mt-2 space-y-2">
                  <Slider
                    value={[data.currentMood || 0]}
                    onValueChange={(value) => onDataChange('currentMood', value[0])}
                    min={-10}
                    max={10}
                    step={1}
                    className="w-full"
                  />
                  <div className="text-center text-sm text-gray-600">
                    –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {data.currentMood || 0}
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <Label className="text-base font-medium">–°–ª–æ–∂–Ω—ã–µ —ç–º–æ—Ü–∏–∏ (1-10)</Label>
                  <div className="space-y-3 mt-2">
                    {[
                      '–ì—Ä—É—Å—Ç—å/–ø–µ—á–∞–ª—å',
                      '–¢—Ä–µ–≤–æ–≥–∞/–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ', 
                      '–ó–ª–æ—Å—Ç—å/—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ',
                      '–ê–ø–∞—Ç–∏—è/–±–µ–∑—Ä–∞–∑–ª–∏—á–∏–µ',
                      '–í–∏–Ω–∞',
                      '–°—Ç—ã–¥',
                      '–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ',
                      '–ë–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å',
                      '–°—Ç—Ä–∞—Ö',
                      '–†–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ'
                    ].map((emotion) => (
                      <div key={emotion} className="flex items-center space-x-3">
                        <Label className="min-w-0 flex-1 text-sm">{emotion}</Label>
                        <Input
                          type="number"
                          min="1"
                          max="10"
                          className="w-16"
                          value={data.emotions?.[emotion] || ''}
                          onChange={(e) => handleEmotionChange(emotion, parseInt(e.target.value) || 0)}
                        />
                      </div>
                    ))}
                  </div>
                </div>

                <div>
                  <Label className="text-base font-medium">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —ç–º–æ—Ü–∏–∏ (1-10)</Label>
                  <div className="space-y-3 mt-2">
                    {[
                      '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ',
                      '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å',
                      '–ü—Ä–∏–Ω—è—Ç–∏–µ',
                      '–ù–∞–¥–µ–∂–¥–∞',
                      '–õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ',
                      '–ù–µ–∂–Ω–æ—Å—Ç—å –∫ —Å–µ–±–µ'
                    ].map((emotion) => (
                      <div key={emotion} className="flex items-center space-x-3">
                        <Label className="min-w-0 flex-1 text-sm">{emotion}</Label>
                        <Input
                          type="number"
                          min="1"
                          max="10"
                          className="w-16"
                          value={data.emotions?.[emotion] || ''}
                          onChange={(e) => handleEmotionChange(emotion, parseInt(e.target.value) || 0)}
                        />
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              <div>
                <Label>–ß—Ç–æ –º–æ–≥–ª–æ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</Label>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-2 mt-2">
                  {[
                    '–°–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è',
                    '–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è',
                    '–ú—ã—Å–ª–∏ –æ –±—É–¥—É—â–µ–º',
                    '–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ',
                    '–ü–æ–≥–æ–¥–∞',
                    '–û–±—â–µ–Ω–∏–µ —Å –ª—é–¥—å–º–∏',
                    '–£—Å—Ç–∞–ª–æ—Å—Ç—å',
                    '–ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                    '–ù–µ–ø–æ–Ω—è—Ç–Ω–æ –æ—Ç–∫—É–¥–∞'
                  ].map((trigger) => (
                    <div key={trigger} className="flex items-center space-x-2">
                      <Checkbox
                        id={trigger}
                        checked={data.moodTriggers?.includes(trigger) || false}
                        onCheckedChange={(checked) => 
                          handleCheckboxChange('moodTriggers', trigger, checked as boolean)
                        }
                      />
                      <Label htmlFor={trigger} className="text-sm">{trigger}</Label>
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <Label>–ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–≤–ª–∏—è–ª–∞</Label>
                <Textarea
                  value={data.specificSituation || ''}
                  onChange={(e) => onDataChange('specificSituation', e.target.value)}
                  placeholder="–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é..."
                  className="mt-2"
                />
              </div>
            </div>
          </div>

          {/* –†–∞–±–æ—Ç–∞ —Å —Ç—Ä–µ–≤–æ–≥–æ–π */}
          <Card className="border-orange-200 bg-orange-50">
            <CardHeader>
              <CardTitle className="text-orange-800 text-lg">
                üåä –†–∞–±–æ—Ç–∞ —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∏ –ø–∞–Ω–∏–∫–æ–π
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label>–£—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–≥–∏ —Å–µ–π—á–∞—Å (1-10)</Label>
                <div className="mt-2 space-y-2">
                  <Slider
                    value={[data.anxietyLevel || 1]}
                    onValueChange={(value) => onDataChange('anxietyLevel', value[0])}
                    min={1}
                    max={10}
                    step={1}
                    className="w-full"
                  />
                  <div className="text-center text-sm text-gray-600">
                    –£—Ä–æ–≤–µ–Ω—å: {data.anxietyLevel || 1}
                  </div>
                </div>
              </div>

              <div>
                <Label>–ì–¥–µ —á—É–≤—Å—Ç–≤—É—é —Ç—Ä–µ–≤–æ–≥—É –≤ —Ç–µ–ª–µ</Label>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-2 mt-2">
                  {[
                    '–°–∂–∏–º–∞–µ—Ç—Å—è –≥—Ä—É–¥—å',
                    '–ö–æ–º–æ–∫ –≤ –≥–æ—Ä–ª–µ',
                    '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤ –ø–ª–µ—á–∞—Ö',
                    '–î—Ä–æ–∂—å –≤ —Ä—É–∫–∞—Ö',
                    '–£—á–∞—â–µ–Ω–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ',
                    '–¢–æ—à–Ω–æ—Ç–∞',
                    '–ì–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ',
                    '–ü–æ—Ç–ª–∏–≤–æ—Å—Ç—å',
                    '–¢—Ä—É–¥–Ω–æ –¥—ã—à–∞—Ç—å'
                  ].map((symptom) => (
                    <div key={symptom} className="flex items-center space-x-2">
                      <Checkbox
                        id={symptom}
                        checked={data.anxietySymptoms?.includes(symptom) || false}
                        onCheckedChange={(checked) => 
                          handleCheckboxChange('anxietySymptoms', symptom, checked as boolean)
                        }
                      />
                      <Label htmlFor={symptom} className="text-sm">{symptom}</Label>
                    </div>
                  ))}
                </div>
              </div>

              <div className="bg-white dark:bg-gray-800 p-4 rounded-lg">
                <h4 className="font-medium text-orange-800 mb-3">–¢–µ—Ö–Ω–∏–∫–∞ 5-4-3-2-1 (–∑–∞–∑–µ–º–ª–µ–Ω–∏–µ)</h4>
                <div className="space-y-3">
                  <div>
                    <Label>5 –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –í–ò–ñ–£</Label>
                    <Input
                      value={data.grounding?.see || ''}
                      onChange={(e) => onDataChange('grounding', {
                        ...data.grounding,
                        see: e.target.value
                      })}
                      placeholder="–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é..."
                      className="mt-1"
                    />
                  </div>
                  <div>
                    <Label>4 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã—Ö –ö–ê–°–ê–Æ–°–¨</Label>
                    <Input
                      value={data.grounding?.touch || ''}
                      onChange={(e) => onDataChange('grounding', {
                        ...data.grounding,
                        touch: e.target.value
                      })}
                      placeholder="–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é..."
                      className="mt-1"
                    />
                  </div>
                  <div>
                    <Label>3 –∑–≤—É–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –°–õ–´–®–£</Label>
                    <Input
                      value={data.grounding?.hear || ''}
                      onChange={(e) => onDataChange('grounding', {
                        ...data.grounding,
                        hear: e.target.value
                      })}
                      placeholder="–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é..."
                      className="mt-1"
                    />
                  </div>
                  <div>
                    <Label>2 –∑–∞–ø–∞—Ö–∞, –∫–æ—Ç–æ—Ä—ã–µ –ß–£–í–°–¢–í–£–Æ</Label>
                    <Input
                      value={data.grounding?.smell || ''}
                      onChange={(e) => onDataChange('grounding', {
                        ...data.grounding,
                        smell: e.target.value
                      })}
                      placeholder="–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é..."
                      className="mt-1"
                    />
                  </div>
                  <div>
                    <Label>1 –≤–∫—É—Å –≤–æ —Ä—Ç—É</Label>
                    <Input
                      value={data.grounding?.taste || ''}
                      onChange={(e) => onDataChange('grounding', {
                        ...data.grounding,
                        taste: e.target.value
                      })}
                      placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∫—É—Å..."
                      className="mt-1"
                    />
                  </div>
                </div>
              </div>

              <div>
                <Label>–û —á–µ–º —Ç—Ä–µ–≤–æ–∂—É—Å—å (–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–µ–¥–º–µ—Ç —Ç—Ä–µ–≤–æ–≥–∏)</Label>
                <Textarea
                  value={data.anxietySubject || ''}
                  onChange={(e) => onDataChange('anxietySubject', e.target.value)}
                  placeholder="–û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–≤–æ–≥–∏..."
                  className="mt-2"
                />
              </div>
            </CardContent>
          </Card>

          <div className="bg-blue-100 p-4 rounded-lg">
            <p className="text-sm text-blue-800">
              <strong>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</strong> –í—Å–µ —á—É–≤—Å—Ç–≤–∞ –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ. 
              –û–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∏ —É—Ö–æ–¥—è—Ç, –∫–∞–∫ –ø–æ–≥–æ–¥–∞. –¢—Ä–µ–≤–æ–≥–∞ –∏ –¥—Ä—É–≥–∏–µ —Å–ª–æ–∂–Ω—ã–µ —ç–º–æ—Ü–∏–∏ ‚Äî 
              —ç—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å—Ç—Ä–µ—Å—Å, –∏ —Å –Ω–∏–º–∏ –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å.
            </p>
          </div>
        </CardContent>
      </Card>

      <div className="flex justify-between">
        <Button variant="outline" onClick={onPrev}>
          <ArrowLeft className="w-4 h-4 mr-2" />
          –ù–∞–∑–∞–¥
        </Button>
        <Button onClick={onNext}>
          –î–∞–ª–µ–µ: –†–∞–±–æ—Ç–∞ —Å –º—ã—Å–ª—è–º–∏
        </Button>
      </div>
    </div>
  );
};

export default Step2EmotionalState;
