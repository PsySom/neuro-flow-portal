import { useState, useMemo, useCallback } from 'react';
import { useForm } from 'react-hook-form';
import { SleepDiaryData } from '../types';

export const useSleepDiaryLogic = (onComplete?: () => void) => {
  const [currentStep, setCurrentStep] = useState(1);
  const [recommendations, setRecommendations] = useState<string[]>([]);

  const form = useForm<SleepDiaryData>({
    defaultValues: {
      bedtime: '',
      wakeUpTime: '',
      sleepDuration: 0,
      sleepQuality: 0,
      nightAwakenings: 0,
      morningFeeling: 5,
      hasDayRest: false,
      dayRestType: '',
      dayRestEffectiveness: 5,
      overallSleepImpact: 0,
      sleepDisruptors: [],
      sleepComment: '',
      restComment: ''
    }
  });

  const sleepQuality = form.watch('sleepQuality');
  const sleepDuration = form.watch('sleepDuration');
  const nightAwakenings = form.watch('nightAwakenings');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —à–∞–≥ —Å —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ –≤–ª–∏—è–Ω–∏—è
  const needsFactorsStep = useMemo(() => 
    sleepQuality <= -2 || sleepDuration < 6 || nightAwakenings >= 2,
    [sleepQuality, sleepDuration, nightAwakenings]
  );

  const stepTitles = useMemo(() => ({
    1: '–í—Ä–µ–º—è —Å–Ω–∞',
    2: '–ö–∞—á–µ—Å—Ç–≤–æ',
    3: '–§–∞–∫—Ç–æ—Ä—ã',
    4: '–û—Ç–¥—ã—Ö',
    5: '–ò—Ç–æ–≥–∏'
  }), []);

  const getTotalSteps = useMemo(() => 
    needsFactorsStep ? 5 : 4,
    [needsFactorsStep]
  );

  const getCurrentStepForProgress = useMemo(() => {
    if (!needsFactorsStep && currentStep > 2) {
      return currentStep - 1;
    }
    return currentStep;
  }, [needsFactorsStep, currentStep]);

  const getStepTitle = useCallback((step: number) => 
    stepTitles[step as keyof typeof stepTitles],
    [stepTitles]
  );

  const generateRecommendations = useCallback((data: SleepDiaryData): string[] => {
    const recs: string[] = [];

    if (data.sleepDuration < 6) {
      recs.push('–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –¥–æ 7-9 —á–∞—Å–æ–≤');
      recs.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–µ–≥–æ –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É');
    }

    if (data.sleepQuality <= -2) {
      recs.push('–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–Ω–∞: —Ç–µ–º–Ω–æ—Ç–∞, —Ç–∏—à–∏–Ω–∞, –ø—Ä–æ—Ö–ª–∞–¥–∞');
      recs.push('–ò–∑–±–µ–≥–∞–π—Ç–µ —ç–∫—Ä–∞–Ω–æ–≤ –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞');
    }

    if (data.nightAwakenings >= 2) {
      recs.push('–ü—Ä–∏ —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è—Ö –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è');
      recs.push('–í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —Å–Ω–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤');
    }

    if (data.morningFeeling <= 5) {
      recs.push('–°–æ–∑–¥–∞–π—Ç–µ –º—è–≥–∫–∏–π —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è');
      recs.push('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ —É—Ç—Ä–æ–º');
    }

    if (data.hasDayRest && (data.dayRestEffectiveness || 0) < 5) {
      recs.push('–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞');
      recs.push('–ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –∏–ª–∏ –º–µ–¥–∏—Ç–∞—Ü–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã');
    }

    if (data.overallSleepImpact <= -2) {
      recs.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è (–¥—ã—Ö–∞–Ω–∏–µ 4-7-8)');
      recs.push('–ü—Ä–∏ —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–æ —Å–Ω–æ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É');
    }

    if (data.sleepQuality >= 2 && data.sleepDuration >= 7 && data.morningFeeling >= 7) {
      recs.push('–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—ã–π —Ä–µ–∂–∏–º —Å–Ω–∞');
      recs.push('–í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏ —Å–Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è—é—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏');
    }

    return recs;
  }, []);

  const handleNext = useCallback(() => {
    if (currentStep === 2 && !needsFactorsStep) {
      setCurrentStep(4);
    } else if (currentStep < 5) {
      setCurrentStep(currentStep + 1);
    }
  }, [currentStep, needsFactorsStep]);

  const handlePrev = useCallback(() => {
    if (currentStep === 4 && !needsFactorsStep) {
      setCurrentStep(2);
    } else if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  }, [currentStep, needsFactorsStep]);

  const onSubmit = useCallback(async (data: SleepDiaryData) => {
    const generatedRecommendations = generateRecommendations(data);
    setRecommendations(generatedRecommendations);
    
    try {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å–Ω–∞:', data);
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const { backendDiaryService } = await import('@/services/backend-diary.service');
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç SleepEntry
      const sleepEntry = {
        bedtime: data.bedtime,
        wake_up_time: data.wakeUpTime,
        sleep_duration: data.sleepDuration,
        sleep_quality: data.sleepQuality,
        night_awakenings: data.nightAwakenings,
        morning_feeling: data.morningFeeling,
        has_day_rest: data.hasDayRest,
        day_rest_type: data.dayRestType,
        day_rest_effectiveness: data.dayRestEffectiveness,
        overall_sleep_impact: data.overallSleepImpact,
        sleep_disruptors: data.sleepDisruptors,
        sleep_comment: data.sleepComment,
        rest_comment: data.restComment,
        timestamp: new Date().toISOString()
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ backend —Å–µ—Ä–≤–∏—Å
      const savedEntry = await backendDiaryService.createSleepEntry(sleepEntry, generatedRecommendations);
      console.log('‚úÖ –ó–∞–ø–∏—Å—å –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', savedEntry);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–Ω–µ–≤–Ω–∏–∫–∞ –≤ localStorage
      const today = new Date().toISOString().split('T')[0];
      const diaryStatus = JSON.parse(localStorage.getItem('diary-status-/sleep-diary') || '{}');
      const updatedStatus = { ...diaryStatus, lastEntryDate: today };
      localStorage.setItem('diary-status-/sleep-diary', JSON.stringify(updatedStatus));
      console.log('üìÖ –°—Ç–∞—Ç—É—Å –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedStatus);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      window.dispatchEvent(new CustomEvent('diaryStatusUpdate', {
        detail: { path: '/sleep-diary', status: updatedStatus }
      }));
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å–Ω–∞:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º callback –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => {
      onComplete?.();
    }, 2000);
  }, [generateRecommendations, onComplete]);

  return {
    currentStep,
    form,
    needsFactorsStep,
    recommendations,
    getTotalSteps,
    getCurrentStepForProgress,
    getStepTitle,
    handleNext,
    handlePrev,
    onSubmit
  };
};