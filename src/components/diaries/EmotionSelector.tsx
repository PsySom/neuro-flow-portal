
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Slider } from '@/components/ui/slider';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { emotionsData } from './moodDiaryUtils';

interface EmotionSelectorProps {
  currentMood: number;
  onEmotionsChange: (emotions: Array<{name: string; intensity: number}>) => void;
  selectedEmotions: Array<{name: string; intensity: number}>;
}

const EmotionSelector: React.FC<EmotionSelectorProps> = ({
  currentMood,
  onEmotionsChange,
  selectedEmotions
}) => {
  const [activeTab, setActiveTab] = useState<'primary' | 'all'>('primary');
  const [customEmotion, setCustomEmotion] = useState('');

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –≥—Ä—É–ø–ø—É —ç–º–æ—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
  const getPrimaryEmotions = () => {
    if (currentMood <= -2) return emotionsData.negative;
    if (currentMood >= 2) return emotionsData.positive;
    return emotionsData.neutral;
  };

  const primaryEmotions = getPrimaryEmotions();

  const handleEmotionToggle = (emotionName: string) => {
    const isSelected = selectedEmotions.find(e => e.name === emotionName);
    
    if (isSelected) {
      // –£–±–∏—Ä–∞–µ–º —ç–º–æ—Ü–∏—é
      const updated = selectedEmotions.filter(e => e.name !== emotionName);
      onEmotionsChange(updated);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏—é (–º–∞–∫—Å–∏–º—É–º 3)
      if (selectedEmotions.length < 3) {
        const updated = [...selectedEmotions, { name: emotionName, intensity: 5 }];
        onEmotionsChange(updated);
      }
    }
  };

  const handleIntensityChange = (emotionName: string, intensity: number) => {
    const updated = selectedEmotions.map(emotion =>
      emotion.name === emotionName 
        ? { ...emotion, intensity }
        : emotion
    );
    onEmotionsChange(updated);
  };

  const addCustomEmotion = () => {
    if (customEmotion.trim() && selectedEmotions.length < 3) {
      const updated = [...selectedEmotions, { name: customEmotion.trim(), intensity: 5 }];
      onEmotionsChange(updated);
      setCustomEmotion('');
    }
  };

  const renderEmotionGroup = (emotions: typeof emotionsData.positive, groupName: string, bgColor: string) => (
    <div className={`p-4 rounded-lg ${bgColor} mb-4`}>
      <h4 className="font-medium mb-3 capitalize">{groupName} —ç–º–æ—Ü–∏–∏</h4>
      <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
        {emotions.map((emotion) => {
          const isSelected = selectedEmotions.find(e => e.name === emotion.name);
          const isDisabled = !isSelected && selectedEmotions.length >= 3;
          
          return (
            <div key={emotion.name} className="flex items-center space-x-2">
              <Checkbox
                id={emotion.name}
                checked={!!isSelected}
                onCheckedChange={() => handleEmotionToggle(emotion.name)}
                disabled={isDisabled}
              />
              <label
                htmlFor={emotion.name}
                className={`text-sm flex items-center space-x-1 cursor-pointer ${
                  isDisabled ? 'opacity-50' : ''
                }`}
              >
                <span>{emotion.emoji}</span>
                <span>{emotion.name}</span>
              </label>
            </div>
          );
        })}
      </div>
    </div>
  );

  return (
    <div className="space-y-4">
      {/* Tabs –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —ç–º–æ—Ü–∏–π */}
      <div className="flex space-x-2">
        <Button
          type="button"
          variant={activeTab === 'primary' ? 'default' : 'outline'}
          size="sm"
          onClick={() => setActiveTab('primary')}
        >
          –û—Å–Ω–æ–≤–Ω—ã–µ
        </Button>
        <Button
          type="button"
          variant={activeTab === 'all' ? 'default' : 'outline'}
          size="sm"
          onClick={() => setActiveTab('all')}
        >
          –í—Å–µ —ç–º–æ—Ü–∏–∏
        </Button>
      </div>

      <p className="text-sm text-gray-600">
        –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 3-—Ö —ç–º–æ—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ –æ–ø–∏—Å—ã–≤–∞—é—Ç –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      </p>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –∏–ª–∏ –≤—Å–µ –≥—Ä—É–ø–ø—ã */}
      {activeTab === 'primary' ? (
        renderEmotionGroup(
          primaryEmotions,
          currentMood <= -2 ? '–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ' : currentMood >= 2 ? '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ' : '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ',
          currentMood <= -2 ? 'bg-blue-50' : currentMood >= 2 ? 'bg-yellow-50' : 'bg-gray-50'
        )
      ) : (
        <div className="space-y-4">
          {renderEmotionGroup(emotionsData.positive, '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ', 'bg-yellow-50')}
          {renderEmotionGroup(emotionsData.neutral, '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ', 'bg-gray-50')}
          {renderEmotionGroup(emotionsData.negative, '–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ', 'bg-blue-50')}
        </div>
      )}

      {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–π —ç–º–æ—Ü–∏–∏ */}
      <div className="p-3 border-2 border-dashed border-gray-300 rounded-lg">
        <Label className="text-sm font-medium">–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é —ç–º–æ—Ü–∏—é:</Label>
        <div className="flex space-x-2 mt-2">
          <Input
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–∏"
            value={customEmotion}
            onChange={(e) => setCustomEmotion(e.target.value)}
            disabled={selectedEmotions.length >= 3}
          />
          <Button
            type="button"
            size="sm"
            onClick={addCustomEmotion}
            disabled={!customEmotion.trim() || selectedEmotions.length >= 3}
          >
            –î–æ–±–∞–≤–∏—Ç—å
          </Button>
        </div>
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–º–æ—Ü–∏–π */}
      {selectedEmotions.length > 0 && (
        <div className="space-y-4 p-4 bg-gray-50 rounded-lg">
          <h4 className="font-medium">–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–π</h4>
          {selectedEmotions.map((emotion) => (
            <div key={emotion.name} className="space-y-2">
              <div className="flex justify-between items-center">
                <Label className="flex items-center space-x-2">
                  <span>{emotion.name}</span>
                  <span className="text-lg">
                    {emotion.intensity >= 8 ? 'üî•' : emotion.intensity >= 6 ? '‚ö°' : emotion.intensity >= 4 ? 'üí´' : '‚ú®'}
                  </span>
                </Label>
                <span className="text-sm font-medium">{emotion.intensity}/10</span>
              </div>
              <Slider
                value={[emotion.intensity]}
                onValueChange={(value) => handleIntensityChange(emotion.name, value[0])}
                min={1}
                max={10}
                step={1}
                className="w-full"
              />
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default EmotionSelector;
