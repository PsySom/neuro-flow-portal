import apiClient, { handleApiError } from './api.client';

export interface LoginCredentials {
  username: string; // API expects email in username field
  password: string;
}

export interface RegisterData {
  email: string;
  password: string;
  confirm_password: string;
  first_name?: string;
  last_name?: string;
  full_name?: string;
  privacy_consent: boolean;
  terms_consent: boolean;
}

export interface AuthResponse {
  access_token: string;
  refresh_token: string;
  token_type: string;
}

export interface User {
  id: string; // UUID
  email: string;
  first_name?: string;
  last_name?: string;
  full_name?: string;
  is_active: boolean;
  privacy_consent: boolean;
  terms_consent: boolean;
  privacy_consent_date?: string;
  terms_consent_date?: string;
  created_at: string;
  updated_at: string;
}

class BackendAuthService {
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
  async checkServerHealth(): Promise<boolean> {
    try {
      if (import.meta.env.DEV) {
        console.log('üîç Checking server health at:', 'http://localhost:8000/api/v1');
      }
      const response = await apiClient.get('/health', { timeout: 5000 });
      if (import.meta.env.DEV) {
        console.log('‚úÖ Server is available:', response.status);
      }
      return true;
    } catch (error: any) {
      if (import.meta.env.DEV) {
        console.error('‚ùå Server is not available:', {
          message: error.message,
          code: error.code,
          baseURL: 'http://localhost:8000/api/v1'
        });
      }
      return false;
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  async register(userData: RegisterData): Promise<User> {
    try {
      if (import.meta.env.DEV) {
        console.log('üîÑ Registering user:', userData.email);
      }
      
      const response = await apiClient.post<User>('/auth/register', {
        email: userData.email,
        password: userData.password,
        confirm_password: userData.confirm_password,
        first_name: userData.first_name,
        last_name: userData.last_name,
        full_name: userData.full_name,
        privacy_consent: userData.privacy_consent,
        terms_consent: userData.terms_consent
      });
      
      if (import.meta.env.DEV) {
        console.log('‚úÖ Registration successful');
      }
      return response.data;
    } catch (error: any) {
      if (import.meta.env.DEV) {
        console.error('‚ùå Registration failed:', error);
      }
      throw handleApiError(error);
    }
  }

  // –í—Ö–æ–¥
  async login(credentials: LoginCredentials): Promise<AuthResponse> {
    try {
      if (import.meta.env.DEV) {
        console.log('üîÑ Logging in user:', credentials.username);
        console.log('üì§ Login data being sent:', {
          username: credentials.username,
          password: '***hidden***'
        });
      }
      
      const response = await apiClient.post<AuthResponse>('/auth/login-json', {
        username: credentials.username,
        password: credentials.password
      });
      
      if (import.meta.env.DEV) {
        console.log('‚úÖ Login successful:', response.data);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
      this.storeAuthTokens(response.data);
      
      return response.data;
    } catch (error: any) {
      if (import.meta.env.DEV) {
        console.error('‚ùå Login failed:', error);
        console.error('üîç Error details:', {
          code: error.code,
          message: error.message,
          response: error.response?.data,
          status: error.response?.status
        });
      }
      throw handleApiError(error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getCurrentUser(): Promise<User> {
    try {
      const response = await apiClient.get<User>('/user/me');
      return response.data;
    } catch (error: any) {
      throw handleApiError(error);
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async updateProfile(userData: Partial<User>): Promise<User> {
    try {
      const response = await apiClient.put<User>('/user/me', userData);
      return response.data;
    } catch (error: any) {
      throw handleApiError(error);
    }
  }

  // –í—ã—Ö–æ–¥
  async logout(): Promise<void> {
    try {
      await apiClient.post('/auth/logout');
    } catch (error: any) {
      if (import.meta.env.DEV) {
        console.warn('Logout request failed:', error);
      }
    } finally {
      this.clearAuthData();
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  storeAuthTokens(authResponse: AuthResponse): void {
    localStorage.setItem('access_token', authResponse.access_token);
    localStorage.setItem('refresh_token', authResponse.refresh_token);
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ
  storeUserData(user: User): void {
    localStorage.setItem('auth-user', JSON.stringify(user));
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getStoredUser(): User | null {
    try {
      const userData = localStorage.getItem('auth-user');
      return userData ? JSON.parse(userData) : null;
    } catch (error) {
      if (import.meta.env.DEV) {
        console.error('Error parsing stored user data:', error);
      }
      return null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
  getStoredTokens(): { accessToken: string | null; refreshToken: string | null } {
    return {
      accessToken: localStorage.getItem('access_token'),
      refreshToken: localStorage.getItem('refresh_token'),
    };
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  clearAuthData(): void {
    localStorage.removeItem('access_token');
    localStorage.removeItem('refresh_token');
    localStorage.removeItem('auth-user');
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
  isAuthenticated(): boolean {
    const tokens = this.getStoredTokens();
    return !!(tokens.accessToken && tokens.refreshToken);
  }
}

export const backendAuthService = new BackendAuthService();
export default backendAuthService;
